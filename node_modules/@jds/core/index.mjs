import React, { useState, useCallback, useEffect, forwardRef, cloneElement, useRef, Children, useMemo, createContext, useContext, isValidElement, createElement, useImperativeHandle } from 'react';
import { IcCloseRemove, IcInfo, IcErrorColored, IcSuccessColored, IcWarningColored } from '@jds/core-icons';
import { useTokenValues, noop, createComponent, getCustomJSON, getMonthDates, getNumbers, getMonthNames, getWeekdayInitials, getConfirmLabel, TokenProvider, clamp as clamp$1, getOf } from '@jds/react-engine';
export { TokenProvider, registerIcons } from '@jds/react-engine';

var jsxRuntime = {exports: {}};

var reactJsxRuntime_production_min = {};

/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactJsxRuntime_production_min;

function requireReactJsxRuntime_production_min () {
	if (hasRequiredReactJsxRuntime_production_min) return reactJsxRuntime_production_min;
	hasRequiredReactJsxRuntime_production_min = 1;
var f=React,k=Symbol.for("react.element"),l=Symbol.for("react.fragment"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};
	function q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=""+g);void 0!==a.key&&(e=""+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return {$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}reactJsxRuntime_production_min.Fragment=l;reactJsxRuntime_production_min.jsx=q;reactJsxRuntime_production_min.jsxs=q;
	return reactJsxRuntime_production_min;
}

var reactJsxRuntime_development = {};

/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactJsxRuntime_development;

function requireReactJsxRuntime_development () {
	if (hasRequiredReactJsxRuntime_development) return reactJsxRuntime_development;
	hasRequiredReactJsxRuntime_development = 1;

	if (process.env.NODE_ENV !== "production") {
	  (function() {

	var React$1 = React;

	// ATTENTION
	// When adding new symbols to this file,
	// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
	// The Symbol used to tag the ReactElement-like types.
	var REACT_ELEMENT_TYPE = Symbol.for('react.element');
	var REACT_PORTAL_TYPE = Symbol.for('react.portal');
	var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
	var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
	var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
	var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
	var REACT_CONTEXT_TYPE = Symbol.for('react.context');
	var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
	var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
	var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
	var REACT_MEMO_TYPE = Symbol.for('react.memo');
	var REACT_LAZY_TYPE = Symbol.for('react.lazy');
	var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
	var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator';
	function getIteratorFn(maybeIterable) {
	  if (maybeIterable === null || typeof maybeIterable !== 'object') {
	    return null;
	  }

	  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

	  if (typeof maybeIterator === 'function') {
	    return maybeIterator;
	  }

	  return null;
	}

	var ReactSharedInternals = React$1.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

	function error(format) {
	  {
	    {
	      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	        args[_key2 - 1] = arguments[_key2];
	      }

	      printWarning('error', format, args);
	    }
	  }
	}

	function printWarning(level, format, args) {
	  // When changing this logic, you might want to also
	  // update consoleWithStackDev.www.js as well.
	  {
	    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	    var stack = ReactDebugCurrentFrame.getStackAddendum();

	    if (stack !== '') {
	      format += '%s';
	      args = args.concat([stack]);
	    } // eslint-disable-next-line react-internal/safe-string-coercion


	    var argsWithFormat = args.map(function (item) {
	      return String(item);
	    }); // Careful: RN currently depends on this prefix

	    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
	    // breaks IE9: https://github.com/facebook/react/issues/13610
	    // eslint-disable-next-line react-internal/no-production-logging

	    Function.prototype.apply.call(console[level], console, argsWithFormat);
	  }
	}

	// -----------------------------------------------------------------------------

	var enableScopeAPI = false; // Experimental Create Event Handle API.
	var enableCacheElement = false;
	var enableTransitionTracing = false; // No known bugs, but needs performance testing

	var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
	// stuff. Intended to enable React core members to more easily debug scheduling
	// issues in DEV builds.

	var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

	var REACT_MODULE_REFERENCE;

	{
	  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
	}

	function isValidElementType(type) {
	  if (typeof type === 'string' || typeof type === 'function') {
	    return true;
	  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


	  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {
	    return true;
	  }

	  if (typeof type === 'object' && type !== null) {
	    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
	    // types supported by any Flight configuration anywhere since
	    // we don't know which Flight build this will end up being used
	    // with.
	    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
	      return true;
	    }
	  }

	  return false;
	}

	function getWrappedName(outerType, innerType, wrapperName) {
	  var displayName = outerType.displayName;

	  if (displayName) {
	    return displayName;
	  }

	  var functionName = innerType.displayName || innerType.name || '';
	  return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
	} // Keep in sync with react-reconciler/getComponentNameFromFiber


	function getContextName(type) {
	  return type.displayName || 'Context';
	} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.


	function getComponentNameFromType(type) {
	  if (type == null) {
	    // Host root, text node or just invalid type.
	    return null;
	  }

	  {
	    if (typeof type.tag === 'number') {
	      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
	    }
	  }

	  if (typeof type === 'function') {
	    return type.displayName || type.name || null;
	  }

	  if (typeof type === 'string') {
	    return type;
	  }

	  switch (type) {
	    case REACT_FRAGMENT_TYPE:
	      return 'Fragment';

	    case REACT_PORTAL_TYPE:
	      return 'Portal';

	    case REACT_PROFILER_TYPE:
	      return 'Profiler';

	    case REACT_STRICT_MODE_TYPE:
	      return 'StrictMode';

	    case REACT_SUSPENSE_TYPE:
	      return 'Suspense';

	    case REACT_SUSPENSE_LIST_TYPE:
	      return 'SuspenseList';

	  }

	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_CONTEXT_TYPE:
	        var context = type;
	        return getContextName(context) + '.Consumer';

	      case REACT_PROVIDER_TYPE:
	        var provider = type;
	        return getContextName(provider._context) + '.Provider';

	      case REACT_FORWARD_REF_TYPE:
	        return getWrappedName(type, type.render, 'ForwardRef');

	      case REACT_MEMO_TYPE:
	        var outerName = type.displayName || null;

	        if (outerName !== null) {
	          return outerName;
	        }

	        return getComponentNameFromType(type.type) || 'Memo';

	      case REACT_LAZY_TYPE:
	        {
	          var lazyComponent = type;
	          var payload = lazyComponent._payload;
	          var init = lazyComponent._init;

	          try {
	            return getComponentNameFromType(init(payload));
	          } catch (x) {
	            return null;
	          }
	        }

	      // eslint-disable-next-line no-fallthrough
	    }
	  }

	  return null;
	}

	var assign = Object.assign;

	// Helpers to patch console.logs to avoid logging during side-effect free
	// replaying on render function. This currently only patches the object
	// lazily which won't cover if the log function was extracted eagerly.
	// We could also eagerly patch the method.
	var disabledDepth = 0;
	var prevLog;
	var prevInfo;
	var prevWarn;
	var prevError;
	var prevGroup;
	var prevGroupCollapsed;
	var prevGroupEnd;

	function disabledLog() {}

	disabledLog.__reactDisabledLog = true;
	function disableLogs() {
	  {
	    if (disabledDepth === 0) {
	      /* eslint-disable react-internal/no-production-logging */
	      prevLog = console.log;
	      prevInfo = console.info;
	      prevWarn = console.warn;
	      prevError = console.error;
	      prevGroup = console.group;
	      prevGroupCollapsed = console.groupCollapsed;
	      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

	      var props = {
	        configurable: true,
	        enumerable: true,
	        value: disabledLog,
	        writable: true
	      }; // $FlowFixMe Flow thinks console is immutable.

	      Object.defineProperties(console, {
	        info: props,
	        log: props,
	        warn: props,
	        error: props,
	        group: props,
	        groupCollapsed: props,
	        groupEnd: props
	      });
	      /* eslint-enable react-internal/no-production-logging */
	    }

	    disabledDepth++;
	  }
	}
	function reenableLogs() {
	  {
	    disabledDepth--;

	    if (disabledDepth === 0) {
	      /* eslint-disable react-internal/no-production-logging */
	      var props = {
	        configurable: true,
	        enumerable: true,
	        writable: true
	      }; // $FlowFixMe Flow thinks console is immutable.

	      Object.defineProperties(console, {
	        log: assign({}, props, {
	          value: prevLog
	        }),
	        info: assign({}, props, {
	          value: prevInfo
	        }),
	        warn: assign({}, props, {
	          value: prevWarn
	        }),
	        error: assign({}, props, {
	          value: prevError
	        }),
	        group: assign({}, props, {
	          value: prevGroup
	        }),
	        groupCollapsed: assign({}, props, {
	          value: prevGroupCollapsed
	        }),
	        groupEnd: assign({}, props, {
	          value: prevGroupEnd
	        })
	      });
	      /* eslint-enable react-internal/no-production-logging */
	    }

	    if (disabledDepth < 0) {
	      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
	    }
	  }
	}

	var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
	var prefix;
	function describeBuiltInComponentFrame(name, source, ownerFn) {
	  {
	    if (prefix === undefined) {
	      // Extract the VM specific prefix used by each line.
	      try {
	        throw Error();
	      } catch (x) {
	        var match = x.stack.trim().match(/\n( *(at )?)/);
	        prefix = match && match[1] || '';
	      }
	    } // We use the prefix to ensure our stacks line up with native stack frames.


	    return '\n' + prefix + name;
	  }
	}
	var reentry = false;
	var componentFrameCache;

	{
	  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
	  componentFrameCache = new PossiblyWeakMap();
	}

	function describeNativeComponentFrame(fn, construct) {
	  // If something asked for a stack inside a fake render, it should get ignored.
	  if ( !fn || reentry) {
	    return '';
	  }

	  {
	    var frame = componentFrameCache.get(fn);

	    if (frame !== undefined) {
	      return frame;
	    }
	  }

	  var control;
	  reentry = true;
	  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

	  Error.prepareStackTrace = undefined;
	  var previousDispatcher;

	  {
	    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
	    // for warnings.

	    ReactCurrentDispatcher.current = null;
	    disableLogs();
	  }

	  try {
	    // This should throw.
	    if (construct) {
	      // Something should be setting the props in the constructor.
	      var Fake = function () {
	        throw Error();
	      }; // $FlowFixMe


	      Object.defineProperty(Fake.prototype, 'props', {
	        set: function () {
	          // We use a throwing setter instead of frozen or non-writable props
	          // because that won't throw in a non-strict mode function.
	          throw Error();
	        }
	      });

	      if (typeof Reflect === 'object' && Reflect.construct) {
	        // We construct a different control for this case to include any extra
	        // frames added by the construct call.
	        try {
	          Reflect.construct(Fake, []);
	        } catch (x) {
	          control = x;
	        }

	        Reflect.construct(fn, [], Fake);
	      } else {
	        try {
	          Fake.call();
	        } catch (x) {
	          control = x;
	        }

	        fn.call(Fake.prototype);
	      }
	    } else {
	      try {
	        throw Error();
	      } catch (x) {
	        control = x;
	      }

	      fn();
	    }
	  } catch (sample) {
	    // This is inlined manually because closure doesn't do it for us.
	    if (sample && control && typeof sample.stack === 'string') {
	      // This extracts the first frame from the sample that isn't also in the control.
	      // Skipping one frame that we assume is the frame that calls the two.
	      var sampleLines = sample.stack.split('\n');
	      var controlLines = control.stack.split('\n');
	      var s = sampleLines.length - 1;
	      var c = controlLines.length - 1;

	      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
	        // We expect at least one stack frame to be shared.
	        // Typically this will be the root most one. However, stack frames may be
	        // cut off due to maximum stack limits. In this case, one maybe cut off
	        // earlier than the other. We assume that the sample is longer or the same
	        // and there for cut off earlier. So we should find the root most frame in
	        // the sample somewhere in the control.
	        c--;
	      }

	      for (; s >= 1 && c >= 0; s--, c--) {
	        // Next we find the first one that isn't the same which should be the
	        // frame that called our sample function and the control.
	        if (sampleLines[s] !== controlLines[c]) {
	          // In V8, the first line is describing the message but other VMs don't.
	          // If we're about to return the first line, and the control is also on the same
	          // line, that's a pretty good indicator that our sample threw at same line as
	          // the control. I.e. before we entered the sample frame. So we ignore this result.
	          // This can happen if you passed a class to function component, or non-function.
	          if (s !== 1 || c !== 1) {
	            do {
	              s--;
	              c--; // We may still have similar intermediate frames from the construct call.
	              // The next one that isn't the same should be our match though.

	              if (c < 0 || sampleLines[s] !== controlLines[c]) {
	                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
	                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
	                // but we have a user-provided "displayName"
	                // splice it in to make the stack more readable.


	                if (fn.displayName && _frame.includes('<anonymous>')) {
	                  _frame = _frame.replace('<anonymous>', fn.displayName);
	                }

	                {
	                  if (typeof fn === 'function') {
	                    componentFrameCache.set(fn, _frame);
	                  }
	                } // Return the line we found.


	                return _frame;
	              }
	            } while (s >= 1 && c >= 0);
	          }

	          break;
	        }
	      }
	    }
	  } finally {
	    reentry = false;

	    {
	      ReactCurrentDispatcher.current = previousDispatcher;
	      reenableLogs();
	    }

	    Error.prepareStackTrace = previousPrepareStackTrace;
	  } // Fallback to just using the name if we couldn't make it throw.


	  var name = fn ? fn.displayName || fn.name : '';
	  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

	  {
	    if (typeof fn === 'function') {
	      componentFrameCache.set(fn, syntheticFrame);
	    }
	  }

	  return syntheticFrame;
	}
	function describeFunctionComponentFrame(fn, source, ownerFn) {
	  {
	    return describeNativeComponentFrame(fn, false);
	  }
	}

	function shouldConstruct(Component) {
	  var prototype = Component.prototype;
	  return !!(prototype && prototype.isReactComponent);
	}

	function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

	  if (type == null) {
	    return '';
	  }

	  if (typeof type === 'function') {
	    {
	      return describeNativeComponentFrame(type, shouldConstruct(type));
	    }
	  }

	  if (typeof type === 'string') {
	    return describeBuiltInComponentFrame(type);
	  }

	  switch (type) {
	    case REACT_SUSPENSE_TYPE:
	      return describeBuiltInComponentFrame('Suspense');

	    case REACT_SUSPENSE_LIST_TYPE:
	      return describeBuiltInComponentFrame('SuspenseList');
	  }

	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_FORWARD_REF_TYPE:
	        return describeFunctionComponentFrame(type.render);

	      case REACT_MEMO_TYPE:
	        // Memo may contain any component type so we recursively resolve it.
	        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

	      case REACT_LAZY_TYPE:
	        {
	          var lazyComponent = type;
	          var payload = lazyComponent._payload;
	          var init = lazyComponent._init;

	          try {
	            // Lazy may contain any component type so we recursively resolve it.
	            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
	          } catch (x) {}
	        }
	    }
	  }

	  return '';
	}

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	var loggedTypeFailures = {};
	var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

	function setCurrentlyValidatingElement(element) {
	  {
	    if (element) {
	      var owner = element._owner;
	      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
	      ReactDebugCurrentFrame.setExtraStackFrame(stack);
	    } else {
	      ReactDebugCurrentFrame.setExtraStackFrame(null);
	    }
	  }
	}

	function checkPropTypes(typeSpecs, values, location, componentName, element) {
	  {
	    // $FlowFixMe This is okay but Flow doesn't know it.
	    var has = Function.call.bind(hasOwnProperty);

	    for (var typeSpecName in typeSpecs) {
	      if (has(typeSpecs, typeSpecName)) {
	        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.

	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            // eslint-disable-next-line react-internal/prod-error-codes
	            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
	            err.name = 'Invariant Violation';
	            throw err;
	          }

	          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
	        } catch (ex) {
	          error$1 = ex;
	        }

	        if (error$1 && !(error$1 instanceof Error)) {
	          setCurrentlyValidatingElement(element);

	          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

	          setCurrentlyValidatingElement(null);
	        }

	        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error$1.message] = true;
	          setCurrentlyValidatingElement(element);

	          error('Failed %s type: %s', location, error$1.message);

	          setCurrentlyValidatingElement(null);
	        }
	      }
	    }
	  }
	}

	var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare

	function isArray(a) {
	  return isArrayImpl(a);
	}

	/*
	 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
	 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
	 *
	 * The functions in this module will throw an easier-to-understand,
	 * easier-to-debug exception with a clear errors message message explaining the
	 * problem. (Instead of a confusing exception thrown inside the implementation
	 * of the `value` object).
	 */
	// $FlowFixMe only called in DEV, so void return is not possible.
	function typeName(value) {
	  {
	    // toStringTag is needed for namespaced types like Temporal.Instant
	    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
	    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
	    return type;
	  }
	} // $FlowFixMe only called in DEV, so void return is not possible.


	function willCoercionThrow(value) {
	  {
	    try {
	      testStringCoercion(value);
	      return false;
	    } catch (e) {
	      return true;
	    }
	  }
	}

	function testStringCoercion(value) {
	  // If you ended up here by following an exception call stack, here's what's
	  // happened: you supplied an object or symbol value to React (as a prop, key,
	  // DOM attribute, CSS property, string ref, etc.) and when React tried to
	  // coerce it to a string using `'' + value`, an exception was thrown.
	  //
	  // The most common types that will cause this exception are `Symbol` instances
	  // and Temporal objects like `Temporal.Instant`. But any object that has a
	  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
	  // exception. (Library authors do this to prevent users from using built-in
	  // numeric operators like `+` or comparison operators like `>=` because custom
	  // methods are needed to perform accurate arithmetic or comparison.)
	  //
	  // To fix the problem, coerce this object or symbol value to a string before
	  // passing it to React. The most reliable way is usually `String(value)`.
	  //
	  // To find which value is throwing, check the browser or debugger console.
	  // Before this exception was thrown, there should be `console.error` output
	  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
	  // problem and how that type was used: key, atrribute, input value prop, etc.
	  // In most cases, this console output also shows the component and its
	  // ancestor components where the exception happened.
	  //
	  // eslint-disable-next-line react-internal/safe-string-coercion
	  return '' + value;
	}
	function checkKeyStringCoercion(value) {
	  {
	    if (willCoercionThrow(value)) {
	      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

	      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
	    }
	  }
	}

	var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};
	var specialPropKeyWarningShown;
	var specialPropRefWarningShown;
	var didWarnAboutStringRefs;

	{
	  didWarnAboutStringRefs = {};
	}

	function hasValidRef(config) {
	  {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }

	  return config.ref !== undefined;
	}

	function hasValidKey(config) {
	  {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }

	  return config.key !== undefined;
	}

	function warnIfStringRefCannotBeAutoConverted(config, self) {
	  {
	    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
	      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);

	      if (!didWarnAboutStringRefs[componentName]) {
	        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);

	        didWarnAboutStringRefs[componentName] = true;
	      }
	    }
	  }
	}

	function defineKeyPropWarningGetter(props, displayName) {
	  {
	    var warnAboutAccessingKey = function () {
	      if (!specialPropKeyWarningShown) {
	        specialPropKeyWarningShown = true;

	        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
	      }
	    };

	    warnAboutAccessingKey.isReactWarning = true;
	    Object.defineProperty(props, 'key', {
	      get: warnAboutAccessingKey,
	      configurable: true
	    });
	  }
	}

	function defineRefPropWarningGetter(props, displayName) {
	  {
	    var warnAboutAccessingRef = function () {
	      if (!specialPropRefWarningShown) {
	        specialPropRefWarningShown = true;

	        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
	      }
	    };

	    warnAboutAccessingRef.isReactWarning = true;
	    Object.defineProperty(props, 'ref', {
	      get: warnAboutAccessingRef,
	      configurable: true
	    });
	  }
	}
	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, instanceof check
	 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} props
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} owner
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @internal
	 */


	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allows us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,
	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,
	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.

	    Object.defineProperty(element._store, 'validated', {
	      configurable: false,
	      enumerable: false,
	      writable: true,
	      value: false
	    }); // self and source are DEV only properties.

	    Object.defineProperty(element, '_self', {
	      configurable: false,
	      enumerable: false,
	      writable: false,
	      value: self
	    }); // Two elements created in two different places should be considered
	    // equal for testing purposes and therefore we hide it from enumeration.

	    Object.defineProperty(element, '_source', {
	      configurable: false,
	      enumerable: false,
	      writable: false,
	      value: source
	    });

	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }

	  return element;
	};
	/**
	 * https://github.com/reactjs/rfcs/pull/107
	 * @param {*} type
	 * @param {object} props
	 * @param {string} key
	 */

	function jsxDEV(type, config, maybeKey, source, self) {
	  {
	    var propName; // Reserved names are extracted

	    var props = {};
	    var key = null;
	    var ref = null; // Currently, key can be spread in as a prop. This causes a potential
	    // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
	    // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
	    // but as an intermediary step, we will use jsxDEV for everything except
	    // <div {...props} key="Hi" />, because we aren't currently able to tell if
	    // key is explicitly declared to be undefined or not.

	    if (maybeKey !== undefined) {
	      {
	        checkKeyStringCoercion(maybeKey);
	      }

	      key = '' + maybeKey;
	    }

	    if (hasValidKey(config)) {
	      {
	        checkKeyStringCoercion(config.key);
	      }

	      key = '' + config.key;
	    }

	    if (hasValidRef(config)) {
	      ref = config.ref;
	      warnIfStringRefCannotBeAutoConverted(config, self);
	    } // Remaining properties are added to a new props object


	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    } // Resolve default props


	    if (type && type.defaultProps) {
	      var defaultProps = type.defaultProps;

	      for (propName in defaultProps) {
	        if (props[propName] === undefined) {
	          props[propName] = defaultProps[propName];
	        }
	      }
	    }

	    if (key || ref) {
	      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

	      if (key) {
	        defineKeyPropWarningGetter(props, displayName);
	      }

	      if (ref) {
	        defineRefPropWarningGetter(props, displayName);
	      }
	    }

	    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	  }
	}

	var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
	var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

	function setCurrentlyValidatingElement$1(element) {
	  {
	    if (element) {
	      var owner = element._owner;
	      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
	      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
	    } else {
	      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
	    }
	  }
	}

	var propTypesMisspellWarningShown;

	{
	  propTypesMisspellWarningShown = false;
	}
	/**
	 * Verifies the object is a ReactElement.
	 * See https://reactjs.org/docs/react-api.html#isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a ReactElement.
	 * @final
	 */


	function isValidElement(object) {
	  {
	    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	  }
	}

	function getDeclarationErrorAddendum() {
	  {
	    if (ReactCurrentOwner$1.current) {
	      var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);

	      if (name) {
	        return '\n\nCheck the render method of `' + name + '`.';
	      }
	    }

	    return '';
	  }
	}

	function getSourceInfoErrorAddendum(source) {
	  {
	    if (source !== undefined) {
	      var fileName = source.fileName.replace(/^.*[\\\/]/, '');
	      var lineNumber = source.lineNumber;
	      return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
	    }

	    return '';
	  }
	}
	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */


	var ownerHasKeyUseWarning = {};

	function getCurrentComponentErrorInfo(parentType) {
	  {
	    var info = getDeclarationErrorAddendum();

	    if (!info) {
	      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

	      if (parentName) {
	        info = "\n\nCheck the top-level render call using <" + parentName + ">.";
	      }
	    }

	    return info;
	  }
	}
	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */


	function validateExplicitKey(element, parentType) {
	  {
	    if (!element._store || element._store.validated || element.key != null) {
	      return;
	    }

	    element._store.validated = true;
	    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

	    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
	      return;
	    }

	    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
	    // property, it may be the creator of the child that's responsible for
	    // assigning it a key.

	    var childOwner = '';

	    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
	      // Give the component that originally created this child.
	      childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
	    }

	    setCurrentlyValidatingElement$1(element);

	    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);

	    setCurrentlyValidatingElement$1(null);
	  }
	}
	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */


	function validateChildKeys(node, parentType) {
	  {
	    if (typeof node !== 'object') {
	      return;
	    }

	    if (isArray(node)) {
	      for (var i = 0; i < node.length; i++) {
	        var child = node[i];

	        if (isValidElement(child)) {
	          validateExplicitKey(child, parentType);
	        }
	      }
	    } else if (isValidElement(node)) {
	      // This element was passed in a valid location.
	      if (node._store) {
	        node._store.validated = true;
	      }
	    } else if (node) {
	      var iteratorFn = getIteratorFn(node);

	      if (typeof iteratorFn === 'function') {
	        // Entry iterators used to provide implicit keys,
	        // but now we print a separate warning for them later.
	        if (iteratorFn !== node.entries) {
	          var iterator = iteratorFn.call(node);
	          var step;

	          while (!(step = iterator.next()).done) {
	            if (isValidElement(step.value)) {
	              validateExplicitKey(step.value, parentType);
	            }
	          }
	        }
	      }
	    }
	  }
	}
	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */


	function validatePropTypes(element) {
	  {
	    var type = element.type;

	    if (type === null || type === undefined || typeof type === 'string') {
	      return;
	    }

	    var propTypes;

	    if (typeof type === 'function') {
	      propTypes = type.propTypes;
	    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
	    // Inner props are checked in the reconciler.
	    type.$$typeof === REACT_MEMO_TYPE)) {
	      propTypes = type.propTypes;
	    } else {
	      return;
	    }

	    if (propTypes) {
	      // Intentionally inside to avoid triggering lazy initializers:
	      var name = getComponentNameFromType(type);
	      checkPropTypes(propTypes, element.props, 'prop', name, element);
	    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
	      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

	      var _name = getComponentNameFromType(type);

	      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
	    }

	    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
	      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
	    }
	  }
	}
	/**
	 * Given a fragment, validate that it can only be provided with fragment props
	 * @param {ReactElement} fragment
	 */


	function validateFragmentProps(fragment) {
	  {
	    var keys = Object.keys(fragment.props);

	    for (var i = 0; i < keys.length; i++) {
	      var key = keys[i];

	      if (key !== 'children' && key !== 'key') {
	        setCurrentlyValidatingElement$1(fragment);

	        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

	        setCurrentlyValidatingElement$1(null);
	        break;
	      }
	    }

	    if (fragment.ref !== null) {
	      setCurrentlyValidatingElement$1(fragment);

	      error('Invalid attribute `ref` supplied to `React.Fragment`.');

	      setCurrentlyValidatingElement$1(null);
	    }
	  }
	}

	function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
	  {
	    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.

	    if (!validType) {
	      var info = '';

	      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	        info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
	      }

	      var sourceInfo = getSourceInfoErrorAddendum(source);

	      if (sourceInfo) {
	        info += sourceInfo;
	      } else {
	        info += getDeclarationErrorAddendum();
	      }

	      var typeString;

	      if (type === null) {
	        typeString = 'null';
	      } else if (isArray(type)) {
	        typeString = 'array';
	      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
	        typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
	        info = ' Did you accidentally export a JSX literal instead of a component?';
	      } else {
	        typeString = typeof type;
	      }

	      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
	    }

	    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.

	    if (element == null) {
	      return element;
	    } // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)


	    if (validType) {
	      var children = props.children;

	      if (children !== undefined) {
	        if (isStaticChildren) {
	          if (isArray(children)) {
	            for (var i = 0; i < children.length; i++) {
	              validateChildKeys(children[i], type);
	            }

	            if (Object.freeze) {
	              Object.freeze(children);
	            }
	          } else {
	            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');
	          }
	        } else {
	          validateChildKeys(children, type);
	        }
	      }
	    }

	    if (type === REACT_FRAGMENT_TYPE) {
	      validateFragmentProps(element);
	    } else {
	      validatePropTypes(element);
	    }

	    return element;
	  }
	} // These two functions exist to still get child warnings in dev
	// even with the prod transform. This means that jsxDEV is purely
	// opt-in behavior for better messages but that we won't stop
	// giving you warnings if you use production apis.

	function jsxWithValidationStatic(type, props, key) {
	  {
	    return jsxWithValidation(type, props, key, true);
	  }
	}
	function jsxWithValidationDynamic(type, props, key) {
	  {
	    return jsxWithValidation(type, props, key, false);
	  }
	}

	var jsx =  jsxWithValidationDynamic ; // we may want to special case jsxs internally to take advantage of static children.
	// for now we can ship identical prod functions

	var jsxs =  jsxWithValidationStatic ;

	reactJsxRuntime_development.Fragment = REACT_FRAGMENT_TYPE;
	reactJsxRuntime_development.jsx = jsx;
	reactJsxRuntime_development.jsxs = jsxs;
	  })();
	}
	return reactJsxRuntime_development;
}

if (process.env.NODE_ENV === 'production') {
  jsxRuntime.exports = requireReactJsxRuntime_production_min();
} else {
  jsxRuntime.exports = requireReactJsxRuntime_development();
}

var jsxRuntimeExports = jsxRuntime.exports;

const Fragment = jsxRuntimeExports.Fragment;
const jsx = jsxRuntimeExports.jsx;
const jsxs = jsxRuntimeExports.jsxs;

const sdl$2c = { "metadata": { "version": "1.0.0", "id": "icon-1.0.0", "name": "JDSIcon", "layerName": "jds_icon" }, "hierarchy": { "container": ["icon", "lottie"] }, "base": { "container": { "background-color": "{icon_0}", "border-radius": "{icon_1}", "size": "{icon_2}", "justify-content": "{icon_3}", "align-items": "{icon_4}" }, "icon": { "size": "{icon_5}", "color": "{icon_6}" }, "lottie": { "hidden": true, "size": "{icon_5}", "repeat": true } }, "variant": { "kind": { "background": {}, "background_bold": {}, "inverse": {} }, "color": { "primary_50": { "icon": { "color": "{icon_7}" } }, "primary_30": { "icon": { "color": "{icon_8}" } }, "primary_60": { "icon": { "color": "{icon_9}" } }, "primary_70": { "icon": { "color": "{icon_10}" } }, "primary_background": { "icon": { "color": "{icon_11}" } }, "secondary_50": { "icon": { "color": "{icon_12}" } }, "sparkle_50": { "icon": { "color": "{icon_13}" } }, "primary_grey_60": { "icon": { "color": "{icon_14}" } }, "primary_grey_80": { "icon": { "color": "{icon_15}" } }, "primary_grey_100": { "icon": { "color": "{icon_16}" } }, "feedback_success": { "icon": { "color": "{icon_17}", "value": "ic_success_colored" } }, "feedback_error": { "icon": { "color": "{icon_18}", "value": "ic_error_colored" } }, "feedback_warning": { "icon": { "color": "{icon_19}", "value": "ic_warning_colored" } }, "feedback_success_50": { "icon": { "color": "{icon_17}" } }, "feedback_error_50": { "icon": { "color": "{icon_18}" } }, "feedback_warning_50": { "icon": { "color": "{icon_19}" } }, "white": { "icon": { "color": "{icon_20}" } }, "none": { "icon": { "color": "" } } }, "size": { "small": { "container": { "size": "{icon_21}" }, "icon": { "size": "{icon_22}" }, "lottie": { "size": "{icon_22}" } }, "large": { "container": { "size": "{icon_23}" }, "icon": { "size": "{icon_24}" }, "lottie": { "size": "{icon_24}" } }, "xtra-large": { "container": { "size": "{icon_25}" }, "icon": { "size": "{icon_26}" }, "lottie": { "size": "{icon_26}" } }, "xtra-xtra-large": { "container": { "size": "{icon_27}" }, "icon": { "size": "{icon_28}" }, "lottie": { "size": "{icon_28}" } } }, "_isLottieVisible": { "true": { "lottie": { "hidden": false }, "icon": { "hidden": true } } } }, "combination": [{ "background": { "primary_50": { "container": { "background-color": "{icon_31}" } }, "primary_30": { "container": { "background-color": "{icon_32}" } }, "primary_60": { "container": { "background-color": "{icon_33}" } }, "primary_70": { "container": { "background-color": "{icon_34}" } }, "primary_background": { "container": { "background-color": "{icon_35}" } }, "secondary_50": { "container": { "background-color": "{icon_36}" } }, "sparkle_50": { "container": { "background-color": "{icon_37}" } }, "primary_grey_60": { "container": { "background-color": "{icon_38}" } }, "primary_grey_80": { "container": { "background-color": "{icon_39}" } }, "primary_grey_100": { "container": { "background-color": "{icon_40}" } }, "white": { "container": { "background-color": "{icon_41}" } }, "feedback_success_50": { "container": { "background-color": "{icon_42}" } }, "feedback_error_50": { "container": { "background-color": "{icon_43}" } }, "feedback_warning_50": { "container": { "background-color": "{icon_44}" } } }, "background_bold": { "primary_50": { "container": { "background-color": "{icon_45}" }, "icon": { "color": "{icon_46}" } }, "primary_30": { "container": { "background-color": "{icon_47}" }, "icon": { "color": "{icon_48}" } }, "primary_60": { "container": { "background-color": "{icon_49}" }, "icon": { "color": "{icon_50}" } }, "primary_70": { "container": { "background-color": "{icon_51}" }, "icon": { "color": "{icon_52}" } }, "primary_background": { "container": { "background-color": "{icon_53}" }, "icon": { "color": "{icon_54}" } }, "secondary_50": { "container": { "background-color": "{icon_55}" }, "icon": { "color": "{icon_56}" } }, "sparkle_50": { "container": { "background-color": "{icon_57}" }, "icon": { "color": "{icon_58}" } }, "primary_grey_60": { "container": { "background-color": "{icon_59}" }, "icon": { "color": "{icon_60}" } }, "primary_grey_80": { "container": { "background-color": "{icon_61}" }, "icon": { "color": "{icon_62}" } }, "primary_grey_100": { "container": { "background-color": "{icon_63}" }, "icon": { "color": "{icon_64}" } }, "white": { "container": { "background-color": "{icon_65}" }, "icon": { "color": "{icon_66}" } }, "feedback_success_50": { "container": { "background-color": "{icon_67}" }, "icon": { "color": "{icon_68}" } }, "feedback_error_50": { "container": { "background-color": "{icon_69}" }, "icon": { "color": "{icon_70}" } }, "feedback_warning_50": { "container": { "background-color": "{icon_71}" }, "icon": { "color": "{icon_72}" } } }, "inverse": { "primary_50": { "icon": { "color": "{icon_170}" } }, "primary_30": { "icon": { "color": "{icon_170}" } }, "primary_60": { "icon": { "color": "{icon_170}" } }, "primary_70": { "icon": { "color": "{icon_170}" } }, "primary_background": { "icon": { "color": "{icon_170}" } }, "secondary_50": { "icon": { "color": "{icon_171}" } }, "sparkle_50": { "icon": { "color": "{icon_172}" } }, "primary_grey_60": { "icon": { "color": "{icon_170}" } }, "primary_grey_80": { "icon": { "color": "{icon_170}" } }, "primary_grey_100": { "icon": { "color": "{icon_170}" } }, "feedback_success_50": { "icon": { "color": "{icon_173}" } }, "feedback_error_50": { "icon": { "color": "{icon_173}" } }, "feedback_warning_50": { "icon": { "color": "{icon_173}" } } } }, { "medium": { "background": { "container": { "size": "{icon_73}" }, "icon": { "size": "{icon_74}" }, "lottie": { "size": "{icon_74}" } }, "background_bold": { "container": { "size": "{icon_112}" }, "icon": { "size": "{icon_113}" }, "lottie": { "size": "{icon_113}" } } }, "small": { "background": { "container": { "size": "{icon_75}", "background-color": "{icon_76}" }, "icon": { "size": "{icon_77}" }, "lottie": { "size": "{icon_77}" } }, "background_bold": { "container": { "size": "{icon_114}" }, "icon": { "size": "{icon_115}" }, "lottie": { "size": "{icon_115}" } } }, "large": { "background": { "container": { "size": "{icon_78}" }, "icon": { "size": "{icon_79}" }, "lottie": { "size": "{icon_79}" } }, "background_bold": { "container": { "size": "{icon_116}" }, "icon": { "size": "{icon_117}" }, "lottie": { "size": "{icon_117}" } } }, "xtra-large": { "background": { "container": { "size": "{icon_80}" }, "icon": { "size": "{icon_81}" }, "lottie": { "size": "{icon_81}" } }, "background_bold": { "container": { "size": "{icon_118}" }, "icon": { "size": "{icon_119}" }, "lottie": { "size": "{icon_119}" } } }, "xtra-xtra-large": { "background": { "container": { "size": "{icon_82}" }, "icon": { "size": "{icon_83}" }, "lottie": { "size": "{icon_83}" } }, "background_bold": { "container": { "size": "{icon_120}" }, "icon": { "size": "{icon_121}" }, "lottie": { "size": "{icon_121}" } } } }, { "small": { "background_bold": { "primary_50": { "container": { "background-color": "{icon_84}" }, "icon": { "color": "{icon_85}" } }, "primary_30": { "container": { "background-color": "{icon_86}" }, "icon": { "color": "{icon_87}" } }, "primary_60": { "container": { "background-color": "{icon_88}" }, "icon": { "color": "{icon_89}" } }, "primary_70": { "container": { "background-color": "{icon_90}" }, "icon": { "color": "{icon_91}" } }, "primary_background": { "container": { "background-color": "{icon_92}" }, "icon": { "color": "{icon_93}" } }, "secondary_50": { "container": { "background-color": "{icon_94}" }, "icon": { "color": "{icon_95}" } }, "sparkle_50": { "container": { "background-color": "{icon_96}" }, "icon": { "color": "{icon_97}" } }, "primary_grey_60": { "container": { "background-color": "{icon_98}" }, "icon": { "color": "{icon_99}" } }, "primary_grey_80": { "container": { "background-color": "{icon_100}" }, "icon": { "color": "{icon_101}" } }, "primary_grey_100": { "container": { "background-color": "{icon_102}" }, "icon": { "color": "{icon_103}" } }, "white": { "container": { "background-color": "{icon_104}" }, "icon": { "color": "{icon_105}" } }, "feedback_success_50": { "container": { "background-color": "{icon_106}" }, "icon": { "color": "{icon_107}" } }, "feedback_error_50": { "container": { "background-color": "{icon_108}" }, "icon": { "color": "{icon_109}" } }, "feedback_warning_50": { "container": { "background-color": "{icon_110}" }, "icon": { "color": "{icon_111}" } } } }, "medium": { "background": { "feedback_success": { "container": { "size": "{icon_122}" }, "icon": { "size": "{icon_125}" }, "lottie": { "size": "{icon_125}" } }, "feedback_error": { "container": { "size": "{icon_123}" }, "icon": { "size": "{icon_126}" }, "lottie": { "size": "{icon_126}" } }, "feedback_warning": { "container": { "size": "{icon_124}" }, "icon": { "size": "{icon_127}" }, "lottie": { "size": "{icon_127}" } } }, "background_bold": { "feedback_success": { "container": { "size": "{icon_128}" }, "icon": { "size": "{icon_131}" }, "lottie": { "size": "{icon_131}" } }, "feedback_error": { "container": { "size": "{icon_129}" }, "icon": { "size": "{icon_132}" }, "lottie": { "size": "{icon_132}" } }, "feedback_warning": { "container": { "size": "{icon_130}" }, "icon": { "size": "{icon_133}" }, "lottie": { "size": "{icon_133}" } } } }, "large": { "background": { "feedback_success": { "container": { "size": "{icon_135}" }, "icon": { "size": "{icon_137}" }, "lottie": { "size": "{icon_137}" } }, "feedback_error": { "container": { "size": "{icon_136}" }, "icon": { "size": "{icon_138}" }, "lottie": { "size": "{icon_138}" } }, "feedback_warning": { "container": { "size": "{icon_136}" }, "icon": { "size": "{icon_139}" }, "lottie": { "size": "{icon_139}" } } }, "background_bold": { "feedback_success": { "container": { "size": "{icon_140}" }, "icon": { "size": "{icon_143}" }, "lottie": { "size": "{icon_143}" } }, "feedback_error": { "container": { "size": "{icon_141}" }, "icon": { "size": "{icon_144}" }, "lottie": { "size": "{icon_144}" } }, "feedback_warning": { "container": { "size": "{icon_142}" }, "icon": { "size": "{icon_145}" }, "lottie": { "size": "{icon_145}" } } } }, "xtra-large": { "background": { "feedback_success": { "container": { "size": "{icon_146}" }, "icon": { "size": "{icon_149}" }, "lottie": { "size": "{icon_149}" } }, "feedback_error": { "container": { "size": "{icon_147}" }, "icon": { "size": "{icon_150}" }, "lottie": { "size": "{icon_150}" } }, "feedback_warning": { "container": { "size": "{icon_148}" }, "icon": { "size": "{icon_151}" }, "lottie": { "size": "{icon_151}" } } }, "background_bold": { "feedback_success": { "container": { "size": "{icon_152}" }, "icon": { "size": "{icon_155}" }, "lottie": { "size": "{icon_155}" } }, "feedback_error": { "container": { "size": "{icon_153}" }, "icon": { "size": "{icon_156}" }, "lottie": { "size": "{icon_156}" } }, "feedback_warning": { "container": { "size": "{icon_154}" }, "icon": { "size": "{icon_157}" }, "lottie": { "size": "{icon_157}" } } } }, "xtra-xtra-large": { "background": { "feedback_success": { "container": { "size": "{icon_158}" }, "icon": { "size": "{icon_161}" }, "lottie": { "size": "{icon_161}" } }, "feedback_error": { "container": { "size": "{icon_159}" }, "icon": { "size": "{icon_162}" }, "lottie": { "size": "{icon_162}" } }, "feedback_warning": { "container": { "size": "{icon_160}" }, "icon": { "size": "{icon_163}" }, "lottie": { "size": "{icon_163}" } } }, "background_bold": { "feedback_success": { "container": { "size": "{icon_164}" }, "icon": { "size": "{icon_167}" }, "lottie": { "size": "{icon_167}" } }, "feedback_error": { "container": { "size": "{icon_165}" }, "icon": { "size": "{icon_168}" }, "lottie": { "size": "{icon_168}" } }, "feedback_warning": { "container": { "size": "{icon_166}" }, "icon": { "size": "{icon_169}" }, "lottie": { "size": "{icon_169}" } } } } }], "combination_config": [["kind", "color"], ["size", "kind"], ["size", "kind", "color"]], "api": { "config": { "size": { "values": ["medium", "small", "large", "xtra-large", "xtra-xtra-large"], "doc_description": "It can be used to control size of icon. Please note that the actual size of the icon inside will vary based on the `kind` selected." }, "color": { "values": ["primary_50", "primary_30", "primary_60", "primary_70", "primary_background", "secondary_50", "sparkle_50", "primary_grey_60", "primary_grey_80", "primary_grey_100", "feedback_success", "feedback_error", "feedback_warning", "feedback_success_50", "feedback_error_50", "feedback_warning_50", "white", "none"] }, "kind": { "values": ["default", "background", "background_bold", "inverse"], "doc_description": "It can be used to switch between 3 variants of Icon. 'background-bold' sets color prop as bg, Icon color is inverse of that." }, "_isLottieVisible": { "values": [false, true] } }, "data": { "container": { "size": { "type": "size", "name": "customSize", "function": true } }, "icon": { "value": { "type": "icon", "name": "ic", "function": true, "doc_description": "It can take the icon user want to pass or the name of icon. e.g. `ic={<IcFavorite/>}` or `ic='IcFavorite'`. User can also pass a any custom icon he may have stored locally." }, "semantics": { "type": "string", "name": "semantics", "required": false }, "size": { "type": "size", "name": "_size", "function": true } }, "lottie": { "value": { "type": "icon", "name": "ic", "function": true, "doc_description": "It can take the icon user want to pass or the name of icon. e.g. `ic={<IcFavorite/>}` or `ic='IcFavorite'`. User can also pass a any custom icon he may have stored locally." }, "attributes": { "type": "object", "name": "lottieAttributes", "platform": "android, ios", "required": false, "object": { "repeatCount": "number", "maxRetryCount": "number", "speed": "float", "isPlaying": "boolean", "reverseOnRepeat": "boolean", "clipSpec": "LottieClipSpec" } } } }, "events": { "container": { "onClick": "onClick" } }, "a11y": { "icon": { "properties": { "role": { "value": "img" }, "aria-label": { "name": "ariaLabel", "function": true } } } } } };

const sdl$2b = { "metadata": { "version": "1.0.0", "id": "accordion-1.0.0", "name": "JDSAccordion", "layerName": "jds_accordion", "description": "An accordion is a list of headers that hide or reveal additional content when expanded.", "usage": "Accordion is used when users only need a few specific pieces of content within a page." }, "hierarchy": { "container": [{ "accordion-header-container": ["prefix-slot", { "text-container": ["title-jds-text", "subtitle-jds-text"] }, "jds_button"] }, { "children-container": [{ "child-content-container": ["content-slot"] }] }, "jds_divider"] }, "base": { "container": { "flex-direction": "{a_0}", "opacity": "{a_15}", "width": "{a_1}" }, "accordion-header-container": { "flex-direction": "{a_2}", "align-items": "{a_3}", "justify-content": "{a_4}", "width": "{a_5}", "padding-top": "{a_6}", "gap": "{a_7}" }, "text-container": { "flex-direction": "{a_8}", "justify-content": "{a_9}", "align-items": "{a_10}", "gap": "{a_11}", "flex": 1 }, "jds_button": { "icon": "ic_add", "kind": "tertiary", "size": "medium", "state": "normal" }, "children-container": { "hidden": true, "padding-top": "{a_12}", "width": "{a_13}", "enter-animation-name": "slideVerticallyDown", "exit-animation-name": "slideVerticallyUp", "enter-animation-curve": "entrance_ease", "exit-animation-curve": "exit_ease", "enter-animation-duration": 500, "exit-animation-duration": 500, "overflow": "hidden", "transition": { "property": ["max-height", "padding-top"], "duration": "{medium}", "timing-function": "{easeExit}" } }, "child-content-container": { "width": "{a_14}" }, "jds_divider": { "orientation": "horizontal", "pad": "xtra-xtra-small", "padPosition": "top" }, "title-jds-text": { "font-family": "{listTitle}", "color": "{primaryGrey100}", "font-size": "{listTitle}", "line-height": "{listTitle}", "letter-spacing": "{listTitle}", "font-weight": "{listTitle}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" }, "subtitle-jds-text": { "font-family": "{bodyXs}", "color": "{primaryGrey80}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" } }, "variant": { "disabled": { "true": { "container": { "disabled": true, "opacity": "{a_17}" }, "accordion-header-container": { "disabled": true }, "jds_button": { "disabled": true } } }, "expandedPanel": { "true": { "children-container": { "hidden": false, "padding-top": "{a_16}", "transition": { "timing-function": "{easeEntrance}" } } } }, "showDivider": { "false": { "jds_divider": { "hidden": true } } } }, "combination": [{ "plus": { "true": { "jds_button": { "icon": "{a_18}" } }, "false": { "jds_button": { "icon": "{a_19}" } } }, "chevron": { "true": { "jds_button": { "icon": "{a_20}" } }, "false": { "jds_button": { "icon": "{a_21}" } } } }], "combination_config": [["iconType", "expandedPanel"]], "api": { "children": { "content-slot": { "name": "children", "accepts": ["any"], "max": 1, "doc_description": "It can be used to display content as children of Accordion." }, "prefix-slot": { "name": "prefix", "accepts": ["jds_avatar", "jds_icon"], "max": 1, "doc_description": "It can be used to display `avatar` or `icon` to the left of text." } }, "config": { "expandedPanel": { "values": [false, true], "doc-description": "If false/undefined, only allows one accordionPanel to be expanded by collapsing others on each click." }, "disabled": { "values": [false, true], "doc_description": "It can be used to enable or disable Accordion." }, "showDivider": { "values": [true, false] }, "iconType": { "values": ["chevron", "plus"], "doc_description": "The icon to be displayed. The plus icon changes to a minus icon when the corresponding panel is expanded." } }, "data": { "children-container": { "max-height": { "name": "_childrenHeight", "type": "size" } }, "title-jds-text": { "value": { "name": "title", "type": "string", "doc_description": "This displays the title of Accordion." } }, "subtitle-jds-text": { "value": { "name": "subtitle", "type": "string", "doc_description": "This displays the subtitle of Accordion." } } }, "events": { "accordion-header-container": { "onClick": "onClick" }, "jds_button": { "onClick": "onClick" } }, "a11y": { "accordion-header-container": { "properties": { "role": { "value": "button" }, "aria-expanded": { "name": "_ariaExpanded", "prop": "expandedPanel" }, "aria-controls": { "name": "_ariaControls" }, "aria-label": { "name": "ariaLabel", "prop": "title" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" } } } } } };

function getDisplayName(WrappedComponent) {
  return WrappedComponent.displayName || WrappedComponent.name || "Component";
}
const modifyProps = (props, map) => {
  if (!props)
    return {};
  if (!map)
    return props;
  let finalProps = {
    ...props
  };
  const modifedProps = map(props);
  Object.entries(modifedProps).forEach(([key, obj]) => {
    const { properties, variations, defaultValue } = obj;
    const currentValue = props[key];
    if (typeof currentValue !== "undefined") {
      if (Object.keys(properties || {}).length) {
        finalProps = {
          ...finalProps,
          ...properties
        };
      }
      if (variations?.[currentValue]) {
        finalProps = {
          ...finalProps,
          ...variations?.[currentValue]
        };
      }
    } else {
      if (defaultValue) {
        finalProps = {
          ...finalProps,
          ...variations?.[defaultValue]
        };
      }
    }
  });
  return finalProps;
};
const withModifiedProps = (Component, map) => (props) => {
  if (!map)
    return /* @__PURE__ */ jsx(Component, { ...props });
  Component.displayName = getDisplayName(Component);
  const finalProps = modifyProps(props, map);
  return /* @__PURE__ */ jsx(Component, { ...props, ...finalProps });
};

const get = (obj, path, defValue) => {
  if (!path)
    return void 0;
  const pathArray = Array.isArray(path) ? path : path.match(/([^[.\]])+/g);
  const result = pathArray?.reduce(
    (prevObj, key) => prevObj && prevObj[key],
    obj
  );
  return result === void 0 ? defValue : result;
};
const debounce = (fn, wait, immediate = false) => {
  let timeoutId;
  return function(...args) {
    const later = () => {
      timeoutId = null;
      if (!immediate)
        fn.apply(this, args);
    };
    const callNow = immediate && !timeoutId;
    timeoutId !== null && clearTimeout(timeoutId);
    timeoutId = setTimeout(later, wait);
    if (callNow)
      fn.apply(this, args);
  };
};

const convertTextToComponent = (children) => {
  if (typeof children === "string" && children.length) {
    return /* @__PURE__ */ jsx(Text, { text: children });
  }
  return children || null;
};
const resolvePropObjectKeys = (prop, objPath, defValue) => {
  if (!prop) {
    return void 0;
  }
  if (typeof prop === "string") {
    return prop;
  }
  return get(prop, objPath, defValue);
};

const useRootRef = (cb, deps = []) => {
  const [element, setElement] = useState(null);
  const rootRef = useCallback(
    (element2) => {
      setElement(element2);
      cb?.(element2);
    },
    [...deps]
  );
  return { element, rootRef };
};

const PROP_MAP$v = (props) => {
  return {
    header: {
      properties: {
        title: props.title || props.header?.title || props.header?.titleBlock?.text || props.header,
        subtitle: props.subtitle || props.header?.titleBlock?.helper,
        prefix: props.prefix || props.header?.prefix
      }
    },
    children: {
      properties: {
        children: convertTextToComponent(props.children)
      }
    }
  };
};
const withLogic$2f = (Component) => (userProps) => {
  const props = modifyProps(userProps, PROP_MAP$v);
  const { element, rootRef } = useRootRef();
  const childContainer = element?.querySelector(
    'div[data-testid="JDSAccordion-child-content-container"]'
  );
  const [childrenHeight, setChildrenHeight] = useState(0);
  useEffect(() => {
    if (!childContainer || !props.expandedPanel)
      return;
    const updateHeight = () => {
      requestAnimationFrame(() => {
        setChildrenHeight(childContainer.offsetHeight + 16);
      });
    };
    updateHeight();
    const resizeObserver = new ResizeObserver(updateHeight);
    resizeObserver.observe(childContainer);
    return () => {
      resizeObserver.disconnect();
    };
  }, [childContainer, props.expandedPanel, props.children]);
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        rootRef,
        _ariaControls: "children-container",
        _childrenHeight: props.expandedPanel ? childrenHeight : 0
      }
    }
  );
};

const Component$2g = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$2b;
  const { expandedPanel = false, disabled = false, showDivider = true, iconType = "chevron", onClick = noop, ariaLabel = props.title?.toString(), _ariaExpanded = props.expandedPanel?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ expandedPanel, disabled, showDivider, iconType, onClick, ariaLabel, _ariaExpanded, ...rest }, componentTag },
    "JDSAccordion",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const AccordionPanel = withLogic$2f(Component$2g);
AccordionPanel.displayName = "AccordionPanel";
AccordionPanel.slotName = "jds_accordion";

const sdl$2a = { "metadata": { "version": "1.0.0", "id": "action-button-1.0.0", "name": "JDSActionButton", "layerName": "jds_action_button" }, "hierarchy": { "container": [{ "inner-container": ["left-icon", "jds-text", "right-icon"] }, "loader"] }, "base": { "container": { "background-color": "{a_0}", "opacity": "{a_1}", "flex-direction": "{a_2}", "align-items": "{a_3}", "justify-content": "{a_4}", "border-radius": "{a_5}" }, "inner-container": { "opacity": "{a_64}", "border-width": "{a_24}", "background-color": "{a_6}", "flex-direction": "{a_7}", "align-items": "{a_8}", "justify-content": "{a_9}", "border-radius": "{a_10}", "padding-top": "{a_11}", "padding-right": "{a_12}", "padding-bottom": "{a_13}", "padding-left": "{a_14}", "gap": "{a_15}", "transition": { "property": ["background-color", "border-width", "border-color"], "duration": "{rapid}", "timing-function": "{easeQuick}" }, "behavior": { "hover": { "background-color": "{a_16}" }, "active": { "background-color": "{a_17}" }, "focus": { "border-width": "{a_18}", "border-color": "{a_19}" } } }, "loader": { "hidden": true, "color": "{a_20}", "background-color": "{a_21}", "track-color": "{a_22}", "border-width": "{a_23}", "opacity": "{a_25}", "size": "{a_26}", "z-index": 1 }, "left-icon": { "size": "{a_27}", "color": "{a_28}", "hidden": false, "transition": { "property": ["color"], "duration": "{rapid}", "timing-function": "{easeQuick}" }, "behavior": { "hover": { "color": "{a_29}" }, "active": { "color": "{a_30}" } } }, "right-icon": { "size": "{a_31}", "color": "{a_32}", "hidden": true, "transition": { "property": ["color"], "duration": "{rapid}", "timing-function": "{easeQuick}" }, "behavior": { "hover": { "color": "{a_33}" }, "active": { "color": "{a_34}" } } }, "jds-text": { "font-family": "{bodySBold}", "color": "{primaryInverse}", "font-size": "{bodySBold}", "line-height": "{bodySBold}", "letter-spacing": "{bodySBold}", "font-weight": "{bodySBold}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "max-lines": 2, "maxLines": 2, "hidden": false, "transition": { "property": ["color"], "duration": "{rapid}", "timing-function": "{easeQuick}" }, "behavior": { "hover": { "color": "{primary70}", "transition": { "property": ["color"], "duration": "{rapid}", "timing-function": "{easeQuick}" } }, "active": { "transition": { "property": ["color"], "duration": "{rapid}", "timing-function": "{easeQuick}" } } } } }, "variant": { "size": { "small": { "inner-container": { "padding-top": "{a_35}", "padding-right": "{a_36}", "padding-bottom": "{a_37}", "padding-left": "{a_38}", "gap": "{a_39}" }, "left-icon": { "size": "{a_40}" }, "right-icon": { "size": "{a_41}" }, "loader": { "size": "{a_42}" } }, "large": { "inner-container": { "padding-top": "{a_43}", "padding-left": "{a_44}", "padding-bottom": "{a_45}", "padding-right": "{a_46}", "gap": "{a_47}" }, "left-icon": { "size": "{a_48}" }, "right-icon": { "size": "{a_49}" }, "loader": { "size": "{a_50}" }, "jds-text": { "font-family": "{bodyMBold}", "font-size": "{bodyMBold}", "line-height": "{bodyMBold}", "letter-spacing": "{bodyMBold}", "font-weight": "{bodyMBold}" } }, "extra-large": { "inner-container": { "padding-top": "{a_51}", "padding-right": "{a_52}", "padding-bottom": "{a_53}", "padding-left": "{a_54}", "gap": "{a_55}" }, "left-icon": { "size": "{a_56}" }, "right-icon": { "size": "{a_57}" }, "loader": { "size": "{a_58}" }, "jds-text": { "font-family": "{bodyLBold}", "font-size": "{bodyLBold}", "line-height": "{bodyLBold}", "letter-spacing": "{bodyLBold}", "font-weight": "{bodyLBold}" } } }, "iconPosition": { "right": { "left-icon": { "hidden": true }, "right-icon": { "hidden": false } } }, "state": { "loading": { "inner-container": { "disabled": true, "opacity": "{a_59}" }, "left-icon": { "opacity": "{a_60}" }, "right-icon": { "opacity": "{a_61}" }, "loader": { "hidden": false }, "jds-text": { "opacity": "{a_62}" } }, "disabled": { "inner-container": { "opacity": "{a_63}", "disabled": true } } }, "_hasIcon": { "false": { "left-icon": { "hidden": true }, "right-icon": { "hidden": true } } } }, "combination": [{ "normal": { "secondary": { "inner-container": { "background-color": "{a_65}", "border-width": "{a_66}", "border-color": "{a_67}", "behavior": { "hover": { "background-color": "{a_68}" }, "active": { "background-color": "{a_69}" }, "focus": { "border-width": "{a_70}", "border-color": "{a_71}" } } }, "left-icon": { "color": "{a_72}", "behavior": { "hover": { "color": "{a_73}" }, "active": { "color": "{a_74}" } } }, "right-icon": { "color": "{a_75}", "behavior": { "hover": { "color": "{a_76}" }, "active": { "color": "{a_77}" } } }, "jds-text": { "color": "{primary60}", "behavior": { "hover": {}, "active": { "color": "{primary70}" } } } }, "tertiary": { "inner-container": { "padding-left": "{a_78}", "padding-right": "{a_79}", "background-color": "{a_82}", "behavior": { "hover": { "background-color": "{a_83}" }, "active": { "background-color": "{a_84}" }, "focus": { "border-width": "{a_85}", "border-radius": "{a_86}", "border-color": "{a_87}" } } }, "left-icon": { "color": "{a_88}", "behavior": { "hover": { "color": "{a_89}" }, "active": { "color": "{a_90}" } } }, "right-icon": { "color": "{a_91}", "behavior": { "hover": { "color": "{a_92}" }, "active": { "color": "{a_93}" } } }, "jds-text": { "color": "{primary60}", "behavior": { "hover": { "color": "{primary50}" }, "active": { "color": "{primary70}" } } } } }, "positive": { "primary": { "inner-container": { "background-color": "{a_94}", "behavior": { "hover": { "background-color": "{a_95}" }, "active": { "background-color": "{a_96}" }, "focus": { "border-color": "{a_97}" } } }, "left-icon": { "color": "{a_98}", "behavior": { "hover": { "color": "{a_99}" }, "active": { "color": "{a_100}" } } }, "right-icon": { "color": "{a_101}", "behavior": { "hover": { "color": "{a_102}" }, "active": { "color": "{a_103}" } } }, "jds-text": { "color": "{global.white}", "behavior": { "hover": { "color": "{feedbackSuccess80}" }, "active": { "color": "{primaryBackground}" } } } }, "secondary": { "inner-container": { "background-color": "{a_104}", "border-width": "{a_105}", "border-color": "{a_106}", "behavior": { "hover": { "background-color": "{a_107}" }, "active": { "background-color": "{a_108}" }, "focus": { "border-color": "{a_109}" } } }, "left-icon": { "color": "{a_110}", "behavior": { "hover": { "color": "{a_111}" }, "active": { "color": "{a_112}" } } }, "right-icon": { "color": "{a_113}", "behavior": { "hover": { "color": "{a_114}" }, "active": { "color": "{a_115}" } } }, "jds-text": { "color": "{feedbackSuccess80}", "behavior": { "hover": {}, "active": { "color": "{primaryBackground}" } } } }, "tertiary": { "inner-container": { "padding-left": "{a_80}", "padding-right": "{a_81}", "background-color": "{a_116}", "border-radius": "{a_117}", "behavior": { "hover": { "background-color": "{a_118}" }, "active": { "background-color": "{a_119}" }, "focus": { "border-color": "{a_120}" } } }, "left-icon": { "color": "{a_121}", "behavior": { "hover": { "color": "{a_122}" }, "active": { "color": "{a_123}" } } }, "right-icon": { "color": "{a_124}", "behavior": { "hover": { "color": "{a_125}" }, "active": { "color": "{a_126}" } } }, "jds-text": { "color": "{feedbackSuccess80}", "behavior": { "hover": { "color": "{feedbackSuccess50}" }, "active": { "color": "{primaryGrey100}" } } } } }, "negative": { "primary": { "inner-container": { "background-color": "{a_129}", "behavior": { "hover": { "background-color": "{a_130}" }, "active": { "background-color": "{a_131}" }, "focus": { "border-color": "{a_132}" } } }, "left-icon": { "color": "{a_133}", "behavior": { "hover": { "color": "{a_134}" }, "active": { "color": "{a_135}" } } }, "right-icon": { "color": "{a_136}", "behavior": { "hover": { "color": "{a_137}" }, "active": { "color": "{a_138}" } } }, "jds-text": { "color": "{global.white}", "behavior": { "hover": { "color": "{feedbackError80}" }, "active": { "color": "{primaryBackground}" } } } }, "secondary": { "inner-container": { "background-color": "{a_139}", "border-width": "{a_140}", "border-color": "{a_141}", "behavior": { "hover": { "background-color": "{a_142}" }, "active": { "background-color": "{a_143}" }, "focus": { "border-color": "{a_144}" } } }, "left-icon": { "color": "{a_145}", "behavior": { "hover": { "color": "{a_146}" }, "active": { "color": "{a_147}" } } }, "right-icon": { "color": "{a_148}", "behavior": { "hover": { "color": "{a_149}" }, "active": { "color": "{a_150}" } } }, "jds-text": { "color": "{feedbackError80}", "behavior": { "hover": {}, "active": { "color": "{primaryBackground}" } } } }, "tertiary": { "inner-container": { "padding-left": "{a_127}", "padding-right": "{a_128}", "background-color": "{a_151}", "border-radius": "{a_152}", "behavior": { "hover": { "background-color": "{a_153}" }, "active": { "background-color": "{a_154}" }, "focus": { "border-color": "{a_155}" } } }, "left-icon": { "color": "{a_156}", "behavior": { "hover": { "color": "{a_157}" }, "active": { "color": "{a_158}" } } }, "right-icon": { "color": "{a_159}", "behavior": { "hover": { "color": "{a_160}" }, "active": { "color": "{a_161}" } } }, "jds-text": { "color": "{feedbackError80}", "behavior": { "hover": { "color": "{feedbackError50}" }, "active": { "color": "{primaryGrey100}" } } } } }, "contrast": { "primary": { "inner-container": { "background-color": "{a_164}", "behavior": { "hover": { "background-color": "{a_165}" }, "active": { "background-color": "{a_166}" }, "focus": { "border-color": "{a_167}" } } }, "left-icon": { "color": "{a_168}", "behavior": { "hover": { "color": "{a_169}" }, "active": { "color": "{a_170}" } } }, "right-icon": { "color": "{a_171}", "behavior": { "hover": { "color": "{a_172}" }, "active": { "color": "{a_173}" } } }, "jds-text": { "color": "{primaryGrey100}", "behavior": { "hover": {}, "active": {} } } }, "secondary": { "inner-container": { "background-color": "{a_174}", "border-width": "{a_175}", "border-color": "{a_176}", "behavior": { "hover": { "background-color": "{a_177}" }, "active": { "background-color": "{a_178}" }, "focus": { "border-width": "{a_179}", "border-color": "{a_180}" } } }, "left-icon": { "color": "{a_181}", "behavior": { "hover": { "color": "{a_182}" }, "active": { "color": "{a_183}" } } }, "right-icon": { "color": "{a_184}", "behavior": { "hover": { "color": "{a_185}" }, "active": { "color": "{a_186}" } } }, "jds-text": { "color": "{primaryBackground}", "behavior": { "hover": { "color": "{primaryGrey100}" }, "active": { "color": "{primaryGrey100}" } } } }, "tertiary": { "inner-container": { "padding-left": "{a_162}", "padding-right": "{a_163}", "background-color": "{a_187}", "border-radius": "{a_188}", "behavior": { "hover": { "background-color": "{a_189}" }, "active": { "background-color": "{a_190}" }, "focus": { "border-width": "{a_191}", "border-color": "{a_192}" } } }, "left-icon": { "color": "{a_193}", "behavior": { "hover": { "color": "{a_194}" }, "active": { "color": "{a_195}" } } }, "right-icon": { "color": "{a_196}", "behavior": { "hover": { "color": "{a_197}" }, "active": { "color": "{a_198}" } } }, "jds-text": { "color": "{primaryBackground}", "behavior": { "hover": { "color": "{primaryGrey100}" }, "active": { "color": "{primaryGrey100}" } } } } } }, { "false": { "small": { "inner-container": { "padding-top": 0, "padding-right": 0, "padding-bottom": 0, "padding-left": 0, "width": 32, "height": 32 }, "left-icon": { "size": "{a_199}" }, "loader": { "size": "{a_200}" }, "jds-text": { "hidden": true } }, "medium": { "inner-container": { "padding-top": 0, "padding-right": 0, "padding-bottom": 0, "padding-left": 0, "width": 40, "height": 40 }, "jds-text": { "hidden": true } }, "large": { "inner-container": { "padding-top": 0, "padding-right": 0, "padding-bottom": 0, "padding-left": 0, "width": 48, "height": 48 }, "left-icon": { "size": "{a_201}" }, "loader": { "size": "{a_202}" }, "jds-text": { "hidden": true } }, "extra-large": { "inner-container": { "padding-top": 0, "padding-right": 0, "padding-bottom": 0, "padding-left": 0, "width": 64, "height": 64 }, "left-icon": { "size": "{a_203}" }, "loader": { "size": "{a_204}" }, "jds-text": { "hidden": true } } } }, { "true": { "true": { "container": { "width": "{a_205}" }, "inner-container": { "width": "{a_206}" } } } }], "combination_config": [["appearance", "kind"], ["_hasLabel", "size"], ["_hasLabel", "stretch"]], "api": { "config": { "kind": { "values": ["primary", "secondary", "tertiary"], "doc_description": "It can be used to switch between 3 variants of ActionButton which is by default 'primary'." }, "size": { "values": ["medium", "small", "large", "extra-large"], "doc_description": "it can be used to control the size of ActionButton." }, "appearance": { "values": ["normal", "positive", "negative", "contrast"], "doc_description": "It can be used to set the appearance of ActionButton." }, "state": { "values": ["normal", "disabled", "loading"], "doc_description": "It can be used to change the state of ActionButton." }, "iconPosition": { "values": ["left", "right"], "doc_description": "It can be used to psoition icon." }, "stretch": { "values": [false, true], "doc_description": "This can be used to fill the container with ActionButton." }, "_hasLabel": { "values": [true, false] }, "_hasIcon": { "values": [true, false] } }, "data": { "container": { "type": { "name": "type", "type": "string", "platform": "web" } }, "left-icon": { "value": { "type": "icon", "name": "icon", "doc_description": "It displays icon of ActionButton." } }, "right-icon": { "value": { "type": "icon", "name": "icon", "doc_description": "It displays icon of ActionButton." } }, "jds-text": { "value": { "type": "string", "name": "label", "doc_description": "It displays label of ActionButton." } } }, "events": { "inner-container": { "onClick": "onClick", "onFocus": { "name": "onFocus", "platform": "web" } } }, "a11y": { "inner-container": { "properties": { "role": { "value": "button" }, "aria-label": { "name": "ariaLabel", "prop": "label" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" }, "aria-hidden": "ariaHidden" } }, "left-icon": { "properties": { "role": { "value": "img" }, "aria-label": { "name": "iconAriaLabel", "function": true } } }, "right-icon": { "properties": { "role": { "value": "img" }, "aria-label": { "name": "iconAriaLabel", "function": true } } } } } };

const legacyKinds = ["icon-only", "background-bold"];
const legacySizes$4 = ["m", "s", "l", "xl", "xxl"];
const PROP_MAP$u = (props) => {
  if (legacyKinds.includes(props.kind)) {
    console.warn("these values for the kind prop are deprecated", legacyKinds);
  }
  if (legacySizes$4.includes(props.size)) {
    console.warn("these values for the size prop are deprecated", legacySizes$4);
  }
  return {
    ic: {
      properties: {
        ic: props.ic
      }
    },
    size: {
      defaultValue: "medium",
      variations: {
        m: {
          size: "medium"
        },
        l: {
          size: "large"
        },
        xl: {
          size: "xtra-large"
        },
        xxl: {
          size: "xtra-xtra-large"
        },
        s: {
          size: "small"
        }
      }
    },
    color: {
      variations: {
        primary: {
          color: "primary_50"
        },
        secondary: {
          color: "secondary_50"
        },
        sparkle: {
          color: "sparkle_50"
        },
        "grey-100": {
          color: "primary_grey_100"
        },
        "grey-80": {
          color: "primary_grey_80"
        },
        "grey-60": {
          color: "primary_grey_60"
        },
        success: {
          color: "feedback_success"
        },
        error: {
          color: "feedback_error"
        },
        warning: {
          color: "feedback_warning"
        }
      }
    },
    kind: {
      defaultValue: "icon-only",
      variations: {
        "icon-only": {
          kind: "default"
        },
        background: {
          kind: "background"
        },
        "background-bold": {
          kind: "background_bold"
        }
      }
    }
  };
};
const feedbackIcons = {
  feedback_success: "IcSuccessColored",
  feedback_error: "IcErrorColored",
  feedback_warning: "IcWarningColored"
};
const formatIconName = (iconName) => {
  if (typeof iconName === "string" && iconName.startsWith("Ic")) {
    const words = iconName.slice(2).match(/[A-Z][a-z]+/g);
    return words ? words.join(" ").toLowerCase() + " icon" : iconName;
  } else if (typeof iconName === "string" && iconName.startsWith("ic_")) {
    const words = iconName.slice(3).split("_");
    return words ? words.join(" ").toLowerCase() + " icon" : iconName;
  }
  return iconName;
};
const withLogic$2e = (Component) => forwardRef((userProps, ref) => {
  const props = modifyProps(userProps, PROP_MAP$u);
  let iconComponent = props.ic;
  if (typeof props.ic === "string") {
    if (props.color && Object.keys(feedbackIcons).includes(props.color))
      iconComponent = feedbackIcons[props.color] || props.ic;
  }
  let getCustomSize = props.customSize || void 0;
  if (getCustomSize) {
    const sizeInPx = /^(\d+)(px)?$/.exec(getCustomSize);
    if (sizeInPx) {
      getCustomSize = sizeInPx[1];
    } else {
      console.warn(
        "customSize should only be provided in pixels (px) or as a number."
      );
      getCustomSize = void 0;
    }
    if (Number.parseInt(getCustomSize) > 1080) {
      getCustomSize = "1080";
    } else if (Number.parseInt(getCustomSize) < 8) {
      getCustomSize = "8";
    }
  }
  const iconSize = props.kind === "default" ? getCustomSize : getCustomSize !== void 0 ? 2 / 3 * Number.parseInt(getCustomSize) : getCustomSize;
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        rootRef: ref,
        ariaLabel: props.ariaLabel || formatIconName(props.ic),
        _size: iconSize,
        customSize: getCustomSize
      },
      ic: iconComponent
    }
  );
});

const withLogic$2d = (Component) => forwardRef(
  (props, ref) => {
    return /* @__PURE__ */ jsx(
      Component,
      {
        ...{
          ...props,
          _hasLabel: Boolean(props.label?.length),
          rootRef: ref,
          iconAriaLabel: props.iconAriaLabel || formatIconName(props.icon)
        }
      }
    );
  }
);

const Component$2f = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$2a;
  const { kind = "primary", size = "medium", appearance = "normal", state = "normal", iconPosition = "left", stretch = false, onClick = noop, onFocus = noop, ariaLabel = props.label?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ kind, size, appearance, state, iconPosition, stretch, onClick, onFocus, ariaLabel, ...rest }, componentTag },
    "JDSActionButton",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const ActionButton = withLogic$2d(Component$2f);
ActionButton.displayName = "ActionButton";
ActionButton.slotName = "jds_action_button";

const sdl$29 = { "metadata": { "version": "1.0.0", "id": "avatar-1.0.0", "name": "JDSAvatar", "layerName": "jds_avatar", "description": "Avatars are used to show a thumbnail representation of an individual or business in the interface.", "usage": "Avatars can either be custom images uploaded by users, or default themed images, or automatically populated user initials." }, "hierarchy": { "container": ["jds_image", "jds-text", { "jds-icon-container": ["jds-icon"] }] }, "base": { "container": { "hidden": false, "opacity": "{a_17}", "width": "{a_0}", "height": "{a_1}", "display": "flex", "flex-direction": "{a_2}", "justify-content": "{a_3}", "align-items": "{a_4}", "background-color": "{a_5}", "border-radius": "{a_6}", "border-width": "{a_7}", "border-color": "{a_8}" }, "jds_image": { "hidden": true, "aspectRatio": "round" }, "jds-text": { "font-family": "{bodyS}", "color": "{sparkle60}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": true }, "jds-icon": { "size": "{l}", "color": "{primary50}", "value": "ic_profile", "hidden": false, "ic": "ic_profile" }, "jds-icon-container": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{l}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}", "hidden": false, "ic": "ic_profile" } }, "variant": { "size": { "xtra-small": { "container": { "width": "{a_9}", "height": "{a_10}" }, "jds-text": { "font-family": "{bodyXxs}", "font-size": "{bodyXxs}", "line-height": "{bodyXxs}", "letter-spacing": "{bodyXxs}", "font-weight": "{bodyXxs}" }, "jds-icon": { "size": "{base}" }, "jds-icon-container": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{base}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}" } }, "small": { "container": { "width": "{a_11}", "height": "{a_12}" }, "jds-text": { "font-family": "{bodyXxs}", "font-size": "{bodyXxs}", "line-height": "{bodyXxs}", "letter-spacing": "{bodyXxs}", "font-weight": "{bodyXxs}" }, "jds-icon": { "size": "{m}" }, "jds-icon-container": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{m}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}" } }, "large": { "container": { "width": "{a_13}", "height": "{a_14}" }, "jds-text": { "font-family": "{bodyM}", "font-size": "{bodyM}", "line-height": "{bodyM}", "letter-spacing": "{bodyM}", "font-weight": "{bodyM}" }, "jds-icon": { "size": "{xl}" }, "jds-icon-container": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{xl}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}" } }, "xtra-large": { "container": { "width": 56, "height": 56 }, "jds-text": { "font-family": "{bodyM}", "font-size": "{bodyM}", "line-height": "{bodyM}", "letter-spacing": "{bodyM}", "font-weight": "{bodyM}" }, "jds-icon": { "size": "{xxl}" }, "jds-icon-container": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{xxl}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}" } }, "xtra-xtra-large": { "container": { "width": "{a_15}", "height": "{a_16}" }, "jds-text": { "font-family": "{bodyL}", "font-size": "{bodyL}", "line-height": "{bodyL}", "letter-spacing": "{bodyL}", "font-weight": "{bodyL}" }, "jds-icon": { "size": "{xxl}" }, "jds-icon-container": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{xxl}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}" } } }, "disabled": { "true": { "container": { "disabled": true, "opacity": "{a_18}" } } }, "isClickable": { "false": { "container": { "disabled": true } } }, "kind": { "image": { "jds_image": { "hidden": false }, "jds-icon": { "hidden": true }, "jds-icon-container": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{l}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}", "hidden": true }, "jds-text": {} }, "initials": { "container": { "background-color": "{a_19}" }, "jds_image": { "hidden": true }, "jds-icon": { "hidden": true }, "jds-icon-container": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{l}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}", "hidden": true }, "jds-text": { "hidden": false } } } }, "combination": [{ "true": { "icon": { "container": { "behavior": { "focus": { "border-width": "{a_20}" } } }, "jds-icon": { "behavior": { "hover": { "color": "{primary60}" }, "focus": { "color": "{primary60}" } } }, "jds-icon-container": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{l}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}", "behavior": { "hover": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{l}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}" }, "focus": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{l}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}" } } } }, "initials": { "container": { "behavior": { "hover": { "background-color": "{a_21}" }, "focus": { "border-width": "{a_22}", "background-color": "{a_23}" } } }, "jds-text": { "behavior": { "hover": { "color": "{sparkle70}" }, "focus": { "color": "{sparkle70}" } } } }, "image": { "container": { "behavior": { "hover": { "opacity": "{a_24}" }, "focus": { "border-width": "{a_25}", "opacity": "{a_26}" } } } } } }], "combination_config": [["isClickable", "kind"]], "api": { "data": { "jds_image": { "src": { "type": "image", "name": "image", "doc_description": "This is a user uploaded image. It will be used, when [kind] is set to image." } }, "jds-text": { "value": { "type": "string", "name": "initials", "function": true, "doc_description": "This is the two initials of user name. It will be used, when [kind] is set to initials." } } }, "config": { "size": { "values": ["medium", "xtra-small", "small", "large", "xtra-large", "xtra-xtra-large"], "doc_description": "This can be used to control the size of Avatar." }, "kind": { "values": ["icon", "initials", "image"], "doc_description": "It can be used to switch between 3 variants of Avatar." }, "disabled": { "values": [false, true], "doc_description": "It can be used to enable or disable Avatar." }, "isClickable": { "values": [false, true], "platform": "web", "doc_description": "It can be used to make Avatar Clickable" } }, "events": { "container": { "onClick": "onClick" } }, "a11y": { "container": { "properties": { "aria-label": { "name": "ariaLabel", "value": "avatar" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" }, "role": { "name": "role", "platform": "web" }, "aria-haspopup": { "name": "ariaHaspopup", "platform": "web" }, "aria-expanded": { "name": "ariaExpanded", "platform": "web" }, "aria-controls": { "name": "ariaControls", "platform": "web" } } } } } };

const legacySizes$3 = ["x-small", "x-large", "xx-large"];
const PROP_MAP$t = (props) => {
  if (legacySizes$3.includes(props.size)) {
    console.warn(
      "these sizes are not deprecated. use sizes starting with `xtra`"
    );
  }
  if (typeof props.image === "object") {
    console.warn("Image as an element is deprecated. Pass a string instead");
  }
  return {
    size: {
      properties: {
        size: props.size
      },
      defaultValue: "medium",
      variations: {
        "x-small": {
          size: "xtra-small"
        },
        small: {
          size: "small"
        },
        medium: {
          size: "medium"
        },
        large: {
          size: "large"
        },
        "x-large": {
          size: "xtra-large"
        },
        "xx-large": {
          size: "xtra-xtra-large"
        }
      }
    },
    kind: {
      properties: {
        kind: props.kind
      },
      defaultValue: "default",
      variations: {
        default: {
          icon: "ic_profile"
        }
      }
    },
    onClick: {
      properties: {
        onClick: props.onClick
      }
    }
  };
};
const extractInitials = (value = "A", size) => {
  const trimmedValue = value?.trim();
  if (size === "xtra-small")
    return (trimmedValue[0] || "A").toUpperCase();
  if (trimmedValue.indexOf(" ") >= 0) {
    const strMatch = trimmedValue?.trim().match(/\b(\w)/g) || [""];
    const strJoin = strMatch.join("") || trimmedValue;
    return strJoin.toUpperCase().trim().substring(0, 2);
  }
  return trimmedValue.toUpperCase().trim().substring(0, 2);
};
const withLogic$2c = (Component) => (userProps) => {
  const props = modifyProps(userProps, PROP_MAP$t);
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...props,
      image: typeof props.image === "string" ? props.image : props.image?.props?.src,
      initials: extractInitials(props.initials, props.size || "")
    }
  );
};

const Component$2e = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$29;
  const { size = "medium", kind = "icon", disabled = false, isClickable = false, onClick = noop, ariaLabel = "avatar", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ size, kind, disabled, isClickable, onClick, ariaLabel, ...rest }, componentTag },
    "JDSAvatar",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const Avatar = withLogic$2c(Component$2e);
Avatar.displayName = "Avatar";
Avatar.slotName = "jds_avatar";

const sdl$28 = { "metadata": { "version": "2.0.0", "id": "avatar-2.0.0", "name": "JDSAvatarV2", "layerName": "jds_avatar_v2" }, "hierarchy": { "container": ["jds_avatar_v2_default", "jds_avatar_v2_status", "jds_avatar_v2_notification", "jds_avatar_v2_information", "jds_avatar_v2_complete_ring", "jds_avatar_v2_segmented_ring", "jds_avatar_v2_progress_ring"] }, "base": { "container": { "hidden": false, "behavior": { "focus": { "background-color": "{primary60}", "border-radius": "{pill}", "padding-left": "{xxs}", "padding-right": "{xxs}", "padding-top": "{xxs}", "padding-bottom": "{xxs}" } } }, "jds_avatar_v2_default": { "hidden": false, "size": "medium" }, "jds_avatar_v2_status": { "hidden": true, "size": "medium" }, "jds_avatar_v2_notification": { "hidden": true, "size": "medium" }, "jds_avatar_v2_information": { "hidden": true, "size": "medium" }, "jds_avatar_v2_complete_ring": { "hidden": true, "size": "medium" }, "jds_avatar_v2_segmented_ring": { "hidden": true, "size": "medium" }, "jds_avatar_v2_progress_ring": { "hidden": true, "size": "medium" } }, "variant": { "kind": { "status": { "jds_avatar_v2_default": { "hidden": true }, "jds_avatar_v2_status": { "hidden": false } }, "notification": { "jds_avatar_v2_default": { "hidden": true }, "jds_avatar_v2_notification": { "hidden": false } }, "information": { "jds_avatar_v2_default": { "hidden": true }, "jds_avatar_v2_information": { "hidden": false } }, "complete-ring": { "jds_avatar_v2_default": { "hidden": true }, "jds_avatar_v2_complete_ring": { "hidden": false } }, "segmented-ring": { "jds_avatar_v2_default": { "hidden": true }, "jds_avatar_v2_segmented_ring": { "hidden": false } }, "progress-ring": { "jds_avatar_v2_default": { "hidden": true }, "jds_avatar_v2_progress_ring": { "hidden": false } } }, "size": { "xtra-small": { "jds_avatar_v2_default": { "size": "xtra-small" }, "jds_avatar_v2_status": { "size": "xtra-small" }, "jds_avatar_v2_notification": { "size": "xtra-small" }, "jds_avatar_v2_information": { "size": "xtra-small" }, "jds_avatar_v2_complete_ring": { "size": "xtra-small" }, "jds_avatar_v2_segmented_ring": { "size": "xtra-small" }, "jds_avatar_v2_progress_ring": { "size": "xtra-small" } }, "small": { "jds_avatar_v2_default": { "size": "small" }, "jds_avatar_v2_status": { "size": "small" }, "jds_avatar_v2_notification": { "size": "small" }, "jds_avatar_v2_information": { "size": "small" }, "jds_avatar_v2_complete_ring": { "size": "small" }, "jds_avatar_v2_segmented_ring": { "size": "small" }, "jds_avatar_v2_progress_ring": { "size": "small" } }, "large": { "jds_avatar_v2_default": { "size": "large" }, "jds_avatar_v2_status": { "size": "large" }, "jds_avatar_v2_notification": { "size": "large" }, "jds_avatar_v2_information": { "size": "large" }, "jds_avatar_v2_complete_ring": { "size": "large" }, "jds_avatar_v2_segmented_ring": { "size": "large" }, "jds_avatar_v2_progress_ring": { "size": "large" } }, "xtra-large": { "jds_avatar_v2_default": { "size": "xtra-large" }, "jds_avatar_v2_status": { "size": "xtra-large" }, "jds_avatar_v2_notification": { "size": "xtra-large" }, "jds_avatar_v2_information": { "size": "xtra-large" }, "jds_avatar_v2_complete_ring": { "size": "xtra-large" }, "jds_avatar_v2_segmented_ring": { "size": "xtra-large" }, "jds_avatar_v2_progress_ring": { "size": "xtra-large" } }, "xtra-xtra-large": { "jds_avatar_v2_default": { "size": "xtra-xtra-large" }, "jds_avatar_v2_status": { "size": "xtra-xtra-large" }, "jds_avatar_v2_notification": { "size": "xtra-xtra-large" }, "jds_avatar_v2_information": { "size": "xtra-xtra-large" }, "jds_avatar_v2_complete_ring": { "size": "xtra-xtra-large" }, "jds_avatar_v2_segmented_ring": { "size": "xtra-xtra-large" }, "jds_avatar_v2_progress_ring": { "size": "xtra-xtra-large" } } }, "disabled": { "true": { "container": { "disabled": true } } } }, "combination": [{}], "combination_config": [[]], "api": { "config": { "kind": { "values": ["default", "status", "notification", "information", "complete-ring", "segmented-ring", "progress-ring"] }, "size": { "values": ["medium", "xtra-small", "small", "large", "xtra-large", "xtra-xtra-large"] }, "disabled": { "values": [false, true] } }, "data": { "jds_avatar_v2_default": { "image": { "type": "image", "name": "image" }, "initials": { "type": "string", "name": "initials" }, "kind": { "type": "JDSAvatarV2Default.kind", "name": "avatarKind" }, "disabled": { "type": "boolean", "name": "disabled" } }, "jds_avatar_v2_status": { "label": { "type": "string", "name": "badgeLabel" }, "avatarImage": { "type": "image", "name": "image" }, "avatarInitials": { "type": "string", "name": "initials" }, "avatarKind": { "type": "JDSAvatarV2Default.kind", "name": "avatarKind" }, "badgeBorder": { "type": "boolean", "name": "badgeBorder" }, "badgeStatus": { "type": "JDSBadgeV2Status.status", "name": "statusBadgeStatus" }, "kind": { "type": "JDSAvatarV2Status.kind", "name": "statusBadgeKind" }, "placement": { "type": "JDSAvatarV2Status.placement", "name": "statusBadgePlacement" }, "disabled": { "type": "boolean", "name": "disabled" } }, "jds_avatar_v2_notification": { "label": { "type": "string", "name": "badgeLabel" }, "avatarImage": { "type": "image", "name": "image" }, "avatarInitials": { "type": "string", "name": "initials" }, "avatarKind": { "type": "JDSAvatarV2Default.kind", "name": "avatarKind" }, "badgeBorder": { "type": "boolean", "name": "badgeBorder" }, "kind": { "type": "JDSAvatarV2Notification.kind", "name": "notificationBadgeKind" }, "disabled": { "type": "boolean", "name": "disabled" } }, "jds_avatar_v2_information": { "label": { "type": "string", "name": "badgeLabel" }, "avatarImage": { "type": "image", "name": "image" }, "avatarInitials": { "type": "string", "name": "initials" }, "avatarKind": { "type": "JDSAvatarV2Default.kind", "name": "avatarKind" }, "badgeBorder": { "type": "boolean", "name": "badgeBorder" }, "badgeIcon": { "type": "icon", "name": "informationBadgeIcon" }, "badgeColor": { "type": "JDSBadgeV2Information.color", "name": "informationBadgeColor" }, "badgeAppearance": { "type": "JDSBadgeV2Information.appearance", "name": "informationBadgeAppearance" }, "kind": { "type": "JDSAvatarV2Information.kind", "name": "informationBadgeKind" }, "placement": { "type": "JDSAvatarV2Information.placement", "name": "informationBadgePlacement" }, "disabled": { "type": "boolean", "name": "disabled" } }, "jds_avatar_v2_complete_ring": { "avatarImage": { "type": "image", "name": "image" }, "avatarInitials": { "type": "string", "name": "initials" }, "avatarKind": { "type": "JDSAvatarV2Default.kind", "name": "avatarKind" }, "disabled": { "type": "boolean", "name": "disabled" } }, "jds_avatar_v2_segmented_ring": { "avatarImage": { "type": "image", "name": "image" }, "avatarInitials": { "type": "string", "name": "initials" }, "avatarKind": { "type": "JDSAvatarV2Default.kind", "name": "avatarKind" }, "disabled": { "type": "boolean", "name": "disabled" }, "count": { "type": "number", "name": "segmentCount", "doc_description": "It can be used to control count of segments." } }, "jds_avatar_v2_progress_ring": { "avatarImage": { "type": "image", "name": "image" }, "avatarInitials": { "type": "string", "name": "initials" }, "avatarKind": { "type": "JDSAvatarV2Default.kind", "name": "avatarKind" }, "disabled": { "type": "boolean", "name": "disabled" }, "progress": { "type": "number", "name": "progress" } } }, "events": { "container": { "onClick": "onClick" } }, "a11y": { "jds_avatar_v2_default": { "properties": { "ariaLabel": "ariaLabel", "ariaDescribedby": { "name": "ariaDescribedby", "platform": "web,ios" } } }, "jds_avatar_v2_status": { "properties": { "ariaLabel": "ariaLabel", "ariaDescribedby": { "name": "ariaDescribedby", "platform": "web,ios" } } }, "jds_avatar_v2_notification": { "properties": { "ariaLabel": "ariaLabel", "ariaDescribedby": { "name": "ariaDescribedby", "platform": "web,ios" } } }, "jds_avatar_v2_information": { "properties": { "ariaLabel": "ariaLabel", "ariaDescribedby": { "name": "ariaDescribedby", "platform": "web,ios" } } }, "jds_avatar_v2_complete_ring": { "properties": { "ariaLabel": "ariaLabel", "ariaDescribedby": { "name": "ariaDescribedby", "platform": "web,ios" } } }, "jds_avatar_v2_segmented_ring": { "properties": { "ariaLabel": "ariaLabel", "ariaDescribedby": { "name": "ariaDescribedby", "platform": "web,ios" } } }, "jds_avatar_v2_progress_ring": { "properties": { "ariaLabel": "ariaLabel", "ariaDescribedby": { "name": "ariaDescribedby", "platform": "web,ios" } } } } } };

const withLogic$2b = (Component) => (props) => {
  const trimChars = (initials2, size) => {
    if (!initials2 || typeof initials2 !== "string" || initials2.trim() === "") {
      return "";
    }
    let initialsText = "";
    const array = initials2.trim().split(" ");
    if (array.length <= 1) {
      initialsText = array[0].substring(0, 2);
    } else {
      initialsText = array[0][0] + array[1][0];
    }
    initialsText = initialsText.substring(0, size);
    return initialsText.toUpperCase();
  };
  const initials = (item) => {
    return trimChars(item.initials, item.size === "xtra-small" ? 1 : 2);
  };
  return /* @__PURE__ */ jsx(Component, { ...props, initials: initials(props) });
};

const Component$2d = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$28;
  const { kind = "default", size = "medium", disabled = false, onClick = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ kind, size, disabled, onClick, ...rest }, componentTag },
    "JDSAvatarV2",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const AvatarV2 = withLogic$2b(Component$2d);
AvatarV2.displayName = "AvatarV2";
AvatarV2.slotName = "jds_avatar_v2";

const sdl$27 = { "metadata": { "version": "2.0.0", "id": "avatar-complete-ring-2.0.0", "name": "JDSAvatarV2CompleteRing", "layerName": "jds_avatar_v2_complete_ring", "internal": true }, "hierarchy": { "container": ["ring-arc", "jds_avatar_v2_default"] }, "base": { "container": { "flex-direction": "{flexDirection.stack}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}", "opacity": "{opacity.enabled}", "hidden": false }, "ring-arc": { "radius": 24, "arcWidth": 2, "fill": "{primary50}", "start": 0, "end": 360, "z-index": 1, "disabled": true }, "jds_avatar_v2_default": { "size": "medium" } }, "variant": { "size": { "xtra-xtra-large": { "jds_avatar_v2_default": { "size": "xtra-xtra-large" }, "ring-arc": { "radius": 68, "arcWidth": 4 } }, "xtra-large": { "jds_avatar_v2_default": { "size": "xtra-large" }, "ring-arc": { "radius": 34, "arcWidth": 3 } }, "large": { "jds_avatar_v2_default": { "size": "large" }, "ring-arc": { "radius": 30, "arcWidth": 3 } }, "small": { "jds_avatar_v2_default": { "size": "small" }, "ring-arc": { "radius": 20, "arcWidth": 2 } }, "xtra-small": { "jds_avatar_v2_default": { "size": "xtra-small" }, "ring-arc": { "radius": 16, "arcWidth": 2 } } }, "disabled": { "true": { "container": { "disabled": true, "opacity": "{opacity.disabled}" } } } }, "combination": [{}], "combination_config": [[]], "api": { "config": { "size": { "values": ["medium", "xtra-xtra-large", "xtra-large", "large", "small", "xtra-small"] }, "disabled": { "values": [false, true] } }, "data": { "jds_avatar_v2_default": { "image": { "type": "image", "name": "avatarImage" }, "initials": { "type": "string", "name": "avatarInitials" }, "kind": { "type": "JDSAvatarV2Default.kind", "name": "avatarKind" } } }, "a11y": { "container": { "properties": { "aria-label": { "name": "ariaLabel", "value": "Avatar with Activity Ring" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" } } } } } };

const withLogic$2a = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$2c = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$27;
  const { size = "medium", disabled = false, ariaLabel = "Avatar with Activity Ring", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ size, disabled, ariaLabel, ...rest }, componentTag },
    "JDSAvatarV2CompleteRing",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const AvatarV2CompleteRing = withLogic$2a(Component$2c);
AvatarV2CompleteRing.displayName = "AvatarV2CompleteRing";
AvatarV2CompleteRing.slotName = "jds_avatar_v2_complete_ring";

const sdl$26 = { "metadata": { "version": "2.0.0", "id": "avatar-default-2.0.0", "name": "JDSAvatarV2Default", "layerName": "jds_avatar_v2_default", "internal": true }, "hierarchy": { "container": ["jds_image", "jds-text", "icon"] }, "base": { "container": { "hidden": false, "opacity": "{a_9}", "width": "{a_0}", "height": "{a_1}", "flex-direction": "{a_2}", "justify-content": "{a_3}", "align-items": "{a_4}", "background-color": "{a_5}", "border-radius": "{a_6}", "behavior": { "active": { "background-color": "{a_10}" } } }, "jds_image": { "hidden": true, "aspectRatio": "round" }, "icon": { "hidden": false, "size": "{a_12}", "color": "{a_13}", "value": "ic_profile", "behavior": { "hover": { "color": "{a_14}" }, "active": { "color": "{a_15}" } } }, "jds-text": { "font-family": "{bodySBold}", "color": "{primary70}", "font-size": "{bodySBold}", "line-height": "{bodySBold}", "letter-spacing": "{bodySBold}", "font-weight": "{bodySBold}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": true, "behavior": { "hover": { "color": "{primary50}" } } } }, "variant": { "size": { "xtra-small": { "container": { "width": "{a_16}", "height": "{a_17}" }, "icon": { "size": "{a_26}" }, "jds-text": { "font-family": "{bodyXxsBold}", "font-size": "{bodyXxsBold}", "line-height": "{bodyXxsBold}", "letter-spacing": "{bodyXxsBold}", "font-weight": "{bodyXxsBold}" } }, "small": { "container": { "width": "{a_18}", "height": "{a_19}" }, "icon": { "size": "{a_27}" }, "jds-text": { "font-family": "{bodyXxsBold}", "font-size": "{bodyXxsBold}", "line-height": "{bodyXxsBold}", "letter-spacing": "{bodyXxsBold}", "font-weight": "{bodyXxsBold}" } }, "large": { "container": { "width": "{a_20}", "height": "{a_21}" }, "icon": { "size": "{a_28}" }, "jds-text": {} }, "xtra-large": { "container": { "width": "{a_22}", "height": "{a_23}" }, "icon": { "size": "{a_29}" }, "jds-text": { "font-family": "{bodyMBold}", "font-size": "{bodyMBold}", "line-height": "{bodyMBold}", "letter-spacing": "{bodyMBold}", "font-weight": "{bodyMBold}" } }, "xtra-xtra-large": { "container": { "width": "{a_24}", "height": "{a_25}" }, "icon": { "size": "{a_30}" }, "jds-text": { "font-family": "{bodyLBold}", "font-size": "{bodyLBold}", "line-height": "{bodyLBold}", "letter-spacing": "{bodyLBold}", "font-weight": "{bodyLBold}" } } }, "disabled": { "true": { "container": { "disabled": true, "opacity": "{a_31}" } } }, "kind": { "initials": { "jds_image": { "hidden": true }, "icon": { "hidden": true }, "jds-text": { "hidden": false } }, "image": { "container": { "behavior": { "hover": { "background-color": "{a_34}" }, "active": { "background-color": "{a_36}" } } }, "jds_image": { "hidden": false, "behavior": { "hover": { "opacity": "{a_33}" }, "active": { "opacity": "{a_35}" } } }, "icon": { "hidden": true }, "jds-text": {} } } }, "combination": [{}], "combination_config": [[]], "api": { "data": { "jds_image": { "src": { "type": "image", "name": "image" } }, "jds-text": { "value": { "type": "string", "name": "initials", "function": true } } }, "config": { "size": { "values": ["medium", "xtra-small", "small", "large", "xtra-large", "xtra-xtra-large"] }, "kind": { "values": ["icon", "initials", "image"] }, "disabled": { "values": [false, true] } }, "events": { "container": { "onClick": "onClick" } }, "a11y": { "container": { "properties": { "aria-label": { "name": "ariaLabel", "value": "Avatar" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" } } } } } };

const withLogic$29 = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$2b = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$26;
  const { size = "medium", kind = "icon", disabled = false, onClick = noop, ariaLabel = "Avatar", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ size, kind, disabled, onClick, ariaLabel, ...rest }, componentTag },
    "JDSAvatarV2Default",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const AvatarV2Default = withLogic$29(Component$2b);
AvatarV2Default.displayName = "AvatarV2Default";
AvatarV2Default.slotName = "jds_avatar_v2_default";

const sdl$25 = { "metadata": { "version": "2.0.0", "id": "avatar-information-2.0.0", "name": "JDSAvatarV2Information", "layerName": "jds_avatar_v2_information", "internal": true }, "hierarchy": { "container": ["jds_avatar_v2_default", { "badge-container": ["jds_badge_v2"] }] }, "base": { "container": { "flex-direction": "{flexDirection.stack}", "justify-content": "{justifyContent.start}", "align-items": "{alignItems.start}", "opacity": "{opacity.enabled}", "hidden": false }, "badge-container": { "padding-left": "{custom_11}", "padding-top": "{custom_11}", "z-index": 1, "disabled": true }, "jds_avatar_v2_default": { "size": "medium" }, "jds_badge_v2": { "size": "small", "kind": "information", "informationKind": "icon-circle", "border": true } }, "variant": { "kind": { "label": { "jds_badge_v2": { "informationKind": "label" } } }, "size": { "xtra-small": { "container": { "hidden": true } } }, "disabled": { "true": { "container": { "disabled": true, "opacity": "{opacity.disabled}" } } } }, "combination": [{ "small": { "icon": { "bottom-right": { "badge-container": { "padding-left": "{custom_15}", "padding-top": "{custom_15}" }, "jds_avatar_v2_default": { "size": "small" }, "jds_badge_v2": { "size": "small" } }, "bottom-center": { "container": { "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}" }, "badge-container": { "align-self": "flex-end", "padding-left": "{custom_5}", "padding-top": "{l}" }, "jds_avatar_v2_default": { "size": "small" }, "jds_badge_v2": { "size": "small" } } }, "label": { "bottom-right": { "container": { "hidden": true } }, "bottom-center": { "container": { "hidden": true } } } }, "medium": { "icon": { "bottom-center": { "container": { "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}" }, "badge-container": { "align-self": "flex-end", "padding-left": "{custom_5}", "padding-top": "{custom_10}" }, "jds_avatar_v2_default": { "size": "medium" }, "jds_badge_v2": { "size": "small" } } }, "label": { "bottom-right": { "badge-container": { "padding-left": "{custom_11}", "padding-top": "{l}" }, "jds_avatar_v2_default": { "size": "medium" }, "jds_badge_v2": { "size": "xtra-small" } }, "bottom-center": { "container": { "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}" }, "badge-container": { "align-self": "flex-end", "padding-left": "{custom_5}", "padding-top": "{custom_10}" }, "jds_avatar_v2_default": { "size": "medium" }, "jds_badge_v2": { "size": "xtra-small" } } } }, "large": { "icon": { "bottom-right": { "badge-container": { "padding-left": "{l}", "padding-top": "{l}" }, "jds_avatar_v2_default": { "size": "large" }, "jds_badge_v2": { "size": "medium" } }, "bottom-center": { "container": { "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}" }, "badge-container": { "align-self": "flex-end", "padding-left": "{custom_5}", "padding-top": "{xxl}" }, "jds_avatar_v2_default": { "size": "large" }, "jds_badge_v2": { "size": "medium" } } }, "label": { "bottom-right": { "badge-container": { "padding-left": "{l}", "padding-top": "{custom_10}" }, "jds_avatar_v2_default": { "size": "large" }, "jds_badge_v2": { "size": "xtra-small" } }, "bottom-center": { "container": { "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}" }, "badge-container": { "align-self": "flex-end", "padding-left": "{custom_5}", "padding-top": "{xxl}" }, "jds_avatar_v2_default": { "size": "large" }, "jds_badge_v2": { "size": "xtra-small" } } } }, "xtra-large": { "icon": { "bottom-right": { "badge-container": { "padding-left": "{xl}", "padding-top": "{xl}" }, "jds_avatar_v2_default": { "size": "xtra-large" }, "jds_badge_v2": { "size": "large" } }, "bottom-center": { "container": { "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}" }, "badge-container": { "align-self": "flex-end", "padding-left": "{custom_5}", "padding-top": "{custom_19}" }, "jds_avatar_v2_default": { "size": "xtra-large" }, "jds_badge_v2": { "size": "large" } } }, "label": { "bottom-right": { "badge-container": { "padding-left": "{custom_8}", "padding-top": "{xl}" }, "jds_avatar_v2_default": { "size": "xtra-large" }, "jds_badge_v2": { "size": "xtra-small" } }, "bottom-center": { "container": { "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}" }, "badge-container": { "align-self": "flex-end", "padding-left": "{custom_5}", "padding-top": "{custom_19}" }, "jds_avatar_v2_default": { "size": "xtra-large" }, "jds_badge_v2": { "size": "xtra-small" } } } }, "xtra-xtra-large": { "icon": { "bottom-right": { "badge-container": { "padding-left": "{custom_7}", "padding-top": "{custom_7}" }, "jds_avatar_v2_default": { "size": "xtra-xtra-large" }, "jds_badge_v2": { "size": "xtra-xtra-large" } }, "bottom-center": { "container": { "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}" }, "badge-container": { "align-self": "flex-end", "padding-left": "{custom_5}", "padding-top": "{custom_21}" }, "jds_avatar_v2_default": { "size": "xtra-xtra-large" }, "jds_badge_v2": { "size": "xtra-xtra-large" } } }, "label": { "bottom-right": { "badge-container": { "padding-left": "{custom_6}", "padding-top": "{custom_7}" }, "jds_avatar_v2_default": { "size": "xtra-xtra-large" }, "jds_badge_v2": { "size": "medium" } }, "bottom-center": { "container": { "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}" }, "badge-container": { "align-self": "flex-end", "padding-left": "{custom_5}", "padding-top": "{custom_22}" }, "jds_avatar_v2_default": { "size": "xtra-xtra-large" }, "jds_badge_v2": { "size": "medium" } } } } }], "combination_config": [["size", "kind", "placement"]], "api": { "data": { "jds_avatar_v2_default": { "image": { "type": "image", "name": "avatarImage" }, "kind": { "type": "JDSAvatarV2Default.kind", "name": "avatarKind" }, "initials": { "type": "string", "name": "avatarInitials" } }, "jds_badge_v2": { "icon": { "type": "icon", "name": "badgeIcon" }, "label": { "type": "string", "name": "label" }, "border": { "type": "boolean", "name": "badgeBorder" }, "color": { "type": "JDSBadgeV2Information.color", "name": "badgeColor" }, "appearance": { "type": "JDSBadgeV2Information.appearance", "name": "badgeAppearance" } } }, "config": { "kind": { "values": ["icon", "label"] }, "placement": { "values": ["bottom-right", "bottom-center"] }, "size": { "values": ["medium", "xtra-xtra-large", "xtra-large", "large", "small", "xtra-small"] }, "disabled": { "values": [false, true] } }, "a11y": { "container": { "properties": { "aria-label": { "name": "ariaLabel", "value": "Avatar with Information Badge" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" } } } } } };

const withLogic$28 = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$2a = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$25;
  const { kind = "icon", placement = "bottom-right", size = "medium", disabled = false, ariaLabel = "Avatar with Information Badge", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ kind, placement, size, disabled, ariaLabel, ...rest }, componentTag },
    "JDSAvatarV2Information",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const AvatarV2Information = withLogic$28(Component$2a);
AvatarV2Information.displayName = "AvatarV2Information";
AvatarV2Information.slotName = "jds_avatar_v2_information";

const sdl$24 = { "metadata": { "version": "2.0.0", "id": "avatar-notification-2.0.0", "name": "JDSAvatarV2Notification", "layerName": "jds_avatar_v2_notification", "internal": true }, "hierarchy": { "container": ["jds_avatar_v2_default", { "badge-container": ["jds_badge_v2"] }] }, "base": { "container": { "flex-direction": "{flexDirection.stack}", "justify-content": "{justifyContent.start}", "align-items": "{alignItems.end}", "opacity": "{opacity.enabled}" }, "badge-container": { "padding-left": 28, "padding-bottom": 28, "z-index": 1, "disabled": true }, "jds_avatar_v2_default": { "size": "medium" }, "jds_badge_v2": { "kind": "notification", "notificationKind": "dot", "size": "small" } }, "variant": { "kind": { "number": { "jds_badge_v2": { "notificationKind": "number" } }, "number-symbol": { "jds_badge_v2": { "notificationKind": "number-symbol" } } }, "size": { "xtra-small": { "badge-container": { "padding-left": 16, "padding-bottom": 16 }, "jds_avatar_v2_default": { "size": "xtra-small" }, "jds_badge_v2": { "size": "xtra-small" } }, "small": { "badge-container": { "padding-left": 20, "padding-bottom": 20 }, "jds_avatar_v2_default": { "size": "small" }, "jds_badge_v2": { "size": "small" } }, "large": { "badge-container": { "padding-left": 32, "padding-bottom": 32 }, "jds_avatar_v2_default": { "size": "large" }, "jds_badge_v2": { "size": "medium" } }, "xtra-large": { "badge-container": { "padding-left": 37, "padding-bottom": 37 }, "jds_avatar_v2_default": { "size": "xtra-large" }, "jds_badge_v2": { "size": "large" } }, "xtra-xtra-large": { "badge-container": { "padding-left": 87, "padding-bottom": 87 }, "jds_avatar_v2_default": { "size": "xtra-xtra-large" }, "jds_badge_v2": { "size": "xtra-xtra-xtra-large" } } }, "disabled": { "true": { "container": { "disabled": true, "opacity": "{opacity.disabled}" } } } }, "combination": [{ "number": { "xtra-small": { "badge-container": { "padding-left": 15, "padding-bottom": 15 }, "jds_badge_v2": { "size": "medium" } }, "small": { "badge-container": { "padding-left": 19, "padding-bottom": 19 }, "jds_badge_v2": { "size": "large" } }, "medium": { "badge-container": { "padding-left": 23, "padding-bottom": 27 }, "jds_badge_v2": { "size": "large" } }, "large": { "badge-container": { "padding-left": 27, "padding-bottom": 35 }, "jds_badge_v2": { "size": "large" } }, "xtra-large": { "badge-container": { "padding-left": 35, "padding-bottom": 39 }, "jds_badge_v2": { "size": "xtra-large" } } }, "number-symbol": { "xtra-small": { "badge-container": { "padding-left": 10, "padding-bottom": 23 }, "jds_avatar_v2_default": { "size": "small" }, "jds_badge_v2": { "size": "medium" } }, "small": { "badge-container": { "padding-left": 10, "padding-bottom": 23 }, "jds_badge_v2": { "size": "medium" } }, "medium": { "badge-container": { "padding-left": 18, "padding-bottom": 31 }, "jds_badge_v2": { "size": "medium" } }, "large": { "badge-container": { "padding-left": 22, "padding-bottom": 39 }, "jds_badge_v2": { "size": "medium" } }, "xtra-large": { "badge-container": { "padding-left": 28, "padding-bottom": 43 }, "jds_badge_v2": { "size": "large" } }, "xtra-xtra-large": { "badge-container": { "padding-left": 75, "padding-bottom": 87 } } } }], "combination_config": [["kind", "size"]], "api": { "config": { "kind": { "values": ["dot", "number", "number-symbol"] }, "size": { "values": ["medium", "xtra-small", "small", "large", "xtra-large", "xtra-xtra-large"] }, "disabled": { "values": [false, true] } }, "data": { "jds_avatar_v2_default": { "image": { "type": "image", "name": "avatarImage" }, "initials": { "type": "string", "name": "avatarInitials" }, "kind": { "type": "JDSAvatarV2Default.kind", "name": "avatarKind" } }, "jds_badge_v2": { "label": { "type": "string", "name": "label" }, "border": { "type": "boolean", "name": "badgeBorder" } } }, "a11y": { "container": { "properties": { "aria-label": { "name": "ariaLabel", "value": "Avatar with Active Notifications" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" } } } } } };

const withLogic$27 = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$29 = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$24;
  const { kind = "dot", size = "medium", disabled = false, ariaLabel = "Avatar with Active Notifications", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ kind, size, disabled, ariaLabel, ...rest }, componentTag },
    "JDSAvatarV2Notification",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const AvatarV2Notification = withLogic$27(Component$29);
AvatarV2Notification.displayName = "AvatarV2Notification";
AvatarV2Notification.slotName = "jds_avatar_v2_notification";

const sdl$23 = { "metadata": { "version": "1.0.0", "id": "avatar_progress_ring-1.0.0", "name": "JDSAvatarV2ProgressRing", "layerName": "jds_avatar_v2_progress_ring", "internal": true }, "hierarchy": { "container": ["base-arc", "ring-arc", "jds_avatar_v2_default"] }, "base": { "container": { "flex-direction": "{flexDirection.stack}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}", "opacity": "{opacity.enabled}", "hidden": false }, "base-arc": { "radius": 24, "arcWidth": 2, "fill": "{primaryGrey40}", "start": 0, "end": 360, "z-index": 1, "disabled": true }, "ring-arc": { "radius": 24, "arcWidth": 2, "fill": "{primary50}", "start": 0, "end": 270, "z-index": 2, "disabled": true }, "jds_avatar_v2_default": { "size": "medium" } }, "variant": { "size": { "xtra-xtra-large": { "jds_avatar_v2_default": { "size": "xtra-xtra-large" }, "base-arc": { "radius": 68, "arcWidth": 4 }, "ring-arc": { "radius": 68, "arcWidth": 4 } }, "xtra-large": { "jds_avatar_v2_default": { "size": "xtra-large" }, "base-arc": { "radius": 34, "arcWidth": 3 }, "ring-arc": { "radius": 34, "arcWidth": 3 } }, "large": { "jds_avatar_v2_default": { "size": "large" }, "base-arc": { "radius": 30, "arcWidth": 3 }, "ring-arc": { "radius": 30, "arcWidth": 3 } }, "small": { "jds_avatar_v2_default": { "size": "small" }, "base-arc": { "radius": 20, "arcWidth": 2 }, "ring-arc": { "radius": 20, "arcWidth": 2 } }, "xtra-small": { "jds_avatar_v2_default": { "size": "xtra-small" }, "base-arc": { "radius": 16, "arcWidth": 2 }, "ring-arc": { "radius": 16, "arcWidth": 2 } } }, "disabled": { "true": { "container": { "disabled": true, "opacity": "{opacity.disabled}" } } } }, "combination": [{}], "combination_config": [[]], "api": { "config": { "size": { "values": ["medium", "xtra-xtra-large", "xtra-large", "large", "small", "xtra-small"] }, "disabled": { "values": [false, true] } }, "data": { "jds_avatar_v2_default": { "image": { "type": "image", "name": "avatarImage" }, "initials": { "type": "string", "name": "avatarInitials" }, "kind": { "type": "JDSAvatarV2Default.kind", "name": "avatarKind" } }, "ring-arc": { "end": { "type": "number", "name": "progress", "function": true } } }, "a11y": { "container": { "properties": { "aria-label": { "name": "ariaLabel", "value": "Avatar with Progress Activity Ring" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" } } } } } };

const withLogic$26 = (Component) => (props) => {
  const progress = (items) => {
    let percent = items.progress ?? 0;
    if (percent < 0) {
      percent = Math.abs(percent);
    }
    if (percent > 100) {
      percent = percent % 100;
    }
    return percent * (360 * 0.01);
  };
  return /* @__PURE__ */ jsx(Component, { ...props, progress: progress(props) });
};

const Component$28 = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$23;
  const { size = "medium", disabled = false, ariaLabel = "Avatar with Progress Activity Ring", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ size, disabled, ariaLabel, ...rest }, componentTag },
    "JDSAvatarV2ProgressRing",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const AvatarV2ProgressRing = withLogic$26(Component$28);
AvatarV2ProgressRing.displayName = "AvatarV2ProgressRing";
AvatarV2ProgressRing.slotName = "jds_avatar_v2_progress_ring";

const sdl$22 = { "metadata": { "version": "1.0.0", "id": "avatar_segmented_ring-1.0.0", "name": "JDSAvatarV2SegmentedRing", "layerName": "jds_avatar_v2_segmented_ring", "internal": true }, "hierarchy": { "container": [{ "ring-container": ["jds_segmented_ring_item"] }, "jds_avatar_v2_default"] }, "base": { "container": { "flex-direction": "{flexDirection.stack}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}", "opacity": "{opacity.enabled}", "hidden": false }, "ring-container": { "hidden": false, "flex-direction": "{flexDirection.stack}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}", "z-index": 1, "disabled": true }, "jds_segmented_ring_item": { "size": "medium", "z-index": 1 }, "jds_avatar_v2_default": { "size": "medium" } }, "variant": { "size": { "xtra-xtra-large": { "jds_avatar_v2_default": { "size": "xtra-xtra-large" }, "jds_segmented_ring_item": { "size": "xtra-xtra-large" } }, "xtra-large": { "jds_avatar_v2_default": { "size": "xtra-large" }, "jds_segmented_ring_item": { "size": "xtra-large" } }, "large": { "jds_avatar_v2_default": { "size": "large" }, "jds_segmented_ring_item": { "size": "large" } }, "small": { "jds_avatar_v2_default": { "size": "small" }, "jds_segmented_ring_item": { "size": "small" } }, "xtra-small": { "jds_avatar_v2_default": { "size": "xtra-small" }, "jds_segmented_ring_item": { "size": "xtra-small" } } }, "disabled": { "true": { "container": { "disabled": true, "opacity": "{opacity.disabled}" } } } }, "combination": [{}], "combination_config": [[]], "api": { "config": { "size": { "values": ["medium", "xtra-xtra-large", "xtra-large", "large", "small", "xtra-small"] }, "disabled": { "values": [false, true] } }, "data": { "container": { "_ring.startAngle": { "type": "string", "name": "startAngle" }, "_ring.endAngle": { "type": "string", "name": "endAngle" } }, "jds_avatar_v2_default": { "image": { "type": "image", "name": "avatarImage" }, "initials": { "type": "string", "name": "avatarInitials" }, "kind": { "type": "JDSAvatarV2Default.kind", "name": "avatarKind" } }, "ring-container": { "value": { "type": "list", "name": "_ring", "object": { "startAngle": "number", "endAngle": "number" } }, "length": { "type": "number", "name": "count", "doc_description": "It can be used to control count of segments." } }, "jds_segmented_ring_item": { "startAngle": { "type": "string", "name": "ring.startAngle" }, "endAngle": { "type": "string", "name": "ring.endAngle" } } }, "a11y": { "container": { "properties": { "aria-label": { "name": "ariaLabel", "value": "Avatar with Activity Ring" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" } } } } } };

const withLogic$25 = (Component) => (props) => {
  const defaultRingCount = 4;
  const startAngle = (index, len) => {
    if (len === 1)
      return 0;
    const gap = 5;
    const portion = 360 / len;
    return portion * index + gap;
  };
  const endAngle = (index, len) => {
    if (len === 1)
      return 360;
    const gap = 5;
    const portion = 360 / len;
    return portion * (index + 1) - gap;
  };
  const ring = (item) => {
    const rings = [];
    const len = item.count || defaultRingCount;
    for (let index = 0; index < len; index++) {
      rings.push({
        startAngle: startAngle(index, len),
        endAngle: endAngle(index, len)
      });
    }
    return rings;
  };
  return /* @__PURE__ */ jsx(Component, { ...{ ...props, _ring: ring(props) } });
};

const Component$27 = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$22;
  const { size = "medium", disabled = false, ariaLabel = "Avatar with Activity Ring", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ size, disabled, ariaLabel, ...rest }, componentTag },
    "JDSAvatarV2SegmentedRing",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const AvatarV2SegmentedRing = withLogic$25(Component$27);
AvatarV2SegmentedRing.displayName = "AvatarV2SegmentedRing";
AvatarV2SegmentedRing.slotName = "jds_avatar_v2_segmented_ring";

const sdl$21 = { "metadata": { "version": "1.0.0", "name": "JDSAvatarV2Status", "layerName": "jds_avatar_v2_status", "internal": true }, "hierarchy": { "container": ["jds_avatar_v2_default", { "badge-container": ["jds_badge_v2"] }] }, "base": { "container": { "flex-direction": "{flexDirection.stack}", "justify-content": "{justifyContent.start}", "align-items": "{alignItems.start}", "opacity": "{opacity.enabled}", "hidden": false }, "jds_avatar_v2_default": { "size": "medium" }, "badge-container": { "padding-top": "{custom_11}", "padding-left": "{custom_11}", "padding-bottom": "{custom_5}", "z-index": 1, "disabled": true }, "jds_badge_v2": { "kind": "status", "statusKind": "dot", "size": "medium" } }, "variant": { "kind": { "icon": { "jds_badge_v2": { "statusKind": "icon", "size": "medium" }, "badge-container": { "padding-top": "{custom_11}", "padding-left": "{custom_11}", "padding-bottom": "{custom_5}" } }, "text": { "jds_badge_v2": { "statusKind": "label-container", "size": "xtra-small" }, "badge-container": { "padding-top": "{l}", "padding-left": "{base}", "padding-bottom": "{custom_5}" } } }, "size": { "xtra-xtra-large": { "jds_avatar_v2_default": { "size": "xtra-xtra-large" }, "badge-container": { "padding-top": "{custom_7}", "padding-left": "{custom_7}", "padding-bottom": "{custom_5}" }, "jds_badge_v2": { "size": "xtra-xtra-large" } }, "xtra-large": { "jds_avatar_v2_default": { "size": "xtra-large" }, "jds_badge_v2": { "size": "large" }, "badge-container": { "padding-top": "{custom_10}", "padding-left": "{custom_10}", "padding-bottom": "{custom_5}" } }, "large": { "jds_avatar_v2_default": { "size": "large" }, "jds_badge_v2": { "size": "medium" }, "badge-container": { "padding-top": "{l}", "padding-left": "{l}", "padding-bottom": "{custom_5}" } }, "small": { "jds_avatar_v2_default": { "size": "small" }, "jds_badge_v2": { "size": "small" }, "badge-container": { "padding-top": "{custom_13}", "padding-left": "{custom_13}", "padding-bottom": "{custom_5}" } }, "xtra-small": { "jds_avatar_v2_default": { "size": "xtra-small" }, "badge-container": { "padding-top": "{base}", "padding-left": "{base}", "padding-bottom": "{custom_5}" }, "jds_badge_v2": { "size": "xtra-small" } } }, "disabled": { "true": { "container": { "disabled": true, "opacity": "{opacity.disabled}" } } } }, "combination": [{ "icon": { "xtra-xtra-large": { "bottom": { "jds_badge_v2": { "size": "xtra-xtra-large" }, "badge-container": { "padding-top": "{custom_7}", "padding-left": "{custom_7}" } }, "top": { "jds_badge_v2": { "size": "xtra-xtra-large" }, "badge-container": { "padding-bottom": "{custom_7}", "padding-left": "{custom_7}", "padding-top": "{custom_5}" } } }, "xtra-large": { "bottom": { "jds_badge_v2": { "size": "large" }, "badge-container": { "padding-top": "{custom_10}", "padding-left": "{custom_10}" } }, "top": { "jds_badge_v2": { "size": "large" }, "badge-container": { "padding-bottom": "{custom_10}", "padding-left": "{custom_10}", "padding-top": "{custom_5}" } } }, "large": { "bottom": { "jds_badge_v2": { "size": "medium" }, "badge-container": { "padding-top": "{l}", "padding-left": "{l}" } }, "top": { "jds_badge_v2": { "size": "medium" }, "badge-container": { "padding-bottom": "{l}", "padding-left": "{l}", "padding-top": "{custom_5}" } } }, "medium": { "top": { "jds_badge_v2": { "size": "medium" }, "badge-container": { "padding-bottom": "{custom_11}", "padding-left": "{custom_11}", "padding-top": "{custom_5}" } } }, "small": { "bottom": { "jds_badge_v2": { "size": "small" }, "badge-container": { "padding-top": "{custom_13}", "padding-left": "{custom_13}" } }, "top": { "jds_badge_v2": { "size": "small" }, "badge-container": { "padding-bottom": "{custom_13}", "padding-left": "{custom_13}", "padding-top": "{custom_5}" } } }, "xtra-small": { "bottom": { "jds_badge_v2": { "size": "xtra-small" }, "badge-container": { "padding-top": "{base}", "padding-left": "{base}" } }, "top": { "jds_badge_v2": { "size": "xtra-small" }, "badge-container": { "padding-bottom": "{base}", "padding-left": "{base}", "padding-top": "{custom_5}" } } } }, "dot": { "xtra-xtra-large": { "top": { "badge-container": { "padding-bottom": "{custom_7}", "padding-left": "{custom_7}", "padding-top": "{custom_5}" }, "jds_badge_v2": { "size": "xtra-xtra-large" } } }, "xtra-large": { "top": { "jds_badge_v2": { "size": "large" }, "badge-container": { "padding-bottom": "{custom_10}", "padding-left": "{custom_10}", "padding-top": "{custom_5}" } } }, "large": { "top": { "jds_badge_v2": { "size": "medium" }, "badge-container": { "padding-bottom": "{l}", "padding-left": "{l}", "padding-top": "{custom_5}" } } }, "medium": { "top": { "jds_badge_v2": { "size": "medium" }, "badge-container": { "padding-bottom": "{l}", "padding-left": "{custom_11}", "padding-top": "{custom_5}" } } }, "small": { "top": { "jds_badge_v2": { "size": "small" }, "badge-container": { "padding-bottom": "{custom_13}", "padding-left": "{custom_13}", "padding-top": "{custom_5}" } } }, "xtra-small": { "top": { "badge-container": { "padding-bottom": "{base}", "padding-left": "{base}", "padding-top": "{custom_5}" }, "jds_badge_v2": { "size": "xtra-small" } } } }, "text": { "xtra-xtra-large": { "bottom": { "jds_badge_v2": { "size": "medium" }, "badge-container": { "padding-top": "{custom_7}", "padding-left": "{huge}" } }, "top": { "jds_badge_v2": { "size": "medium" }, "badge-container": { "padding-bottom": "{custom_7}", "padding-left": "{huge}", "padding-top": "{custom_5}" } } }, "xtra-large": { "bottom": { "jds_badge_v2": { "size": "xtra-small" }, "badge-container": { "padding-top": "{xl}", "padding-left": "{custom_12}" } }, "top": { "jds_badge_v2": { "size": "xtra-small" }, "badge-container": { "padding-bottom": "{custom_8}", "padding-left": "{custom_12}", "padding-top": "{custom_5}" } } }, "large": { "bottom": { "jds_badge_v2": { "size": "xtra-small" }, "badge-container": { "padding-top": "{custom_10}", "padding-left": "{m}" } }, "top": { "jds_badge_v2": { "size": "xtra-small" }, "badge-container": { "padding-bottom": "{custom_20}", "padding-left": "{m}", "padding-top": "{custom_5}" } } }, "medium": { "top": { "jds_badge_v2": { "size": "xtra-small" }, "badge-container": { "padding-bottom": "{custom_8}", "padding-left": "{base}", "padding-top": "{custom_5}" } } }, "small": { "bottom": { "container": { "hidden": true } }, "top": { "container": { "hidden": true } } }, "xtra-small": { "bottom": { "container": { "hidden": true } }, "top": { "container": { "hidden": true } } } } }], "combination_config": [["kind", "size", "placement"]], "api": { "config": { "kind": { "values": ["dot", "icon", "text"] }, "size": { "values": ["medium", "xtra-xtra-large", "xtra-large", "large", "small", "xtra-small"] }, "placement": { "values": ["bottom", "top"] }, "disabled": { "values": [false, true] } }, "data": { "jds_avatar_v2_default": { "image": { "type": "image", "name": "avatarImage" }, "initials": { "type": "string", "name": "avatarInitials" }, "kind": { "type": "JDSAvatarV2Default.kind", "name": "avatarKind" } }, "jds_badge_v2": { "label": { "type": "string", "name": "label" }, "border": { "type": "boolean", "name": "badgeBorder" }, "status": { "type": "JDSBadgeV2Status.status", "name": "badgeStatus" } } }, "a11y": { "container": { "properties": { "aria-label": { "name": "ariaLabel", "value": "Avatar with Status Badge" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" } } } } } };

const withLogic$24 = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$26 = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$21;
  const { kind = "dot", size = "medium", placement = "bottom", disabled = false, ariaLabel = "Avatar with Status Badge", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ kind, size, placement, disabled, ariaLabel, ...rest }, componentTag },
    "JDSAvatarV2Status",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const AvatarV2Status = withLogic$24(Component$26);
AvatarV2Status.displayName = "AvatarV2Status";
AvatarV2Status.slotName = "jds_avatar_v2_status";

const sdl$20 = { "metadata": { "version": "1.0.0", "id": "badge-1.0.0", "name": "JDSBadge", "layerName": "jds_badge", "description": "A Badge is used to draw attention to new or categorized content elements.", "usage": "Badges are not interactive. They are only used to describe a category or feature of the content they associate with." }, "hierarchy": { "container": ["icon", "text"] }, "base": { "container": { "hidden": false, "flex-direction": "{b_0}", "justify-content": "{b_1}", "align-items": "{b_2}", "padding-top": "{b_3}", "padding-left": "{b_4}", "padding-right": "{b_5}", "padding-bottom": "{b_6}", "gap": "{b_7}", "background-color": "{b_8}", "border-radius": "{b_9}" }, "icon": { "hidden": false, "size": "{b_10}", "color": "{b_11}", "justify-content": "{b_12}", "align-items": "{b_13}" }, "text": { "hidden": false, "font-family": "{b_14}", "font-size": "{b_15}", "line-height": "{b_16}", "letter-spacing": "{b_17}", "font-weight": "{b_18}", "color": "{b_19}", "max-lines": 1, "text-transform": "{b_20}" } }, "variant": { "kind": { "service": { "container": { "border-radius": "{b_21}", "background-color": "{b_22}", "padding-top": "{b_23}", "padding-left": "{b_24}", "padding-right": "{b_25}", "padding-bottom": "{b_26}", "gap": "{b_27}" }, "text": { "font-family": "{b_28}", "font-size": "{b_29}", "line-height": "{b_30}", "letter-spacing": "{b_31}", "font-weight": "{b_32}", "color": "{b_33}", "text-transform": "{badge_variant_kind_service_text_text-transform}" }, "icon": { "size": "{b_34}", "color": "{b_35}" } } }, "_hasIcon": { "false": { "icon": { "hidden": true } } } }, "combination": [{ "normal": { "small": { "container": { "border-radius": "{b_36}" }, "icon": { "size": "{b_37}" }, "text": { "font-family": "{b_38}", "font-size": "{b_39}", "line-height": "{b_40}", "letter-spacing": "{b_41}", "font-weight": "{b_42}" } }, "large": { "container": { "padding-left": "{b_43}", "padding-right": "{b_44}", "gap": "{b_45}" }, "icon": { "size": "{b_46}" }, "text": { "font-family": "{b_47}", "font-size": "{b_48}", "line-height": "{b_49}", "letter-spacing": "{b_50}", "font-weight": "{b_51}" } } } }, { "service": { "false": { "container": { "padding-left": "{b_25}", "padding-right": "{b_25}" } } } }], "combination_config": [["kind", "size"], ["kind", "_hasIcon"]], "api": { "data": { "text": { "value": { "type": "string", "name": "label", "doc_description": "It is used to display label of badge." } }, "icon": { "value": { "type": "icon", "name": "icon", "doc_description": "It displays icon on the left with text." } } }, "config": { "kind": { "values": ["normal", "service"], "doc_description": "It can be used to switch between 2 variants of Badge." }, "size": { "values": ["medium", "small", "large"], "doc_description": "It can be used to adjust the size of Badge." }, "_hasIcon": { "values": [true, false] } }, "a11y": { "container": { "properties": { "aria-label": { "name": "ariaLabel", "prop": "label" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" } } } } } };

const modifyIcon = ({ kind, icon }) => {
  if (kind !== "service" || !icon)
    return icon;
  if (typeof icon === "string") {
    if (!icon.toString().toLowerCase().startsWith("ps")) {
      return void 0;
    }
    return icon;
  }
  return icon;
};
const withLogic$23 = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props, icon: modifyIcon(props) });
};

const Component$25 = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$20;
  const { kind = "normal", size = "medium", ariaLabel = props.label?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ kind, size, ariaLabel, ...rest }, componentTag },
    "JDSBadge",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const Badge = withLogic$23(Component$25);
Badge.displayName = "Badge";
Badge.slotName = "jds_badge";

const sdl$1$ = { "metadata": { "version": "2.0.0", "id": "badge-2.0.0", "name": "JDSBadgeV2", "layerName": "jds_badge_v2" }, "hierarchy": { "container": [{ "children-container": ["children-slot"] }, { "badge-container": ["jds_badge_v2_information", "jds_badge_v2_brand", "jds_badge_v2_notification", "jds_badge_v2_status"] }] }, "base": { "container": { "flex-direction": "{flexDirection.stack}", "justify-content": "{justifyContent.start}", "align-items": "{alignItems.start}", "hidden": false }, "badge-container": { "z-index": 1 }, "jds_badge_v2_information": { "hidden": true, "size": "medium" }, "jds_badge_v2_brand": { "hidden": true, "size": "medium" }, "jds_badge_v2_notification": { "hidden": true, "size": "medium" }, "jds_badge_v2_status": { "hidden": true, "size": "medium" }, "children-container": { "hidden": false, "z-index": 0 } }, "variant": { "kind": { "information": { "jds_badge_v2_information": { "hidden": false } }, "brand": { "jds_badge_v2_brand": { "hidden": false } }, "notification": { "jds_badge_v2_notification": { "hidden": false } }, "status": { "jds_badge_v2_status": { "hidden": false } } }, "placement": { "top": { "container": { "justify-content": "{justifyContent.center}", "align-items": "{alignItems.start}" } }, "top_end": { "container": { "justify-content": "{justifyContent.end}", "align-items": "{alignItems.start}" } }, "bottom_start": { "container": { "justify-content": "{justifyContent.start}", "align-items": "{alignItems.end}" } }, "bottom": { "container": { "justify-content": "{justifyContent.center}", "align-items": "{alignItems.end}" } }, "bottom_end": { "container": { "justify-content": "{justifyContent.end}", "align-items": "{alignItems.end}" } }, "left": { "container": { "justify-content": "{justifyContent.start}", "align-items": "{alignItems.center}" } }, "right": { "container": { "justify-content": "{justifyContent.end}", "align-items": "{alignItems.center}" } } }, "size": { "xtra-small": { "jds_badge_v2_information": { "size": "xtra-small" }, "jds_badge_v2_brand": { "size": "medium" }, "jds_badge_v2_notification": { "size": "xtra-small" }, "jds_badge_v2_status": { "size": "xtra-small" } }, "small": { "jds_badge_v2_information": { "size": "small" }, "jds_badge_v2_brand": { "size": "medium" }, "jds_badge_v2_notification": { "size": "small" }, "jds_badge_v2_status": { "size": "small" } }, "large": { "jds_badge_v2_information": { "size": "large" }, "jds_badge_v2_brand": { "size": "large" }, "jds_badge_v2_notification": { "size": "large" }, "jds_badge_v2_status": { "size": "large" } }, "xtra-large": { "jds_badge_v2_information": { "size": "xtra-large" }, "jds_badge_v2_brand": { "size": "xtra-large" }, "jds_badge_v2_notification": { "size": "xtra-large" }, "jds_badge_v2_status": { "size": "xtra-large" } }, "xtra-xtra-large": { "jds_badge_v2_information": { "size": "xtra-xtra-large" }, "jds_badge_v2_brand": { "size": "xtra-xtra-large" }, "jds_badge_v2_notification": { "size": "xtra-xtra-large" }, "jds_badge_v2_status": { "size": "xtra-xtra-large" } }, "xtra-xtra-xtra-large": { "jds_badge_v2_information": { "size": "xtra-xtra-xtra-large" }, "jds_badge_v2_brand": { "size": "xtra-xtra-xtra-large" }, "jds_badge_v2_notification": { "size": "xtra-xtra-xtra-large" }, "jds_badge_v2_status": { "size": "xtra-xtra-xtra-large" } }, "xtra-xtra-xtra-xtra-large": { "jds_badge_v2_information": { "size": "xtra-xtra-xtra-xtra-large" }, "jds_badge_v2_brand": { "size": "xtra-xtra-xtra-xtra-large" }, "jds_badge_v2_notification": { "size": "xtra-xtra-xtra-xtra-large" }, "jds_badge_v2_status": { "size": "xtra-xtra-xtra-xtra-large" } } }, "_hasChildrenSlot": { "false": { "children-container": { "hidden": true }, "badge-container": { "z-index": 0 } } } }, "api": { "config": { "kind": { "values": ["information", "brand", "notification", "status"] }, "placement": { "values": ["top_start", "top", "top_end", "bottom_start", "bottom", "bottom_end", "left", "right"] }, "size": { "values": ["medium", "xtra-small", "small", "large", "xtra-large", "xtra-xtra-large", "xtra-xtra-xtra-large", "xtra-xtra-xtra-xtra-large"] }, "_hasChildrenSlot": { "values": [true, false] } }, "data": { "badge-container": { "translate-x": { "type": "size", "name": "offsetLeft" }, "translate-y": { "type": "size", "name": "offsetTop" } }, "jds_badge_v2_information": { "label": { "type": "string", "name": "label" }, "icon": { "type": "icon", "name": "icon" }, "background": { "type": "color", "name": "backgroundInfoColor" }, "image": { "type": "image", "name": "image" }, "kind": { "type": "JDSBadgeV2Information.kind", "name": "informationKind" }, "color": { "type": "JDSBadgeV2Information.color", "name": "color" }, "appearance": { "type": "JDSBadgeV2Information.appearance", "name": "appearance" }, "border": { "type": "boolean", "name": "border" } }, "jds_badge_v2_brand": { "label": { "type": "string", "name": "label" }, "image": { "type": "image", "name": "image" }, "kind": { "type": "JDSBadgeV2Brand.kind", "name": "brandKind" }, "emphasis": { "type": "JDSBadgeV2Brand.emphasis", "name": "brandEmphasis" } }, "jds_badge_v2_notification": { "label": { "type": "string", "name": "label" }, "kind": { "type": "JDSBadgeV2Notification.kind", "name": "notificationKind" }, "border": { "type": "boolean", "name": "border" } }, "jds_badge_v2_status": { "label": { "type": "string", "name": "label" }, "kind": { "type": "JDSBadgeV2Status.kind", "name": "statusKind" }, "status": { "type": "JDSBadgeV2Status.status", "name": "status" }, "border": { "type": "boolean", "name": "border" } } }, "children": { "children-slot": { "name": "children", "accepts": ["any"], "max": 1 } }, "a11y": { "jds_badge_v2_information": { "properties": { "ariaLabel": "ariaLabel", "ariaDescribedby": { "name": "ariaDescribedby", "platform": "web,ios" } } }, "jds_badge_v2_brand": { "properties": { "ariaLabel": "ariaLabel", "ariaDescribedby": { "name": "ariaDescribedby", "platform": "web,ios" } } }, "jds_badge_v2_status": { "properties": { "ariaLabel": "ariaLabel", "ariaDescribedby": { "name": "ariaDescribedby", "platform": "web,ios" } } }, "jds_badge_v2_notification": { "properties": { "ariaLabel": "ariaLabel", "ariaDescribedby": { "name": "ariaDescribedby", "platform": "web,ios" } } } } } };

const withLogic$22 = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...{ ...props, _hasChildrenSlot: Boolean(props.children) } });
};

const Component$24 = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1$;
  const { kind = "information", placement = "top_start", size = "medium", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ kind, placement, size, ...rest }, componentTag },
    "JDSBadgeV2",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const BadgeV2 = withLogic$22(Component$24);
BadgeV2.displayName = "BadgeV2";
BadgeV2.slotName = "jds_badge_v2";

const sdl$1_ = { "metadata": { "version": "2.0.0", "id": "badge-brand-2.0.0", "name": "JDSBadgeV2Brand", "layerName": "jds_badge_v2_brand", "internal": true }, "hierarchy": { "container": [{ "image-container": ["brand-jds_image"] }, "label-jds-text"] }, "base": { "container": { "flex-direction": "{b_0}", "justify-content": "{b_1}", "align-items": "{b_2}", "background-color": "{b_3}", "gap": "{b_4}", "border-radius": "{b_5}", "padding-left": "{b_6}", "padding-right": "{b_7}", "padding-top": "{b_8}", "padding-bottom": "{b_9}" }, "image-container": { "border-radius": "{b_10}", "size": "{b_11}", "overflow": "hidden" }, "brand-jds_image": { "aspectRatio": "round", "roundedCorner": false }, "label-jds-text": { "font-family": "{bodySBold}", "color": "{global.white}", "font-size": "{bodySBold}", "line-height": "{bodySBold}", "letter-spacing": "{bodySBold}", "font-weight": "{bodySBold}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": false } }, "variant": { "kind": { "circle": { "container": { "padding-left": "{b_40}", "padding-right": "{b_40}", "padding-top": "{b_40}", "padding-bottom": "{b_40}" }, "label-jds-text": { "hidden": true } }, "square": { "container": { "border-radius": "{b_13}", "padding-left": "{b_41}", "padding-right": "{b_41}", "padding-top": "{b_41}", "padding-bottom": "{b_41}" }, "image-container": { "border-radius": "{b_12}" }, "brand-jds_image": { "aspectRatio": "square" }, "label-jds-text": { "hidden": true } }, "square-label": { "container": { "border-radius": "{b_15}" }, "image-container": { "border-radius": "{b_16}" }, "brand-jds_image": { "aspectRatio": "square" } } }, "size": { "medium": { "container": { "padding-left": "{b_17}", "padding-right": "{b_18}", "padding-top": "{b_19}", "padding-bottom": "{b_20}" }, "image-container": { "size": "{b_21}" }, "label-jds-text": { "font-family": "{bodyXxsBold}", "font-size": "{bodyXxsBold}", "line-height": "{bodyXxsBold}", "letter-spacing": "{bodyXxsBold}", "font-weight": "{bodyXxsBold}" } }, "large": { "container": { "padding-left": "{b_22}", "padding-right": "{b_23}", "padding-top": "{b_24}", "padding-bottom": "{b_25}" }, "image-container": { "size": "{b_26}" }, "label-jds-text": { "font-family": "{bodyXxsBold}", "font-size": "{bodyXxsBold}", "line-height": "{bodyXxsBold}", "letter-spacing": "{bodyXxsBold}", "font-weight": "{bodyXxsBold}" } }, "xtra-large": { "container": { "padding-left": "{b_27}", "padding-right": "{b_28}", "padding-top": "{b_29}", "padding-bottom": "{b_30}" }, "image-container": { "size": "{b_31}" }, "label-jds-text": { "font-family": "{bodyXsBold}", "font-size": "{bodyXsBold}", "line-height": "{bodyXsBold}", "letter-spacing": "{bodyXsBold}", "font-weight": "{bodyXsBold}" } }, "xtra-xtra-large": { "container": { "padding-left": "{b_32}", "padding-right": "{b_33}", "padding-top": "{b_34}", "padding-bottom": "{b_35}" }, "image-container": { "size": "{b_36}" }, "label-jds-text": { "font-family": "{bodyXsBold}", "font-size": "{bodyXsBold}", "line-height": "{bodyXsBold}", "letter-spacing": "{bodyXsBold}", "font-weight": "{bodyXsBold}" } }, "xtra-xtra-xtra-xtra-large": { "container": { "gap": "{b_37}" }, "image-container": { "size": "{b_38}" }, "label-jds-text": { "font-family": "{bodyLBold}", "font-size": "{bodyLBold}", "line-height": "{bodyLBold}", "letter-spacing": "{bodyLBold}", "font-weight": "{bodyLBold}" } } }, "emphasis": { "bold": { "container": { "background-color": "{b_39}" } } } }, "combination": [{ "circle": { "medium": { "container": { "padding-left": "{b_42}", "padding-right": "{b_42}", "padding-top": "{b_42}", "padding-bottom": "{b_42}" }, "image-container": { "size": "{b_43}" } }, "large": { "container": { "padding-left": "{b_44}", "padding-right": "{b_44}", "padding-top": "{b_44}", "padding-bottom": "{b_44}" }, "image-container": { "size": "{b_45}" } }, "xtra-large": { "container": { "padding-left": "{b_46}", "padding-right": "{b_46}", "padding-top": "{b_46}", "padding-bottom": "{b_46}" }, "image-container": { "size": "{b_47}" } }, "xtra-xtra-large": { "container": { "padding-left": "{b_48}", "padding-right": "{b_48}", "padding-top": "{b_48}", "padding-bottom": "{b_48}" }, "image-container": { "size": "{b_49}" } }, "xtra-xtra-xtra-large": { "image-container": { "size": "{b_51}" } }, "xtra-xtra-xtra-xtra-large": { "image-container": { "size": "{b_53}" } } }, "square": { "medium": { "container": { "border-radius": "{b_54}", "padding-left": "{b_55}", "padding-right": "{b_55}", "padding-top": "{b_55}", "padding-bottom": "{b_55}" }, "image-container": { "size": "{b_56}", "border-radius": "{b_57}" } }, "large": { "container": { "border-radius": "{b_58}", "padding-left": "{b_59}", "padding-right": "{b_59}", "padding-top": "{b_59}", "padding-bottom": "{b_59}" }, "image-container": { "size": "{b_60}", "border-radius": "{b_61}" } }, "xtra-large": { "container": { "border-radius": "{b_62}", "padding-left": "{b_63}", "padding-right": "{b_63}", "padding-top": "{b_63}", "padding-bottom": "{b_63}" }, "image-container": { "size": "{b_64}", "border-radius": "{b_65}" } }, "xtra-xtra-large": { "container": { "border-radius": "{b_66}", "padding-left": "{b_67}", "padding-right": "{b_67}", "padding-top": "{b_67}", "padding-bottom": "{b_67}" }, "image-container": { "size": "{b_68}", "border-radius": "{b_69}" } }, "xtra-xtra-xtra-large": { "image-container": { "size": "{b_70}" } }, "xtra-xtra-xtra-xtra-large": { "image-container": { "size": "{b_71}" } } }, "square-label": { "medium": { "container": { "border-radius": "{b_73}" } }, "large": { "container": { "border-radius": "{b_74}", "padding-right": "{b_75}" } }, "xtra-large": { "container": { "border-radius": "{b_76}", "padding-right": "{b_77}" } }, "xtra-xtra-large": { "container": { "border-radius": "{b_81}", "padding-left": "{b_78}" }, "image-container": { "size": "{b_79}" } }, "xtra-xtra-xtra-large": { "container": { "padding-right": "{b_80}" } }, "xtra-xtra-xtra-xtra-large": { "container": { "padding-right": "{b_82}" }, "image-container": { "border-radius": "{b_72}" } } } }], "combination_config": [["kind", "size"]], "api": { "config": { "kind": { "values": ["circle-label", "circle", "square", "square-label"] }, "size": { "values": ["xtra-xtra-xtra-large", "medium", "large", "xtra-large", "xtra-xtra-large", "xtra-xtra-xtra-xtra-large"] }, "emphasis": { "values": ["light", "bold"] } }, "data": { "brand-jds_image": { "src": { "type": "image", "name": "image" } }, "label-jds-text": { "value": { "type": "string", "name": "label" } } }, "a11y": { "container": { "properties": { "aria-label": { "name": "ariaLabel", "prop": "label" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" } } } } } };

const withLogic$21 = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$23 = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1_;
  const { kind = "circle-label", size = "xtra-xtra-xtra-large", emphasis = "light", ariaLabel = props.label?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ kind, size, emphasis, ariaLabel, ...rest }, componentTag },
    "JDSBadgeV2Brand",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const BadgeV2Brand = withLogic$21(Component$23);
BadgeV2Brand.displayName = "BadgeV2Brand";
BadgeV2Brand.slotName = "jds_badge_v2_brand";

const sdl$1Z = { "metadata": { "version": "2.0.0", "id": "badge-information-2.0.0", "name": "JDSBadgeV2Information", "layerName": "jds_badge_v2_information", "internal": true }, "hierarchy": { "container": [{ "inner-container": [{ "image-container": ["jds_image"] }, { "icon-container": ["icon"] }, "label-jds-text"] }] }, "base": { "container": { "border-radius": "{b_0}" }, "inner-container": { "flex-direction": "{b_2}", "justify-content": "{b_3}", "align-items": "{b_4}", "background-color": "{b_5}", "gap": "{b_6}", "border-radius": "{b_7}", "padding-left": "{b_8}", "padding-right": "{b_9}", "padding-top": "{b_10}", "padding-bottom": "{b_11}" }, "icon-container": { "hidden": false, "show": true, "flex-direction": "{b_12}", "justify-content": "{b_13}", "align-items": "{b_14}", "size": "{b_15}" }, "icon": { "color": "{b_16}", "size": "{b_17}" }, "image-container": { "hidden": true, "show": true, "flex-direction": "{b_18}", "justify-content": "{b_19}", "align-items": "{b_20}", "size": "{b_21}", "overflow": "hidden" }, "jds_image": { "aspectRatio": "round" }, "label-jds-text": { "font-family": "{bodyXsBold}", "color": "{primaryBackground}", "font-size": "{bodyXsBold}", "line-height": "{bodyXsBold}", "letter-spacing": "{bodyXsBold}", "font-weight": "{bodyXsBold}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": false } }, "variant": { "kind": { "label": { "icon-container": { "hidden": true } }, "label-image": { "icon-container": { "hidden": true }, "image-container": { "hidden": false } }, "icon": { "label-jds-text": { "hidden": true } }, "icon-circle": { "label-jds-text": { "hidden": true } }, "icon-square": { "label-jds-text": { "hidden": true } } }, "size": { "xtra-small": { "inner-container": { "padding-right": "{b_25}", "padding-top": "{b_26}", "padding-bottom": "{b_27}" }, "icon-container": { "size": "{b_28}" }, "icon": { "size": "{b_29}" }, "image-container": { "size": "{b_30}" }, "label-jds-text": { "font-family": "{bodyXxsBold}", "font-size": "{bodyXxsBold}", "line-height": "{bodyXxsBold}", "letter-spacing": "{bodyXxsBold}", "font-weight": "{bodyXxsBold}" } }, "small": { "inner-container": { "padding-right": "{b_31}", "padding-top": "{b_32}", "padding-bottom": "{b_33}" }, "icon-container": { "size": "{b_34}" }, "icon": { "size": "{b_35}" }, "image-container": { "size": "{b_36}" }, "label-jds-text": { "font-family": "{bodyXxsBold}", "font-size": "{bodyXxsBold}", "line-height": "{bodyXxsBold}", "letter-spacing": "{bodyXxsBold}", "font-weight": "{bodyXxsBold}" } }, "medium": { "inner-container": { "padding-right": "{b_37}", "padding-top": "{b_38}", "padding-bottom": "{b_39}" }, "icon-container": { "size": "{b_40}" }, "icon": { "size": "{b_41}" }, "image-container": { "size": "{b_42}" }, "label-jds-text": { "font-family": "{bodyXxsBold}", "font-size": "{bodyXxsBold}", "line-height": "{bodyXxsBold}", "letter-spacing": "{bodyXxsBold}", "font-weight": "{bodyXxsBold}" } }, "large": { "label-jds-text": { "font-family": "{bodyXxsBold}", "font-size": "{bodyXxsBold}", "line-height": "{bodyXxsBold}", "letter-spacing": "{bodyXxsBold}", "font-weight": "{bodyXxsBold}" } }, "xtra-xtra-large": { "inner-container": { "padding-left": "{b_43}", "padding-top": "{b_44}", "padding-bottom": "{b_45}" } }, "xtra-xtra-xtra-large": { "container": { "border-radius": "{b_46}" }, "inner-container": { "border-radius": "{b_47}", "padding-left": "{b_48}", "padding-top": "{b_49}", "padding-bottom": "{b_50}" }, "icon-container": { "size": "{b_51}" }, "icon": { "size": "{b_52}" }, "image-container": { "size": "{b_53}" }, "label-jds-text": { "font-family": "{bodySBold}", "font-size": "{bodySBold}", "line-height": "{bodySBold}", "letter-spacing": "{bodySBold}", "font-weight": "{bodySBold}" } }, "xtra-xtra-xtra-xtra-large": { "container": { "border-radius": "{b_54}" }, "inner-container": { "border-radius": "{b_55}", "padding-left": "{b_56}", "padding-right": "{b_57}", "padding-top": "{b_58}", "padding-bottom": "{b_59}" }, "icon-container": { "size": "{b_60}" }, "icon": { "size": "{b_61}" }, "image-container": { "size": "{b_62}" }, "label-jds-text": { "font-family": "{bodyLBold}", "font-size": "{bodyLBold}", "line-height": "{bodyLBold}", "letter-spacing": "{bodyLBold}", "font-weight": "{bodyLBold}" } } }, "color": { "secondary": { "inner-container": { "background-color": "{b_22}" }, "icon-container": { "background-color": "{b_23}" }, "icon": { "color": "{b_24}" } }, "positive": { "inner-container": { "background-color": "{b_63}" }, "icon-container": { "background-color": "{b_64}" } }, "warning": { "inner-container": { "background-color": "{b_65}" }, "icon-container": { "background-color": "{b_66}" } }, "negative": { "inner-container": { "background-color": "{b_67}" }, "icon-container": { "background-color": "{b_68}" } }, "neutral": { "inner-container": { "background-color": "{b_69}" }, "icon-container": { "background-color": "{b_70}" } } }, "border": { "true": { "container": { "background-color": "{b_72}", "padding-top": "{b_71}", "padding-bottom": "{b_71}", "padding-left": "{b_71}", "padding-right": "{b_71}" } } } }, "combination": [{ "icon": { "xtra-small": { "inner-container": { "padding-left": "{b_73}", "padding-right": "{b_73}", "padding-top": "{b_73}", "padding-bottom": "{b_73}" }, "icon-container": { "size": "{b_74}" }, "icon": { "size": "{b_75}" } }, "small": { "inner-container": { "padding-left": "{b_76}", "padding-right": "{b_76}", "padding-top": "{b_76}", "padding-bottom": "{b_76}" }, "icon-container": { "size": "{b_77}" }, "icon": { "size": "{b_78}" } }, "medium": { "inner-container": { "padding-left": "{b_79}", "padding-right": "{b_79}", "padding-top": "{b_79}", "padding-bottom": "{b_79}" }, "icon-container": { "size": "{b_80}" }, "icon": { "size": "{b_81}" } }, "large": { "inner-container": { "padding-left": "{b_82}", "padding-right": "{b_82}", "padding-top": "{b_82}", "padding-bottom": "{b_82}" }, "icon-container": { "size": "{b_87}" }, "icon": { "size": "{b_88}" } }, "xtra-large": { "inner-container": { "padding-left": "{b_83}", "padding-right": "{b_83}", "padding-top": "{b_83}", "padding-bottom": "{b_83}" }, "icon-container": { "size": "{b_89}" }, "icon": { "size": "{b_90}" } }, "xtra-xtra-large": { "inner-container": { "padding-left": "{b_84}", "padding-right": "{b_84}", "padding-top": "{b_84}", "padding-bottom": "{b_84}" }, "icon-container": { "size": "{b_91}" }, "icon": { "size": "{b_92}" } }, "xtra-xtra-xtra-large": { "inner-container": { "padding-left": "{b_85}", "padding-right": "{b_85}", "padding-top": "{b_85}", "padding-bottom": "{b_85}" }, "icon-container": { "size": "{b_93}" }, "icon": { "size": "{b_94}" } }, "xtra-xtra-xtra-xtra-large": { "inner-container": { "padding-left": "{b_86}", "padding-right": "{b_86}", "padding-top": "{b_86}", "padding-bottom": "{b_86}" }, "icon-container": { "size": "{b_95}" }, "icon": { "size": "{b_96}" } } }, "icon-circle": { "xtra-small": { "container": { "border-radius": "{b_97}" }, "inner-container": { "border-radius": "{b_98}", "padding-left": "{b_99}", "padding-right": "{b_99}", "padding-top": "{b_99}", "padding-bottom": "{b_99}" }, "icon-container": { "size": "{b_100}", "border-radius": "{b_101}" }, "icon": { "size": "{b_102}" } }, "small": { "container": { "border-radius": "{b_103}" }, "inner-container": { "border-radius": "{b_104}", "padding-left": "{b_105}", "padding-right": "{b_105}", "padding-top": "{b_105}", "padding-bottom": "{b_105}" }, "icon-container": { "size": "{b_106}", "border-radius": "{b_107}" }, "icon": { "size": "{b_108}" } }, "medium": { "container": { "border-radius": "{b_109}" }, "inner-container": { "border-radius": "{b_109}", "padding-left": "{b_110}", "padding-right": "{b_110}", "padding-top": "{b_110}", "padding-bottom": "{b_110}" }, "icon-container": { "size": "{b_111}", "border-radius": "{b_112}" }, "icon": { "size": "{b_113}" } }, "large": { "container": { "border-radius": "{b_114}" }, "inner-container": { "border-radius": "{b_114}", "padding-left": "{b_115}", "padding-right": "{b_115}", "padding-top": "{b_115}", "padding-bottom": "{b_115}" }, "icon-container": { "size": "{b_116}", "border-radius": "{b_117}" }, "icon": { "size": "{b_118}" } }, "xtra-large": { "container": { "border-radius": "{b_119}" }, "inner-container": { "border-radius": "{b_119}", "padding-left": "{b_120}", "padding-right": "{b_120}", "padding-top": "{b_120}", "padding-bottom": "{b_120}" }, "icon-container": { "size": "{b_121}", "border-radius": "{b_122}" }, "icon": { "size": "{b_123}" } }, "xtra-xtra-large": { "container": { "border-radius": "{b_124}" }, "inner-container": { "border-radius": "{b_124}", "padding-left": "{b_125}", "padding-right": "{b_125}", "padding-top": "{b_125}", "padding-bottom": "{b_125}" }, "icon-container": { "size": "{b_126}", "border-radius": "{b_127}" }, "icon": { "size": "{b_128}" } }, "xtra-xtra-xtra-large": { "container": { "border-radius": "{b_129}" }, "inner-container": { "border-radius": "{b_129}", "padding-left": "{b_130}", "padding-right": "{b_130}", "padding-top": "{b_130}", "padding-bottom": "{b_130}" }, "icon-container": { "size": "{b_131}", "border-radius": "{b_132}" }, "icon": { "size": "{b_133}" } }, "xtra-xtra-xtra-xtra-large": { "container": { "border-radius": "{b_134}" }, "inner-container": { "border-radius": "{b_134}", "padding-left": "{b_135}", "padding-right": "{b_135}", "padding-top": "{b_135}", "padding-bottom": "{b_135}" }, "icon-container": { "size": "{b_136}", "border-radius": "{b_137}" }, "icon": { "size": "{b_138}" } } }, "icon-square": { "xtra-small": { "container": { "border-radius": "{b_139}" }, "inner-container": { "border-radius": "{b_140}", "padding-left": "{b_141}", "padding-right": "{b_141}", "padding-top": "{b_141}", "padding-bottom": "{b_141}" }, "icon-container": { "size": "{b_142}", "border-radius": "{b_143}" }, "icon": { "size": "{b_144}" } }, "small": { "container": { "border-radius": "{b_145}" }, "inner-container": { "border-radius": "{b_145}", "padding-left": "{b_146}", "padding-right": "{b_146}", "padding-top": "{b_146}", "padding-bottom": "{b_146}" }, "icon-container": { "size": "{b_147}", "border-radius": "{b_148}" }, "icon": { "size": "{b_149}" } }, "medium": { "container": { "border-radius": "{b_150}" }, "inner-container": { "border-radius": "{b_150}", "padding-left": "{b_151}", "padding-right": "{b_151}", "padding-top": "{b_151}", "padding-bottom": "{b_151}" }, "icon-container": { "size": "{b_152}", "border-radius": "{b_153}" }, "icon": { "size": "{b_154}" } }, "large": { "container": { "border-radius": "{b_155}" }, "inner-container": { "border-radius": "{b_155}", "padding-left": "{b_156}", "padding-right": "{b_156}", "padding-top": "{b_156}", "padding-bottom": "{b_156}" }, "icon-container": { "size": "{b_157}", "border-radius": "{b_158}" }, "icon": { "size": "{b_159}" } }, "xtra-large": { "container": { "border-radius": "{b_160}" }, "inner-container": { "border-radius": "{b_160}", "padding-left": "{b_161}", "padding-right": "{b_161}", "padding-top": "{b_161}", "padding-bottom": "{b_161}" }, "icon-container": { "size": "{b_162}", "border-radius": "{b_163}" }, "icon": { "size": "{b_164}" } }, "xtra-xtra-large": { "container": { "border-radius": "{b_165}" }, "inner-container": { "border-radius": "{b_165}", "padding-left": "{b_166}", "padding-right": "{b_166}", "padding-top": "{b_166}", "padding-bottom": "{b_166}" }, "icon-container": { "size": "{b_167}", "border-radius": "{b_168}" }, "icon": { "size": "{b_169}" } }, "xtra-xtra-xtra-large": { "container": { "border-radius": "{b_170}" }, "inner-container": { "border-radius": "{b_170}", "padding-left": "{b_171}", "padding-right": "{b_171}", "padding-top": "{b_171}", "padding-bottom": "{b_171}" }, "icon-container": { "size": "{b_172}", "border-radius": "{b_173}" }, "icon": { "size": "{b_174}" } }, "xtra-xtra-xtra-xtra-large": { "container": { "border-radius": "{b_175}" }, "inner-container": { "border-radius": "{b_175}", "padding-left": "{b_176}", "padding-right": "{b_176}", "padding-top": "{b_176}", "padding-bottom": "{b_176}" }, "icon-container": { "size": "{b_177}", "border-radius": "{b_173}" }, "icon": { "size": "{b_179}" } } }, "label": { "xtra-small": { "inner-container": { "height": "{b_180}" } }, "small": { "inner-container": { "height": "{b_181}" } }, "medium": { "inner-container": { "height": "{b_182}" } }, "large": { "inner-container": { "height": "{b_183}", "padding-left": "{b_184}" } }, "xtra-large": { "inner-container": { "height": "{b_185}", "padding-left": "{b_186}" } }, "xtra-xtra-large": { "inner-container": { "height": "{b_187}" } }, "xtra-xtra-xtra-large": { "inner-container": { "height": "{b_188}" } }, "xtra-xtra-xtra-xtra-large": { "inner-container": { "height": "{b_189}", "padding-left": "{b_190}" } } }, "label-icon": { "xtra-small": { "inner-container": { "height": "{b_201}" } }, "small": { "inner-container": { "height": "{b_201}" } }, "medium": { "inner-container": { "height": "{b_201}" } }, "large": { "inner-container": { "height": "{b_202}" } }, "xtra-large": { "inner-container": { "height": "{b_203}" } }, "xtra-xtra-large": { "inner-container": { "height": "{b_204}" } }, "xtra-xtra-xtra-large": { "inner-container": { "height": "{b_205}" } }, "xtra-xtra-xtra-xtra-large": { "inner-container": { "height": "{b_206}" } } }, "label-image": { "xtra-small": { "inner-container": { "height": "{b_201}" } }, "small": { "inner-container": { "height": "{b_201}" } }, "medium": { "inner-container": { "height": "{b_201}" } }, "large": { "inner-container": { "height": "{b_202}" } }, "xtra-large": { "inner-container": { "height": "{b_203}" } }, "xtra-xtra-large": { "inner-container": { "height": "{b_204}" } }, "xtra-xtra-xtra-large": { "inner-container": { "height": "{b_205}" } }, "xtra-xtra-xtra-xtra-large": { "inner-container": { "height": "{b_206}" } } } }, { "subtle": { "default": { "inner-container": { "background-color": "{b_207}" }, "icon-container": { "background-color": "{b_208}" }, "icon": { "color": "{b_209}" }, "label-jds-text": { "color": "{sparkle60}" } }, "secondary": { "inner-container": { "background-color": "{b_267}" }, "icon-container": { "background-color": "{b_268}" }, "icon": { "color": "{b_269}" }, "label-jds-text": { "color": "{secondary60}" } }, "positive": { "inner-container": { "background-color": "{b_210}" }, "icon-container": { "background-color": "{b_211}" }, "icon": { "color": "{b_212}" }, "label-jds-text": { "color": "{feedbackSuccess50}" } }, "warning": { "inner-container": { "background-color": "{b_213}" }, "icon-container": { "background-color": "{b_214}" }, "icon": { "color": "{b_215}" }, "label-jds-text": { "color": "{feedbackWarning50}" } }, "negative": { "inner-container": { "background-color": "{b_216}" }, "icon-container": { "background-color": "{b_217}" }, "icon": { "color": "{b_218}" }, "label-jds-text": { "color": "{feedbackError50}" } }, "neutral": { "inner-container": { "background-color": "{b_219}" }, "icon-container": { "background-color": "{b_220}" }, "icon": { "color": "{b_221}" }, "label-jds-text": { "color": "{primaryGrey80}" } } } }, { "icon": { "bold": { "default": { "inner-container": { "background-color": "{b_222}" }, "icon-container": { "background-color": "{b_223}" }, "icon": { "color": "{b_224}" } }, "secondary": { "inner-container": { "background-color": "{b_264}" }, "icon-container": { "background-color": "{b_265}" }, "icon": { "color": "{b_266}" } }, "positive": { "inner-container": { "background-color": "{b_225}" }, "icon-container": { "background-color": "{b_226}" }, "icon": { "color": "{b_227}" } }, "warning": { "inner-container": { "background-color": "{b_228}" }, "icon-container": { "background-color": "{b_229}" }, "icon": { "color": "{b_230}" } }, "negative": { "inner-container": { "background-color": "{b_231}" }, "icon-container": { "background-color": "{b_232}" }, "icon": { "color": "{b_233}" } }, "neutral": { "inner-container": { "background-color": "{b_234}" }, "icon-container": { "background-color": "{b_235}" }, "icon": { "color": "{b_236}" } } }, "subtle": { "default": { "inner-container": { "background-color": "{b_237}" }, "icon-container": { "background-color": "{b_238}" }, "icon": { "color": "{b_239}" } }, "secondary": { "inner-container": { "background-color": "{b_261}" }, "icon-container": { "background-color": "{b_262}" }, "icon": { "color": "{b_263}" } }, "positive": { "inner-container": { "background-color": "{b_240}" }, "icon-container": { "background-color": "{b_241}" }, "icon": { "color": "{b_242}" } }, "warning": { "inner-container": { "background-color": "{b_243}" }, "icon-container": { "background-color": "{b_244}" }, "icon": { "color": "{b_245}" } }, "negative": { "inner-container": { "background-color": "{b_246}" }, "icon-container": { "background-color": "{b_247}" }, "icon": { "color": "{b_248}" } }, "neutral": { "inner-container": { "background-color": "{b_249}" }, "icon-container": { "background-color": "{b_250}" }, "icon": { "color": "{b_251}" } } } } }, { "true": { "xtra-small": { "container": { "padding-left": "{b_252}", "padding-right": "{b_252}", "padding-top": "{b_252}", "padding-bottom": "{b_252}" } }, "small": { "container": { "padding-left": "{b_253}", "padding-right": "{b_253}", "padding-top": "{b_253}", "padding-bottom": "{b_253}" } }, "medium": { "container": { "padding-left": "{b_254}", "padding-right": "{b_254}", "padding-top": "{b_254}", "padding-bottom": "{b_254}" } }, "large": { "container": { "padding-left": "{b_255}", "padding-right": "{b_255}", "padding-top": "{b_255}", "padding-bottom": "{b_255}" } }, "xtra-xtra-large": { "container": { "padding-left": "{b_256}", "padding-right": "{b_256}", "padding-top": "{b_256}", "padding-bottom": "{b_256}" } }, "xtra-xtra-xtra-large": { "container": { "padding-left": "{b_257}", "padding-right": "{b_257}", "padding-top": "{b_257}", "padding-bottom": "{b_257}" } }, "xtra-xtra-xtra-xtra-large": { "container": { "padding-left": "{b_258}", "padding-right": "{b_258}", "padding-top": "{b_258}", "padding-bottom": "{b_258}" } } } }, { "true": { "icon": { "container": { "background-color": "{b_270}", "padding-top": "{b_271}", "padding-bottom": "{b_271}", "padding-left": "{b_271}", "padding-right": "{b_271}" } } } }, { "true": { "icon-circle": { "large": { "container": { "padding-left": "{b_259}", "padding-right": "{b_259}", "padding-top": "{b_259}", "padding-bottom": "{b_259}" } } }, "icon-square": { "large": { "container": { "padding-left": "{b_260}", "padding-right": "{b_260}", "padding-top": "{b_260}", "padding-bottom": "{b_260}" } } } } }], "combination_config": [["kind", "size"], ["appearance", "color"], ["kind", "appearance", "color"], ["border", "size"], ["border", "kind"], ["border", "kind", "size"]], "api": { "config": { "kind": { "values": ["label-icon", "label-image", "label", "icon", "icon-circle", "icon-square"] }, "size": { "values": ["xtra-large", "small", "xtra-small", "medium", "large", "xtra-xtra-large", "xtra-xtra-xtra-large", "xtra-xtra-xtra-xtra-large"] }, "color": { "values": ["default", "secondary", "positive", "warning", "negative", "neutral"] }, "appearance": { "values": ["bold", "subtle"] }, "border": { "values": [false, true] } }, "data": { "jds_image": { "src": { "type": "image", "name": "image" } }, "icon": { "value": { "type": "icon", "name": "icon" } }, "inner-container": { "background-color": { "type": "color", "name": "background" } }, "icon-container": { "background-color": { "type": "color", "name": "background" } }, "label-jds-text": { "value": { "type": "string", "name": "label" } } }, "a11y": { "container": { "properties": { "aria-label": { "name": "ariaLabel", "prop": "label" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" } } } } } };

const withLogic$20 = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$22 = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1Z;
  const { kind = "label-icon", size = "xtra-large", color = "default", appearance = "bold", border = false, ariaLabel = props.label?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ kind, size, color, appearance, border, ariaLabel, ...rest }, componentTag },
    "JDSBadgeV2Information",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const BadgeV2Information = withLogic$20(Component$22);
BadgeV2Information.displayName = "BadgeV2Information";
BadgeV2Information.slotName = "jds_badge_v2_information";

const sdl$1Y = { "metadata": { "version": "2.0.0", "id": "badge-notification-2.0.0", "name": "JDSBadgeV2Notification", "layerName": "jds_badge_v2_notification", "internal": true }, "hierarchy": { "outer-container": [{ "container": [{ "inner-container": ["label-jds-text", "symbol-jds-text"] }] }] }, "base": { "outer-container": { "width": 10, "height": 10, "justify-content": "{b_1}", "align-items": "{b_2}", "background-color": "{global.transparent}", "border-radius": "{b_6}" }, "container": { "width": 8, "height": 8, "background-color": "{b_8}", "justify-content": "{b_1}", "align-items": "{b_2}", "border-radius": "{b_6}", "padding-left": "{b_7}", "padding-right": "{b_7}", "padding-top": "{b_7}", "padding-bottom": "{b_7}" }, "inner-container": { "flex-direction": "{b_0}", "justify-content": "{b_1}", "align-items": "{b_2}", "width": 7, "height": 7, "background-color": "{b_5}", "border-radius": "{b_6}" }, "label-jds-text": { "font-family": "{bodyXxsBold}", "color": "{global.white}", "font-size": "{bodyXxsBold}", "line-height": "{bodyXxsBold}", "letter-spacing": "{bodyXxsBold}", "font-weight": "{bodyXxsBold}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": true }, "symbol-jds-text": { "font-family": "{bodyXxsBold}", "color": "{global.white}", "font-size": "{bodyXxsBold}", "line-height": "{bodyXxsBold}", "letter-spacing": "{bodyXxsBold}", "font-weight": "{bodyXxsBold}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "value": "+", "hidden": true, "text": "+" } }, "variant": { "kind": { "dot": { "inner-container": { "show": true } }, "number": { "label-jds-text": { "hidden": false } }, "number-symbol": { "outer-container": { "border-radius": 5, "width": "", "height": 18, "padding-left": 1, "padding-right": 1 }, "container": { "border-radius": "{b_49}", "width": "", "height": 16, "padding-left": 1, "padding-right": 1 }, "inner-container": { "width": "", "height": 14, "border-radius": "{b_49}", "padding-left": 3, "padding-right": 3 }, "label-jds-text": { "hidden": false }, "symbol-jds-text": { "hidden": false } } }, "size": { "small": { "outer-container": { "width": 14, "height": 14 }, "container": { "width": 12, "height": 12 }, "inner-container": { "width": 10, "height": 10 }, "label-jds-text": { "trimLinePadding": "both" }, "symbol-jds-text": { "trimLinePadding": "both" } }, "medium": { "outer-container": { "width": 18, "height": 18 }, "container": { "width": 16, "height": 16 }, "inner-container": { "width": 13, "height": 13 }, "label-jds-text": { "trimLinePadding": "both" }, "symbol-jds-text": { "trimLinePadding": "both" } }, "large": { "outer-container": { "width": 22, "height": 22 }, "container": { "width": 20, "height": 20 }, "inner-container": { "width": 17, "height": 17 } }, "xtra-large": { "outer-container": { "width": 26, "height": 26 }, "container": { "width": 24, "height": 24 }, "inner-container": { "width": 20, "height": 20 }, "label-jds-text": { "font-family": "{bodyXsBold}", "font-size": "{bodyXsBold}", "line-height": "{bodyXsBold}", "letter-spacing": "{bodyXsBold}", "font-weight": "{bodyXsBold}" }, "symbol-jds-text": { "font-family": "{bodyXsBold}", "font-size": "{bodyXsBold}", "line-height": "{bodyXsBold}", "letter-spacing": "{bodyXsBold}", "font-weight": "{bodyXsBold}" } }, "xtra-xtra-large": { "outer-container": { "width": 30, "height": 30 }, "container": { "width": 28, "height": 28 }, "inner-container": { "width": 24, "height": 24 }, "label-jds-text": { "font-family": "{bodyXsBold}", "font-size": "{bodyXsBold}", "line-height": "{bodyXsBold}", "letter-spacing": "{bodyXsBold}", "font-weight": "{bodyXsBold}" }, "symbol-jds-text": { "font-family": "{bodyXsBold}", "font-size": "{bodyXsBold}", "line-height": "{bodyXsBold}", "letter-spacing": "{bodyXsBold}", "font-weight": "{bodyXsBold}" } }, "xtra-xtra-xtra-large": { "outer-container": { "width": 34, "height": 34 }, "container": { "width": 32, "height": 32 }, "inner-container": { "width": 27, "height": 27 }, "label-jds-text": { "font-family": "{bodySBold}", "font-size": "{bodySBold}", "line-height": "{bodySBold}", "letter-spacing": "{bodySBold}", "font-weight": "{bodySBold}" }, "symbol-jds-text": { "font-family": "{bodySBold}", "font-size": "{bodySBold}", "line-height": "{bodySBold}", "letter-spacing": "{bodySBold}", "font-weight": "{bodySBold}" } }, "xtra-xtra-xtra-xtra-large": { "outer-container": { "width": 42, "height": 42 }, "container": { "width": 40, "height": 40 }, "inner-container": { "width": 34, "height": 34 }, "label-jds-text": { "font-family": "{bodyMBold}", "font-size": "{bodyMBold}", "line-height": "{bodyMBold}", "letter-spacing": "{bodyMBold}", "font-weight": "{bodyMBold}" }, "symbol-jds-text": { "font-family": "{bodyMBold}", "font-size": "{bodyMBold}", "line-height": "{bodyMBold}", "letter-spacing": "{bodyMBold}", "font-weight": "{bodyMBold}" } } }, "border": { "true": { "outer-container": { "background-color": "{primaryBackground}" }, "container": { "background-color": "{b_9}" } } } }, "combination": [{ "number": { "xtra-small": { "outer-container": { "width": 18, "height": 18 }, "container": { "width": 16, "height": 16 }, "inner-container": { "width": 14, "height": 14 } }, "small": { "outer-container": { "width": 18, "height": 18 }, "container": { "width": 16, "height": 16 }, "inner-container": { "width": 14, "height": 14 } }, "medium": { "inner-container": { "width": 14, "height": 14 } }, "large": { "inner-container": { "width": 18, "height": 18 } }, "xtra-large": { "inner-container": { "width": 21, "height": 21 } } }, "number-symbol": { "small": { "outer-container": { "border-radius": 5, "width": "", "height": 18, "padding-left": 1, "padding-right": 1 }, "container": { "border-radius": "{b_53}", "width": "", "height": 16, "padding-left": 1, "padding-right": 1 }, "inner-container": { "width": "", "height": 14, "border-radius": "{b_53}", "padding-left": 3, "padding-right": 3 } }, "medium": { "outer-container": { "border-radius": 5, "width": "", "padding-left": 1, "padding-right": 1 }, "container": { "border-radius": "{b_57}", "width": "", "padding-left": 1, "padding-right": 1 }, "inner-container": { "width": "", "height": 14, "border-radius": "{b_57}", "padding-left": 3, "padding-right": 3 } }, "large": { "outer-container": { "border-radius": 5, "width": "", "height": 22, "padding-left": 1, "padding-right": 1 }, "container": { "border-radius": "{b_61}", "width": "", "height": 20, "padding-left": 1, "padding-right": 1 }, "inner-container": { "width": "", "height": 18, "border-radius": "{b_61}", "padding-left": 5, "padding-right": 3 } }, "xtra-large": { "outer-container": { "border-radius": 5, "width": "", "height": 26, "padding-left": 1, "padding-right": 1 }, "container": { "border-radius": "{b_65}", "width": "", "height": 24, "padding-left": 2, "padding-right": 2 }, "inner-container": { "width": "", "height": 20, "border-radius": "{b_65}", "padding-left": 4, "padding-right": 4 } }, "xtra-xtra-large": { "outer-container": { "border-radius": 5, "width": "", "height": 30, "padding-left": 1, "padding-right": 1 }, "container": { "border-radius": "{b_69}", "width": "", "height": 28, "padding-left": 2, "padding-right": 2 }, "inner-container": { "width": "", "height": 24, "border-radius": "{b_69}", "padding-left": 5, "padding-right": 3 } }, "xtra-xtra-xtra-large": { "outer-container": { "border-radius": 9, "width": "", "height": 34, "padding-left": 1, "padding-right": 1 }, "container": { "border-radius": "{b_73}", "width": "", "height": 32, "padding-left": 2, "padding-right": 2 }, "inner-container": { "width": "", "height": 28, "border-radius": "{b_73}", "padding-left": 5, "padding-right": 5 } }, "xtra-xtra-xtra-xtra-large": { "outer-container": { "border-radius": 9, "width": "", "height": 42, "padding-left": 1, "padding-right": 1 }, "container": { "border-radius": "{b_77}", "width": "", "height": 40, "padding-left": 3, "padding-right": 3 }, "inner-container": { "width": "", "height": 34, "border-radius": "{b_77}", "padding-left": "{b_78}", "padding-right": 6 } } } }], "combination_config": [["kind", "size"]], "api": { "config": { "kind": { "values": ["dot", "number", "number-symbol"] }, "size": { "values": ["xtra-small", "small", "medium", "large", "xtra-large", "xtra-xtra-large", "xtra-xtra-xtra-large", "xtra-xtra-xtra-xtra-large"] }, "border": { "values": [false, true] } }, "data": { "label-jds-text": { "value": { "type": "string", "name": "label" } } }, "a11y": { "container": { "properties": { "aria-label": { "name": "ariaLabel", "value": "Active Notification" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" } } } } } };

const withLogic$1$ = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$21 = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1Y;
  const { kind = "dot", size = "xtra-small", border = false, ariaLabel = "Active Notification", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ kind, size, border, ariaLabel, ...rest }, componentTag },
    "JDSBadgeV2Notification",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const BadgeV2Notification = withLogic$1$(Component$21);
BadgeV2Notification.displayName = "BadgeV2Notification";
BadgeV2Notification.slotName = "jds_badge_v2_notification";

const sdl$1X = { "metadata": { "version": "2.0.0", "id": "badge-status-2.0.0", "name": "JDSBadgeV2Status", "layerName": "jds_badge_v2_status", "internal": true }, "hierarchy": { "outer-container": [{ "container": [{ "inner-container": [{ "status-container": ["status-icon"] }] }, "label-jds-text"] }] }, "base": { "outer-container": { "width": 26, "height": 26, "justify-content": "{b_1}", "align-items": "{b_2}", "background-color": "{global.transparent}", "border-radius": "{b_8}" }, "container": { "width": 24, "height": 24, "flex-direction": "{b_0}", "justify-content": "{b_1}", "align-items": "{b_2}", "gap": "{custom_5}" }, "inner-container": { "width": 24, "height": 24, "justify-content": "{b_1}", "align-items": "{b_2}" }, "status-container": { "width": 20, "height": 20, "hidden": false, "show": true, "flex-direction": "{b_4}", "justify-content": "{b_5}", "align-items": "{b_6}", "border-radius": "{b_8}", "background-color": "{b_9}" }, "status-icon": { "value": "ic_message_send", "color": "{b_10}", "size": "{s}" }, "label-jds-text": { "font-family": "{bodyXsBold}", "color": "{feedbackSuccess50}", "font-size": "{bodyXsBold}", "line-height": "{bodyXsBold}", "letter-spacing": "{bodyXsBold}", "font-weight": "{bodyXsBold}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": true } }, "variant": { "kind": { "dot": { "status-icon": { "hidden": true } }, "label": { "outer-container": { "background-color": "{global.transparent}", "width": "" }, "container": { "width": "" }, "inner-container": { "hidden": true }, "status-container": { "hidden": true }, "label-jds-text": { "hidden": false } }, "dot-label": { "outer-container": { "border-radius": 0, "width": "", "height": "" }, "container": { "width": "", "padding-top": "{custom_4}", "padding-bottom": "{custom_4}", "gap": 4 }, "inner-container": { "width": 16, "height": 16 }, "status-container": { "size": "{custom_24}" }, "status-icon": { "hidden": true }, "label-jds-text": { "hidden": false } }, "icon-label": { "outer-container": { "border-radius": 0, "width": "", "height": "" }, "container": { "width": "", "padding-top": "{custom_4}", "padding-bottom": "{custom_4}", "gap": 4 }, "inner-container": { "width": 16, "height": 16 }, "status-container": { "size": "{custom_24}" }, "status-icon": { "size": "{xs}" }, "label-jds-text": { "hidden": false } }, "label-container": { "outer-container": { "border-radius": 6, "width": "", "height": 30, "padding-left": 3, "padding-right": 3 }, "container": { "border-radius": "{small}", "width": "", "padding-left": "{xs}", "padding-right": "{xs}", "padding-top": "{custom_4}", "padding-bottom": "{custom_4}" }, "inner-container": { "hidden": true }, "status-container": { "hidden": true }, "label-jds-text": { "hidden": false } }, "dot-label-container": { "outer-container": { "border-radius": "{small}", "width": "", "height": 24 }, "container": { "border-radius": "{small}", "width": "", "padding-left": "{xxs}", "padding-right": "{xs}", "padding-top": "{custom_4}", "padding-bottom": "{custom_4}", "gap": 4 }, "status-container": { "size": "{custom_24}" }, "status-icon": { "hidden": true }, "label-jds-text": { "hidden": false } }, "icon-label-container": { "outer-container": { "border-radius": "{small}", "width": "", "height": 24 }, "container": { "border-radius": "{small}", "width": "", "padding-left": "{xxs}", "padding-right": "{xs}", "padding-top": "{custom_4}", "padding-bottom": "{custom_4}", "gap": 4 }, "status-container": { "size": "{custom_24}" }, "status-icon": { "size": "{xs}" }, "label-jds-text": { "hidden": false } } }, "size": { "xtra-small": { "outer-container": { "width": 10, "height": 10 }, "container": { "width": 8, "height": 8 }, "inner-container": { "width": 8, "height": 8 }, "status-container": { "width": 7, "height": 7 }, "status-icon": { "size": "{xxs}" }, "label-jds-text": { "font-family": "{bodyXxsBold}", "font-size": "{bodyXxsBold}", "line-height": "{bodyXxsBold}", "letter-spacing": "{bodyXxsBold}", "font-weight": "{bodyXxsBold}" } }, "small": { "outer-container": { "width": 14, "height": 14 }, "container": { "width": 12, "height": 12 }, "inner-container": { "width": 12, "height": 12 }, "status-container": { "width": 10, "height": 10 }, "status-icon": { "size": "{custom_15}" }, "label-jds-text": { "font-family": "{bodyXxsBold}", "font-size": "{bodyXxsBold}", "line-height": "{bodyXxsBold}", "letter-spacing": "{bodyXxsBold}", "font-weight": "{bodyXxsBold}" } }, "medium": { "outer-container": { "width": 18, "height": 18 }, "container": { "width": 16, "height": 16 }, "inner-container": { "width": 16, "height": 16 }, "status-container": { "width": 13, "height": 13 }, "status-icon": { "size": "{xs}" }, "label-jds-text": { "font-family": "{bodyXxsBold}", "font-size": "{bodyXxsBold}", "line-height": "{bodyXxsBold}", "letter-spacing": "{bodyXxsBold}", "font-weight": "{bodyXxsBold}" } }, "large": { "outer-container": { "width": 22, "height": 22 }, "container": { "width": 20, "height": 20 }, "inner-container": { "width": 20, "height": 20 }, "status-container": { "width": 17, "height": 17 }, "status-icon": { "size": "{custom_19}" }, "label-jds-text": { "font-family": "{bodyXxsBold}", "font-size": "{bodyXxsBold}", "line-height": "{bodyXxsBold}", "letter-spacing": "{bodyXxsBold}", "font-weight": "{bodyXxsBold}" } }, "xtra-xtra-large": { "outer-container": { "width": 30, "height": 30 }, "container": { "width": 28, "height": 28 }, "inner-container": { "width": 28, "height": 28 }, "status-container": { "width": 23, "height": 23 }, "status-icon": { "size": "{custom_24}" } }, "xtra-xtra-xtra-large": { "outer-container": { "width": 34, "height": 34 }, "container": { "width": 32, "height": 32 }, "inner-container": { "width": 32, "height": 32 }, "status-container": { "width": 27, "height": 27 }, "status-icon": { "size": "{base}" }, "label-jds-text": { "font-family": "{bodySBold}", "font-size": "{bodySBold}", "line-height": "{bodySBold}", "letter-spacing": "{bodySBold}", "font-weight": "{bodySBold}" } }, "xtra-xtra-xtra-xtra-large": { "outer-container": { "width": 42, "height": 42 }, "container": { "width": 40, "height": 40 }, "inner-container": { "width": 40, "height": 40 }, "status-container": { "width": 33, "height": 33 }, "status-icon": { "size": "{custom_18}" }, "label-jds-text": { "font-family": "{bodyLBold}", "font-size": "{bodyLBold}", "line-height": "{bodyLBold}", "letter-spacing": "{bodyLBold}", "font-weight": "{bodyLBold}" } } }, "status": { "error": { "status-container": { "background-color": "{b_30}" }, "status-icon": { "value": "ic_close" }, "label-jds-text": { "color": "{feedbackError50}" } }, "warning": { "status-container": { "background-color": "{b_31}" }, "status-icon": { "value": "ic_exclamation" }, "label-jds-text": { "color": "{feedbackWarning50}" } }, "disabled": { "container": { "disabled": true }, "status-container": { "background-color": "{b_32}" }, "status-icon": { "value": "ic_close" }, "label-jds-text": { "color": "{primaryGrey60}" } } }, "border": { "true": { "outer-container": { "background-color": "{primaryBackground}" } } } }, "combination": [{ "label": { "xtra-small": { "outer-container": { "width": "", "height": 18 }, "container": { "width": "", "height": 16 } }, "small": { "outer-container": { "width": "", "height": 18 }, "container": { "width": "", "height": 16 } }, "medium": { "outer-container": { "width": "" }, "container": { "width": "" } }, "large": { "outer-container": { "width": "" }, "container": { "width": "", "padding-top": 2, "padding-bottom": 2 } }, "xtra-xtra-large": { "outer-container": { "width": "" }, "container": { "width": "" } }, "xtra-xtra-xtra-large": { "outer-container": { "width": "" }, "container": { "width": "" } }, "xtra-xtra-xtra-xtra-large": { "outer-container": { "width": "" }, "container": { "width": "" } } }, "dot": { "xtra-xtra-large": { "status-container": { "width": 24, "height": 24 } } }, "dot-label": { "xtra-small": { "outer-container": { "width": "", "height": "" }, "container": { "width": "", "height": 16, "padding-top": "{custom_5}", "padding-bottom": "{custom_5}" }, "inner-container": { "width": 12, "height": 12 }, "status-container": { "size": "{custom_19}" } }, "small": { "outer-container": { "width": "", "height": "" }, "container": { "width": "", "height": 16, "padding-top": "{custom_5}", "padding-bottom": "{custom_5}" }, "status-container": { "size": "{custom_19}" } }, "medium": { "outer-container": { "width": "", "height": "" }, "container": { "width": "", "padding-top": "{custom_5}", "padding-bottom": "{custom_5}" }, "inner-container": { "width": 12, "height": 12 }, "status-container": { "size": "{custom_19}" } }, "large": { "outer-container": { "width": "", "height": "" }, "container": { "width": "" }, "inner-container": { "width": 16, "height": 16 }, "status-container": { "size": "{custom_24}" } }, "xtra-xtra-large": { "outer-container": { "width": "", "height": "" }, "container": { "width": "", "padding-top": "{xxs}", "padding-bottom": "{xxs}" }, "inner-container": { "width": 16, "height": 16 }, "status-container": { "size": "{custom_24}" } }, "xtra-xtra-xtra-large": { "outer-container": { "width": "", "height": "" }, "container": { "width": "", "padding-top": "{xxs}", "padding-bottom": "{xxs}" }, "inner-container": { "width": 20, "height": 20 }, "status-container": { "size": "{custom_22}" } }, "xtra-xtra-xtra-xtra-large": { "outer-container": { "width": "", "height": "" }, "container": { "width": "", "gap": "{custom_18}", "padding-top": "{xxs}", "padding-bottom": "{xxs}" }, "inner-container": { "width": 28, "height": 28 }, "status-container": { "size": "{custom_30}" } } }, "icon-label": { "xtra-small": { "outer-container": { "width": "", "height": "" }, "container": { "width": "", "height": 16, "padding-top": "{custom_5}", "padding-bottom": "{custom_5}" }, "inner-container": { "width": 12, "height": 12 }, "status-container": { "size": "{custom_19}" }, "status-icon": { "size": "{custom_15}" } }, "small": { "outer-container": { "width": "", "height": "" }, "container": { "width": "", "height": 16, "padding-top": "{custom_5}", "padding-bottom": "{custom_5}" }, "status-container": { "size": "{custom_19}" }, "status-icon": { "size": "{custom_15}" } }, "medium": { "outer-container": { "width": "", "height": "" }, "container": { "width": "", "padding-top": "{custom_5}", "padding-bottom": "{custom_5}" }, "inner-container": { "width": 12, "height": 12 }, "status-container": { "size": "{custom_19}" }, "status-icon": { "size": "{custom_15}" } }, "large": { "outer-container": { "width": "", "height": "" }, "container": { "width": "" }, "inner-container": { "width": 16, "height": 16 }, "status-container": { "size": "{custom_24}" }, "status-icon": { "size": "{xs}" } }, "xtra-xtra-large": { "outer-container": { "width": "", "height": "" }, "container": { "width": "", "padding-top": "{xxs}", "padding-bottom": "{xxs}" }, "inner-container": { "width": 16, "height": 16 }, "status-container": { "size": "{custom_24}" }, "status-icon": { "size": "{xs}" } }, "xtra-xtra-xtra-large": { "outer-container": { "width": "", "height": "" }, "container": { "width": "", "padding-top": "{xxs}", "padding-bottom": "{xxs}" }, "inner-container": { "width": 20, "height": 20 }, "status-container": { "size": "{custom_22}" }, "status-icon": { "size": "{custom_19}" } }, "xtra-xtra-xtra-xtra-large": { "outer-container": { "width": "", "height": "" }, "container": { "width": "", "gap": "{custom_18}", "padding-top": "{xxs}", "padding-bottom": "{xxs}" }, "inner-container": { "width": 28, "height": 28 }, "status-container": { "size": "{custom_30}" }, "status-icon": { "size": "{custom_24}" } } }, "label-container": { "xtra-small": { "outer-container": { "width": "", "height": 20, "padding-left": 2, "padding-right": 2 }, "container": { "width": "", "height": 16, "padding-left": "{xxs}", "padding-right": "{xxs}", "padding-top": "{custom_5}", "padding-bottom": "{custom_5}" } }, "small": { "outer-container": { "width": "", "height": 20, "padding-left": 2, "padding-right": 2 }, "container": { "width": "", "height": 16, "padding-left": "{xxs}", "padding-right": "{xxs}", "padding-top": "{custom_5}", "padding-bottom": "{custom_5}" } }, "medium": { "outer-container": { "width": "", "height": 20, "padding-left": 2, "padding-right": 2 }, "container": { "width": "", "padding-left": "{xxs}", "padding-right": "{xxs}", "padding-top": "{custom_5}", "padding-bottom": "{custom_5}" } }, "large": { "outer-container": { "width": "", "height": 26 }, "container": { "width": "" } }, "xtra-xtra-large": { "outer-container": { "width": "", "height": 34 }, "container": { "width": "", "padding-top": "{xxs}", "padding-bottom": "{xxs}" } }, "xtra-xtra-xtra-large": { "outer-container": { "border-radius": 10, "width": "", "height": 38 }, "container": { "border-radius": "{medium}", "width": "", "padding-top": "{xxs}", "padding-bottom": "{xxs}" } }, "xtra-xtra-xtra-xtra-large": { "outer-container": { "border-radius": 12, "width": "", "height": 48, "padding-left": 4, "padding-right": 4 }, "container": { "border-radius": "{medium}", "width": "", "padding-left": "{s}", "padding-right": "{s}", "padding-top": "{xxs}", "padding-bottom": "{xxs}" } } }, "dot-label-container": { "xtra-small": { "outer-container": { "width": "", "height": 16 }, "container": { "width": "", "height": 16, "padding-left": "{xxs}", "padding-right": "{xxs}", "padding-top": "{custom_5}", "padding-bottom": "{custom_5}" }, "inner-container": { "width": 12, "height": 12 }, "status-container": { "size": "{custom_19}" } }, "small": { "outer-container": { "width": "", "height": 16 }, "container": { "width": "", "height": 16, "padding-left": "{xxs}", "padding-right": "{xxs}", "padding-top": "{custom_5}", "padding-bottom": "{custom_5}" }, "inner-container": { "width": 12, "height": 12 }, "status-container": { "size": "{custom_19}" } }, "medium": { "outer-container": { "width": "", "height": 16 }, "container": { "width": "", "padding-left": "{xxs}", "padding-right": "{xxs}", "padding-top": "{custom_5}", "padding-bottom": "{custom_5}" }, "inner-container": { "width": 12, "height": 12 }, "status-container": { "size": "{custom_19}" } }, "large": { "outer-container": { "width": "", "height": 20 }, "container": { "width": "" }, "status-container": { "size": "{custom_24}" } }, "xtra-xtra-large": { "outer-container": { "width": "", "height": 28 }, "container": { "width": "", "padding-left": "{xs}", "padding-top": "{xxs}", "padding-bottom": "{xxs}" }, "status-container": { "size": "{custom_24}" } }, "xtra-xtra-xtra-large": { "outer-container": { "border-radius": "{medium}", "width": "", "height": 32 }, "container": { "border-radius": "{medium}", "width": "", "padding-left": "{xs}", "padding-top": "{xxs}", "padding-bottom": "{xxs}" }, "inner-container": { "width": 20, "height": 20 }, "status-container": { "size": "{custom_22}" } }, "xtra-xtra-xtra-xtra-large": { "outer-container": { "border-radius": "{medium}", "width": "", "height": 40 }, "container": { "border-radius": "{medium}", "width": "", "padding-left": "{xs}", "padding-right": "{s}", "padding-top": "{xxs}", "padding-bottom": "{xxs}" }, "inner-container": { "width": 28, "height": 28 }, "status-container": { "size": "{custom_30}" } } }, "icon-label-container": { "xtra-small": { "outer-container": { "width": "", "height": 16 }, "container": { "width": "", "height": 16, "padding-left": "{xxs}", "padding-right": "{xxs}", "padding-top": "{custom_5}", "padding-bottom": "{custom_5}" }, "inner-container": { "width": 12, "height": 12 }, "status-container": { "size": "{custom_19}" }, "status-icon": { "size": "{custom_15}" } }, "small": { "outer-container": { "width": "", "height": 16 }, "container": { "width": "", "height": 16, "padding-left": "{xxs}", "padding-right": "{xxs}", "padding-top": "{custom_5}", "padding-bottom": "{custom_5}" }, "inner-container": { "width": 12, "height": 12 }, "status-container": { "size": "{custom_19}" }, "status-icon": { "size": "{custom_15}" } }, "medium": { "outer-container": { "width": "", "height": 16 }, "container": { "width": "", "padding-left": "{xxs}", "padding-right": "{xxs}", "padding-top": "{custom_5}", "padding-bottom": "{custom_5}" }, "inner-container": { "width": 12, "height": 12 }, "status-container": { "size": "{custom_19}" }, "status-icon": { "size": "{custom_15}" } }, "large": { "outer-container": { "width": "", "height": 20 }, "container": { "width": "" }, "status-container": { "size": "{custom_24}" }, "status-icon": { "size": "{xs}" } }, "xtra-xtra-large": { "outer-container": { "width": "", "height": 28 }, "container": { "width": "", "padding-left": "{xs}", "padding-top": "{xxs}", "padding-bottom": "{xxs}" }, "status-container": { "size": "{custom_24}" }, "status-icon": { "size": "{xs}" } }, "xtra-xtra-xtra-large": { "outer-container": { "border-radius": "{medium}", "width": "", "height": 32 }, "container": { "border-radius": "{medium}", "width": "", "padding-left": "{xs}", "padding-top": "{xxs}", "padding-bottom": "{xxs}" }, "inner-container": { "width": 20, "height": 20 }, "status-container": { "size": "{custom_22}" }, "status-icon": { "size": "{custom_19}" } }, "xtra-xtra-xtra-xtra-large": { "outer-container": { "border-radius": "{medium}", "width": "", "height": 40 }, "container": { "border-radius": "{medium}", "width": "", "padding-left": "{xs}", "padding-right": "{s}", "padding-top": "{xxs}", "padding-bottom": "{xxs}" }, "inner-container": { "width": 28, "height": 28 }, "status-container": { "size": "{custom_30}" }, "status-icon": { "size": "{custom_24}" } } } }, { "label-container": { "success": { "container": { "background-color": "{b_61}" }, "label-jds-text": { "color": "{global.white}" } }, "error": { "container": { "background-color": "{b_62}" }, "label-jds-text": { "color": "{global.white}" } }, "warning": { "container": { "background-color": "{b_63}" }, "label-jds-text": { "color": "{global.white}" } }, "disabled": { "container": { "background-color": "{b_64}" }, "label-jds-text": { "color": "{global.white}" } } }, "dot-label-container": { "success": { "container": { "background-color": "{b_65}" }, "status-container": { "background-color": "{b_66}" }, "label-jds-text": { "color": "{global.white}" } }, "error": { "container": { "background-color": "{b_67}" }, "status-container": { "background-color": "{b_68}" }, "label-jds-text": { "color": "{global.white}" } }, "warning": { "container": { "background-color": "{b_69}" }, "status-container": { "background-color": "{b_70}" }, "label-jds-text": { "color": "{global.white}" } }, "disabled": { "container": { "background-color": "{b_71}" }, "status-container": { "background-color": "{b_72}" }, "label-jds-text": { "color": "{global.white}" } } }, "icon-label-container": { "success": { "container": { "background-color": "{b_73}" }, "status-container": { "background-color": "{b_74}" }, "status-icon": { "color": "{b_75}" }, "label-jds-text": { "color": "{global.white}" } }, "error": { "container": { "background-color": "{b_76}" }, "status-container": { "background-color": "{b_77}" }, "status-icon": { "color": "{b_78}" }, "label-jds-text": { "color": "{global.white}" } }, "warning": { "container": { "background-color": "{b_79}" }, "status-container": { "background-color": "{b_80}" }, "status-icon": { "color": "{b_81}" }, "label-jds-text": { "color": "{global.white}" } }, "disabled": { "container": { "background-color": "{b_82}" }, "status-container": { "background-color": "{b_83}" }, "status-icon": { "color": "{b_84}" }, "label-jds-text": { "color": "{global.white}" } } } }, { "true": { "label": { "outer-container": { "background-color": "{global.transparent}" } }, "dot-label": { "outer-container": { "background-color": "{global.transparent}" } }, "icon-label": { "outer-container": { "background-color": "{global.transparent}" } } } }], "combination_config": [["kind", "size"], ["kind", "status"], ["border", "kind"]], "api": { "config": { "kind": { "values": ["icon", "dot", "label", "dot-label", "icon-label", "label-container", "dot-label-container", "icon-label-container"] }, "size": { "values": ["xtra-large", "small", "xtra-small", "medium", "large", "xtra-xtra-large", "xtra-xtra-xtra-large", "xtra-xtra-xtra-xtra-large"] }, "status": { "values": ["success", "error", "warning", "disabled"] }, "border": { "values": [false, true] } }, "data": { "label-jds-text": { "value": { "type": "string", "name": "label" } } }, "a11y": { "container": { "properties": { "aria-label": { "name": "ariaLabel", "prop": "label" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" } } } } } };

const withLogic$1_ = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$20 = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1X;
  const { kind = "icon", size = "xtra-large", status = "success", border = false, ariaLabel = props.label?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ kind, size, status, border, ariaLabel, ...rest }, componentTag },
    "JDSBadgeV2Status",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const BadgeV2Status = withLogic$1_(Component$20);
BadgeV2Status.displayName = "BadgeV2Status";
BadgeV2Status.slotName = "jds_badge_v2_status";

const sdl$1W = { "metadata": { "version": "1.0.0", "id": "bottom-footer-1.0.0", "name": "JDSBottomFooter", "layerName": "jds_bottom_footer", "platform": "web" }, "hierarchy": { "container": [{ "copyright-container": [{ "logo-container": [{ "jds-icon-container": ["jds-icon"] }] }, { "copyright-text-container": ["jds_link", "jds-text"] }] }, { "informational-links-container": ["jds_bottom_footer_link_item"] }] }, "base": { "container": { "flex-direction": "{b_0}", "justify-content": "{b_1}", "align-items": "{b_2}", "padding-top": "{b_3}", "padding-right": "{b_4}", "padding-bottom": "{b_5}", "padding-left": "{b_6}", "background": "{b_7}" }, "jds_link": { "textAppearance": "body_xxs", "kind": "submenu", "hidden": true }, "copyright-container": { "gap": "{b_8}", "flex-direction": "{b_9}", "align-items": "{b_10}", "flex": 1 }, "informational-links-container": { "flex-direction": "row", "align-items": "{b_11}", "gap": 10 }, "jds-text": { "font-family": "{bodyXxs}", "color": "{primaryGrey80}", "font-size": "{bodyXxs}", "line-height": "{bodyXxs}", "letter-spacing": "{bodyXxs}", "font-weight": "{bodyXxs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": false }, "jds-icon": { "size": "{l}", "color": "{secondary50}" }, "jds-icon-container": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{l}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}" } }, "variant": { "_hasLink": { "true": { "jds_link": { "hidden": false }, "jds-text": { "hidden": true } } }, "_platform": { "desktop": { "container": { "width": "{b_12}" } }, "mobile": { "container": { "flex-direction": "{b_13}", "justify-content": "{b_14}", "align-items": "{b_15}", "padding-top": 0, "padding-right": "{b_16}", "padding-bottom": "{b_17}", "padding-left": "{b_18}", "gap": "{b_19}" }, "copyright-container": { "flex-direction": "{b_20}", "align-items": "{b_21}", "gap": "{b_22}" } } } }, "api": { "config": { "_hasLink": { "values": [true, false] }, "_platform": { "values": ["desktop", "mobile"] } }, "data": { "informational-links-container": { "value": { "name": "informationalLinks", "type": "list", "object": { "title": "string", "href": "string", "separator": "boolean" } } }, "copyright-text-container": { "value": { "name": "copyright", "type": "object", "object": { "title": "string", "href": "string", "newTab": "boolean" } } }, "jds_link": { "title": { "type": "string", "name": "copyright.title" }, "href": { "type": "string", "name": "copyright.href" }, "newTab": { "type": "boolean", "name": "copyright.newTab" } }, "jds_bottom_footer_link_item": { "title": { "type": "string", "name": "informationalLinks.title" }, "href": { "type": "string", "name": "informationalLinks.href" }, "newTab": { "type": "boolean", "name": "informationalLinks.newTab", "platform": "web" }, "routerLinkProps": { "type": "string", "name": "informationalLinks.routerLinkProps", "platform": "angular" }, "provider": { "type": "string", "name": "informationalLinks.provider", "platform": "react" }, "onClick": { "type": "string", "name": "informationalLinks.onClick" }, "separator": { "name": "informationalLinks.separator", "type": "boolean" } }, "jds-text": { "value": { "type": "string", "name": "copyrightText" } }, "jds-icon": { "value": { "type": "icon", "name": "logo" }, "ic": { "type": "icon", "name": "logo" } } }, "a11y": { "jds_link": { "properties": { "ariaLabel": "copyRightAriaLabel", "ariaDescribedby": { "name": "copyRightAriaDescribedby", "platform": "web,ios" } } }, "informational-links-container": { "name": "informationalLinks", "repeating": { "ariaLabel": "bottomlinkAriaLabel", "ariaDescribedby": { "name": "bottomlinkAriaDescribedby", "platform": "web,ios" } } }, "jds_bottom_footer_link_item": { "properties": { "role": "informationalLinks.bottomlinkRole", "ariaLabel": "informationalLinks.bottomlinkAriaLabel", "ariaDescribedby": "informationalLinks.bottomlinkAriaDescribedby" } } } } };

const withLogic$1Z = (Component) => (props) => {
  const length = props.informationalLinks?.length;
  const informationalLinks = props.informationalLinks?.map(
    (item, i) => ({
      ...item,
      separator: i !== length - 1
    })
  );
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...props,
      _hasLink: Boolean(props.copyright?.href),
      informationalLinks
    }
  );
};

const Component$1$ = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1W;
  const { custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...rest, componentTag },
    "JDSBottomFooter",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const BottomFooter = withLogic$1Z(Component$1$);
BottomFooter.displayName = "BottomFooter";
BottomFooter.slotName = "jds_bottom_footer";

const sdl$1V = { "metadata": { "version": "1.0.0", "id": "bottom-footer-link-item-1.0.0", "name": "JDSBottomFooterLinkItem", "layerName": "jds_bottom_footer_link_item", "platform": "web" }, "hierarchy": { "container": ["jds_link", "jds_divider"] }, "base": { "container": { "gap": "{b_0}" }, "jds_divider": { "pad": "none", "orientation": "vertical" }, "jds_link": { "kind": "submenu", "textAppearance": "body_xxs" } }, "variant": { "separator": { "false": { "jds_divider": { "hidden": true } } } }, "api": { "config": { "separator": { "values": [true, false] } }, "data": { "jds_link": { "title": { "type": "string", "name": "title" }, "href": { "type": "string", "name": "href" }, "newTab": { "type": "boolean", "name": "newTab", "platform": "web" }, "routerLinkProps": { "type": "RouterLinkProps", "name": "routerLinkProps", "platform": "angular" }, "onClick": { "type": "event", "name": "onClick" }, "provider": { "type": "object", "name": "provider", "platform": "react" } } }, "a11y": { "jds_link": { "properties": { "ariaLabel": "ariaLabel", "ariaDescribedby": { "name": "ariaDescribedby", "platform": "web,ios" } } } } } };

const withLogic$1Y = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$1_ = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1V;
  const { separator = true, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ separator, ...rest }, componentTag },
    "JDSBottomFooterLinkItem",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const BottomFooterLinkItem = withLogic$1Y(Component$1_);
BottomFooterLinkItem.displayName = "BottomFooterLinkItem";
BottomFooterLinkItem.slotName = "jds_bottom_footer_link_item";

const sdl$1U = { "metadata": { "version": "1.0.0", "id": "bottom-navigation-item-1.0.0", "name": "JDSBottomNavigationItem", "layerName": "jds_bottom_navigation_item" }, "hierarchy": { "container": [{ "jds-icon-container": ["jds-icon"] }, "jds-text"] }, "base": { "container": { "width": "{b_0}", "flex-direction": "{b_1}", "justify-content": "{b_2}", "align-items": "{b_3}", "gap": "{b_4}", "opacity": "{b_6}" }, "jds-icon": { "size": "{m}", "color": "{primaryGrey80}" }, "jds-icon-container": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{m}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}" }, "jds-text": { "font-family": "{bodyXxs}", "color": "{primaryGrey80}", "font-size": "{bodyXxs}", "line-height": "{bodyXxs}", "letter-spacing": "{bodyXxs}", "font-weight": "{bodyXxs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "text-align": "center", "max-lines": 1, "hidden": true, "maxLines": 1 } }, "variant": { "showLabel": { "true": { "jds-text": { "hidden": false } } }, "active": { "true": { "jds-icon": { "color": "{secondary50}" }, "jds-icon-container": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{m}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}" }, "jds-text": { "color": "{primaryGrey100}" } } }, "disabled": { "true": { "container": { "disabled": true, "opacity": "{b_5}" } } }, "multiLine": { "true": { "jds-text": { "max-lines": 2, "maxLines": 2 } } } }, "api": { "config": { "showLabel": { "values": [false, true] }, "active": { "values": [false, true] }, "disabled": { "values": [false, true] }, "multiLine": { "values": [false, true] } }, "data": { "jds-icon": { "value": { "type": "icon", "name": "icon" }, "ic": { "type": "icon", "name": "icon" } }, "jds-text": { "value": { "type": "string", "name": "label" } } }, "events": { "container": { "onClick": "onItemClick" } }, "a11y": { "container": { "properties": { "role": { "value": "tab" }, "aria-label": { "name": "ariaLabel", "prop": "label" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" }, "aria-selected": { "name": "_ariaSelected", "prop": "active" } } } } } };

const withLogic$1X = (Component) => ({ selectedIndex, internalIndex, ...rest }) => {
  const active = typeof selectedIndex === "number" && internalIndex === selectedIndex;
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...rest,
        active,
        onChange: (ev) => {
          if (internalIndex)
            rest.onClick?.(ev, internalIndex);
        }
      }
    }
  );
};

const Component$1Z = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1U;
  const { showLabel = false, active = false, disabled = false, multiLine = false, onItemClick = noop, ariaLabel = props.label?.toString(), _ariaSelected = props.active?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ showLabel, active, disabled, multiLine, onItemClick, ariaLabel, _ariaSelected, ...rest }, componentTag },
    "JDSBottomNavigationItem",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const BottomNavigationItem = withLogic$1X(Component$1Z);
BottomNavigationItem.displayName = "BottomNavigationItem";
BottomNavigationItem.slotName = "jds_bottom_navigation_item";

const sdl$1T = { "metadata": { "version": "1.0.0", "id": "desktop-bottom-sheet-1.0.0", "name": "JDSDesktopBottomSheet", "layerName": "jds_desktop_bottom_sheet", "platform": "web" }, "hierarchy": { "popup": [{ "popup-container": ["jds_desktop_bottom_sheet_internal"] }] }, "base": { "popup": { "priority": 60, "passive": true }, "popup-container": { "show": true, "flex-direction": "{d_0}", "justify-content": "{d_1}", "align-items": "{d_2}", "background-color": "{d_3}", "size": "{d_4}", "enter-animation-name": "fadeIn", "exit-animation-name": "fadeOut", "enter-animation-curve": "entrance_ease", "exit-animation-curve": "exit_ease", "enter-animation-duration": 500, "exit-animation-duration": 500, "padding-right": 90, "opacity": "{opacity.invisible}", "transition": { "property": ["opacity"], "duration": "{medium}", "timing-function": "{easeEntrance}" } }, "jds_desktop_bottom_sheet_internal": { "close": true } }, "variant": { "kind": { "passive": { "popup": { "passive": true, "background-color": "transparent" }, "popup-container": { "background-color": "transparent" } } }, "isCustom": { "true": { "jds_desktop_bottom_sheet_internal": { "isCustom": true } } }, "buttonOrientation": { "horizontal": { "jds_mobile_bottom_sheet_internal": { "buttonOrientation": "horizontal" } } }, "close": { "false": { "popup-container": { "opacity": "{opacity.enabled}", "transition": { "timing-function": "{easeExit}" } }, "jds_desktop_bottom_sheet_internal": { "close": false } } } }, "combination": [{ "false": { "overlay": { "popup": { "passive": false } } } }], "combination_config": [["close", "kind"]], "api": { "config": { "kind": { "values": ["overlay", "passive"] }, "controlType": { "values": ["normal", "stepper"] }, "buttonOrientation": { "values": ["vertical", "horizontal"] }, "isCustom": { "values": [false, true] }, "close": { "values": [true, false] }, "primaryCtaDisabled": { "values": [false, true] }, "secondaryCtaDisabled": { "values": [false, true] } }, "data": { "jds_desktop_bottom_sheet_internal": { "height": { "type": "number", "name": "height" }, "title": { "type": "string", "name": "title" }, "description": { "type": "string", "name": "description" }, "primaryCTA": { "type": "string", "name": "primaryCTA" }, "secondaryCTA": { "type": "string", "name": "secondaryCTA" }, "step_label": { "type": "string", "name": "label" }, "children": { "name": "children", "type": "slot" } } }, "events": { "popup": { "onClick": "onClose" }, "jds_desktop_bottom_sheet_internal": { "onBottomSheetClick": "_onBottomSheetClick", "onClose": "onClose", "onCancel": "onCancel", "onPrimaryClick": "onPrimaryClick", "onSecondaryClick": "onSecondaryClick", "onBack": "onBack" } }, "a11y": { "jds_desktop_bottom_sheet_internal": { "properties": { "ariaLabel": "ariaLabel", "ariaDescribedby": { "name": "ariaDescribedby", "platform": "web,ios" }, "cancelButtonAriaLabel": "cancelButtonAriaLabel", "backButtonAriaLabel": "backButtonAriaLabel", "primaryCtaAriaLabel": "primaryCtaAriaLabel", "primaryCtaAriaDescribedby": { "name": "primaryCtaAriaDescribedby", "platform": "web,ios" }, "secondaryCtaAriaLabel": "secondaryCtaAriaLabel", "secondaryCtaAriaDescribedby": { "name": "secondaryCtaAriaDescribedby", "platform": "web,ios" } } } } } };

const WINDOW = typeof window === "object" && window || void 0;
const defaultBreakpoints = {
  xmobile: 323,
  mobile: 619,
  tablet: 991,
  desktop: 992,
  widescreen: 1280,
  hd: 1920
};
class Devices {
  static withSizes(breakpoints) {
    this.breakpoints = Object.assign(this.breakpoints, breakpoints);
    return this;
  }
  /**
   * is width xmobile and below
   */
  static isXMobile() {
    const width = WINDOW?.innerWidth || 1e3;
    return width <= this.breakpoints.xmobile;
  }
  /**
   * is width mobile and below. returns true even on xmobile
   */
  static isMobile() {
    const width = WINDOW?.innerWidth || 1e3;
    return width <= this.breakpoints.mobile;
  }
  /**
   * is width above mobile and below desktop
   */
  static isTabletOnly() {
    const width = WINDOW?.innerWidth || 1e3;
    return width <= this.breakpoints.tablet && width > this.breakpoints.mobile;
  }
  /**
   * is width less than tablet? returns true even on mobile and xmobile
   */
  static isTablet() {
    const width = WINDOW?.innerWidth || 1e3;
    return width <= this.breakpoints.tablet;
  }
  /**
   * is width greater than tablet?
   */
  static isDesktop() {
    const width = WINDOW?.innerWidth || 1e3;
    return width >= this.breakpoints.tablet;
  }
  /**
   * is width greater than max-flex of desktop (1280px). i.e the breakpoint after which
   * max-width does not keep growing.
   */
  static isWidescreen() {
    const width = WINDOW?.innerWidth || 0;
    return width >= this.breakpoints.widescreen;
  }
  /**
   * is width greater than or equal to HD.
   */
  static isHD() {
    const width = WINDOW?.innerWidth || 0;
    return width >= this.breakpoints.hd;
  }
  /**
   * Re-renders functional component at Breakpoints from defaultBreakpoints.
   * @returns ```
   {
        xmobile: boolean,
        mobile: boolean,
        tablet: boolean,
        desktop: boolean,
        widescreen: boolean,
        hd: boolean
    }
   ```
   * [xmobile < mobile < tablet] [desktop > widescreen > HD]
   * tablet will be true even when xmobile and mobile are true.
   * desktop will be true even when widescreen and hd are true.
   *
   *
   * Breakpoints can be overridden by calling withSizes() first.
   * e.g. Devices.withSizes(mySize).useMedia()
   */
  static useMedia() {
    const queries = [
      `(max-width: ${this.breakpoints.xmobile}px)`,
      `(max-width: ${this.breakpoints.mobile}px)`,
      `(max-width: ${this.breakpoints.tablet}px)`,
      `(min-width: ${this.breakpoints.desktop}px)`,
      `(min-width: ${this.breakpoints.widescreen}px)`,
      `(min-width: ${this.breakpoints.hd}px)`
    ];
    const mediaQueryLists = queries.map(
      (q) => WINDOW?.matchMedia && WINDOW.matchMedia(q)
    );
    const getValue = () => {
      const matchedResults = mediaQueryLists.map((mql) => mql?.matches);
      const valObj = {
        xmobile: false,
        mobile: false,
        tablet: false,
        desktop: false,
        widescreen: false,
        hd: false
      };
      Object.keys(this.breakpoints).forEach((key, i) => {
        valObj[key] = matchedResults[i];
      });
      return valObj;
    };
    const [value, setValue] = useState(getValue);
    useEffect(
      () => {
        const handler = () => setValue(getValue);
        mediaQueryLists.forEach((mql) => mql?.addListener(handler));
        return () => mediaQueryLists.forEach((mql) => mql?.removeListener(handler));
      },
      []
      // Empty array ensures effect is only run on mount and unmount
    );
    return value;
  }
}
Devices.breakpoints = defaultBreakpoints;

const sdl$1S = { "metadata": { "version": "1.0.0", "id": "mobile-bottom-sheet-1.0.0", "name": "JDSMobileBottomSheet", "layerName": "jds_mobile_bottom_sheet" }, "hierarchy": { "popup": [{ "popup-container": ["jds_mobile_bottom_sheet_internal"] }] }, "base": { "popup": { "priority": 60, "passive": true }, "popup-container": { "show": true, "flex-direction": "{m_0}", "justify-content": "{m_1}", "align-items": "{m_2}", "size": "{m_3}", "enter-animation-name": "fadeIn", "exit-animation-name": "fadeOut", "enter-animation-curve": "entrance_ease", "exit-animation-curve": "exit_ease", "enter-animation-duration": 500, "exit-animation-duration": 500, "background-color": "{m_4}", "opacity": "{m_5}", "transition": { "property": ["opacity"], "duration": "{m_6}", "timing-function": "{m_7}" } }, "jds_mobile_bottom_sheet_internal": { "hidden": false } }, "variant": { "kind": { "passive": { "popup": { "passive": true, "background-color": "{m_8}" }, "popup-container": { "background-color": "{m_9}" }, "jds_mobile_bottom_sheet_internal": { "kind": "passive" } } }, "isCustom": { "true": { "jds_mobile_bottom_sheet_internal": { "isCustom": true } } }, "buttonOrientation": { "horizontal": { "jds_mobile_bottom_sheet_internal": { "buttonOrientation": "horizontal" } } }, "close": { "false": { "popup-container": { "opacity": "{m_10}", "transition": { "timing-function": "{m_11}" } }, "jds_mobile_bottom_sheet_internal": { "close": false } } }, "controlType": { "stepper": { "jds_mobile_bottom_sheet_internal": { "controlType": "stepper" } } }, "primaryCtaDisabled": { "true": { "jds_mobile_bottom_sheet_internal": { "primaryCtaDisabled": true } } }, "secondaryCtaDisabled": { "true": { "jds_mobile_bottom_sheet_internal": { "secondaryCtaDisabled": true } } } }, "combination": [{ "false": { "overlay": { "popup": { "passive": false } } } }], "combination_config": [["close", "kind"]], "api": { "config": { "kind": { "values": ["overlay", "passive"] }, "controlType": { "values": ["normal", "stepper"] }, "buttonOrientation": { "values": ["vertical", "horizontal"] }, "isCustom": { "values": [false, true] }, "close": { "values": [true, false] }, "primaryCtaDisabled": { "values": [false, true] }, "secondaryCtaDisabled": { "values": [false, true] } }, "data": { "jds_mobile_bottom_sheet_internal": { "maxHeight": { "type": "size", "name": "height", "function": true }, "stepLabel": { "type": "string", "name": "label" }, "title": { "type": "string", "name": "title" }, "description": { "type": "string", "name": "description" }, "primaryCTA": { "type": "string", "name": "primaryCTA" }, "secondaryCTA": { "type": "string", "name": "secondaryCTA" }, "children": { "name": "children", "type": "slot" } } }, "events": { "popup": { "onClick": "onClose", "onAppear": { "name": "_onAppear", "platform": "ios" } }, "jds_mobile_bottom_sheet_internal": { "onBottomSheetClick": "_onBottomSheetClick", "onClose": "onClose", "onBack": "onBack", "onCancel": "onCancel", "onPrimaryClick": "onPrimaryClick", "onSecondaryClick": "onSecondaryClick", "onAppear": { "name": "_onContainerAppear", "platform": "ios" } } }, "a11y": { "jds_mobile_bottom_sheet_internal": { "properties": { "ariaLabel": "ariaLabel", "ariaDescribedby": { "name": "ariaDescribedby", "platform": "web,ios" }, "cancelButtonAriaLabel": "cancelButtonAriaLabel", "backButtonAriaLabel": "backButtonAriaLabel", "primaryCtaAriaLabel": "primaryCtaAriaLabel", "primaryCtaAriaDescribedby": { "name": "primaryCtaAriaDescribedby", "platform": "web,ios" }, "secondaryCtaAriaLabel": "secondaryCtaAriaLabel", "secondaryCtaAriaDescribedby": { "name": "secondaryCtaAriaDescribedby", "platform": "web,ios" } } } } } };

const useEscapeClose = (handler, condition) => {
  const escapeListener = useCallback(() => handler(), [handler]);
  useEffect(() => {
    document.addEventListener("keydown", (ev) => {
      if ((condition || typeof condition === "undefined") && ev.key === "Escape") {
        escapeListener();
      }
    });
    return () => {
      document.removeEventListener("keydown", escapeListener);
    };
  }, [condition, escapeListener]);
};

const useTransition = (externalOpen, cb, duration = 50) => {
  const [open, setOpen] = useState(externalOpen);
  const [internalOpen, setInternalOpen] = useState(externalOpen);
  useEffect(() => {
    if (externalOpen) {
      setOpen(true);
      setTimeout(() => {
        setInternalOpen(true);
      }, 10);
    } else {
      setOpen(false);
      setTimeout(() => {
        setInternalOpen(false);
      }, 500);
    }
  }, [externalOpen]);
  return {
    className: internalOpen && open ? "expanded" : "",
    open: internalOpen || open,
    close: () => {
      setOpen(false);
      setTimeout(() => {
        setInternalOpen(false);
        cb?.();
      }, duration);
    }
  };
};

const PROP_MAP$s = (props) => {
  return {
    primaryCTA: {
      properties: {
        primaryCTA: props.primaryCTA?.title,
        onPrimaryClick: props.primaryCTA?.onClick || props.onPrimaryClick
      }
    },
    secondaryCTA: {
      properties: {
        secondaryCTA: props.secondaryCTA?.title,
        onSecondaryClick: props.secondaryCTA?.onClick || props.onSecondaryClick
      }
    }
  };
};
const BOTTOMSHEET_SELECTOR$1 = "div.j-JDSMobileBottomSheetInternal-root-container";
const withLogic$1W = (Component) => (userProps) => {
  const props = modifyProps(userProps, PROP_MAP$s);
  const { close, onRequestClose, onClose, ...rest } = props;
  const allowClose = !onRequestClose || onRequestClose();
  const {
    open,
    className,
    close: closeFn
  } = useTransition(Boolean(!close), () => {
    if (allowClose) {
      onClose?.();
    }
  });
  const { element, rootRef } = useRootRef();
  const bottomsheetRef = element?.querySelector(BOTTOMSHEET_SELECTOR$1);
  useEffect(() => {
    if (!close && bottomsheetRef) {
      bottomsheetRef.focus();
    }
  }, [close]);
  useEscapeClose(closeFn, allowClose);
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...rest,
        rootRef,
        onBack: () => {
          props.stepperConfig?.onBack?.(props.stepperConfig.activeStep);
        },
        label: props.stepperConfig?.indicatorText,
        _onBottomSheetClick: (ev) => ev.stopPropagation(),
        close: !open,
        className,
        onCancel: () => {
          if (allowClose) {
            closeFn();
          }
        },
        onClose: () => {
          if (allowClose) {
            closeFn();
          }
        }
      }
    }
  );
};

const Component$1Y = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1S;
  const { kind = "overlay", controlType = "normal", buttonOrientation = "vertical", isCustom = false, close = true, primaryCtaDisabled = false, secondaryCtaDisabled = false, onClose = noop, onBack = noop, onCancel = noop, onPrimaryClick = noop, onSecondaryClick = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ kind, controlType, buttonOrientation, isCustom, close, primaryCtaDisabled, secondaryCtaDisabled, onClose, onBack, onCancel, onPrimaryClick, onSecondaryClick, ...rest }, componentTag },
    "JDSMobileBottomSheet",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const BottomSheet$1 = withLogic$1W(Component$1Y);
BottomSheet$1.displayName = "BottomSheet";
BottomSheet$1.slotName = "jds_mobile_bottom_sheet";

const PROP_MAP$r = (props) => {
  return {
    primaryCTA: {
      properties: {
        primaryCTA: resolvePropObjectKeys(props.primaryCTA, "title", ""),
        onPrimaryclick: props.primaryCTA?.onClick || props.onPrimaryClick
      }
    },
    secondaryCTA: {
      properties: {
        secondaryCTA: resolvePropObjectKeys(props.secondaryCTA, "title", ""),
        onSecondaryclick: props.secondaryCTA?.onClick || props.onSecondaryClick
      }
    }
  };
};
const BOTTOMSHEET_SELECTOR = "div.j-JDSDesktopBottomSheetInternal-root-container";
const withLogic$1V = (Component) => (userProps) => {
  const props = modifyProps(userProps, PROP_MAP$r);
  const { close, onRequestClose, onClose, ...rest } = props;
  const allowClose = !onRequestClose || onRequestClose();
  const closeFn = () => {
    if (allowClose) {
      onClose?.();
    }
  };
  const { element, rootRef } = useRootRef();
  const bottomsheetRef = element?.querySelector(BOTTOMSHEET_SELECTOR);
  useEffect(() => {
    if (!close && bottomsheetRef) {
      bottomsheetRef.focus();
    }
  }, [close]);
  const { mobile } = Devices.useMedia();
  useEscapeClose(closeFn, allowClose);
  if (mobile) {
    return /* @__PURE__ */ jsx(BottomSheet$1, { ...userProps });
  }
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...rest,
        rootRef,
        onBack: () => {
          props.stepperConfig?.onBack?.(props.stepperConfig.activeStep);
        },
        label: props.stepperConfig?.indicatorText,
        _onBottomSheetClick: (ev) => ev.stopPropagation(),
        close,
        onCancel: () => {
          if (allowClose) {
            closeFn();
          }
        },
        onClose: () => {
          if (allowClose) {
            closeFn();
          }
        }
      }
    }
  );
};

const Component$1X = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1T;
  const { kind = "overlay", controlType = "normal", buttonOrientation = "vertical", isCustom = false, close = true, primaryCtaDisabled = false, secondaryCtaDisabled = false, onClose = noop, onCancel = noop, onPrimaryClick = noop, onSecondaryClick = noop, onBack = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ kind, controlType, buttonOrientation, isCustom, close, primaryCtaDisabled, secondaryCtaDisabled, onClose, onCancel, onPrimaryClick, onSecondaryClick, onBack, ...rest }, componentTag },
    "JDSDesktopBottomSheet",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const BottomSheet = withLogic$1V(Component$1X);
BottomSheet.displayName = "BottomSheet";
BottomSheet.slotName = "jds_desktop_bottom_sheet";

const sdl$1R = { "metadata": { "version": "1.0.0", "id": "button-1.0.0", "name": "JDSButton", "layerName": "jds_button", "description": "A button is an interactive control that allows the user to perform a specific action.", "usage": "A button accepts a user choice, response or command." }, "hierarchy": { "container": [{ "left-container": ["left-icon", "jds-text"] }, "right-icon", "loader"] }, "base": { "container": { "opacity": "{b_0}", "background-color": "{b_1}", "flex-direction": "{b_2}", "align-items": "{b_3}", "justify-content": "{b_4}", "border-radius": "{b_5}", "border-width": "{b_6}", "border-color": "{b_7}", "gap": "{b_8}", "behavior": { "hover": { "background-color": "{b_10}" }, "active": { "background-color": "{b_11}" }, "focus": { "border-width": "{b_12}", "border-color": "{b_13}" } } }, "left-container": { "hidden": false, "flex-direction": "{b_14}", "align-items": "{b_15}", "justify-content": "{b_16}", "gap": "{b_17}", "flex-fill-android": false }, "loader": { "color": "{b_18}", "background-color": "{b_19}", "border-width": "{b_20}", "hidden": true, "opacity": "{b_21}", "size": "{b_22}" }, "left-icon": { "size": "{b_23}", "color": "{b_24}", "hidden": false }, "right-icon": { "size": "{b_25}", "color": "{b_26}", "hidden": false }, "jds-text": { "font-family": "{button}", "color": "{primaryInverse}", "font-size": "{button}", "line-height": "{button}", "letter-spacing": "{button}", "font-weight": "{button}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "language": "en" } }, "variant": { "_hasLabel": { "false": { "left-container": { "hidden": true } } }, "fullWidth": { "true": { "container": { "justify-content": "{b_28}", "width": "{b_27}", "gap": 0 } } }, "disabled": { "true": { "container": { "disabled": true, "opacity": "{b_29}" } } }, "loading": { "true": { "container": { "disabled": true }, "loader": { "hidden": false }, "right-icon": { "hidden": true } } }, "_hasRightIcon": { "false": { "right-icon": { "hidden": true } } }, "_hasLeftIcon": { "false": { "left-icon": { "hidden": true } } } }, "combination": [{ "primary": { "normal": { "left-icon": { "behavior": { "active": { "color": "{b_30}" } } }, "right-icon": { "behavior": { "active": { "color": "{b_31}" } } }, "jds-text": { "behavior": { "hover": {}, "active": { "color": "{primary30}" } } } }, "destructive": { "container": { "background-color": "{b_32}", "behavior": { "hover": { "background-color": "{b_33}" }, "active": { "background-color": "{b_34}" }, "focus": { "border-color": "{b_35}" } } }, "loader": { "color": "{b_36}" }, "left-icon": { "color": "{b_37}", "behavior": { "hover": { "color": "{b_38}" }, "active": { "color": "{b_39}" } } }, "right-icon": { "color": "{b_41}", "behavior": { "hover": { "color": "{b_40}" }, "active": { "color": "{b_42}" } } }, "jds-text": { "color": "{feedbackError80}", "behavior": { "hover": { "color": "{global.white}" }, "active": { "color": "{feedbackError20}" } } } }, "positive": { "container": { "background-color": "{b_43}", "behavior": { "hover": { "background-color": "{b_44}" }, "active": { "background-color": "{b_45}" }, "focus": { "border-color": "{b_46}" } } }, "loader": { "color": "{b_47}" }, "left-icon": { "color": "{b_48}", "behavior": { "hover": { "color": "{b_49}" }, "active": { "color": "{b_50}" } } }, "right-icon": { "color": "{b_51}", "behavior": { "hover": { "color": "{b_52}" }, "active": { "color": "{b_53}" } } }, "jds-text": { "color": "{feedbackSuccess80}", "behavior": { "hover": { "color": "{global.white}" }, "active": { "color": "{feedbackSuccess20}" } } } } }, "secondary": { "normal": { "container": { "background-color": "{b_54}", "border-width": "{b_55}", "border-color": "{b_56}", "behavior": { "hover": { "border-color": "{b_57}", "background-color": "{b_58}" }, "active": { "background-color": "{b_59}", "border-color": "{b_60}" }, "focus": { "border-color": "{b_61}" } } }, "loader": { "color": "{b_62}" }, "left-icon": { "color": "{b_63}" }, "right-icon": { "color": "{b_64}" }, "jds-text": { "color": "{primary60}" } }, "destructive": { "container": { "background-color": "{b_65}", "border-width": "{b_66}", "border-color": "{b_67}", "behavior": { "active": { "background-color": "{b_68}", "border-color": "{b_69}" }, "focus": { "border-color": "{b_70}", "border-width": "{b_71}" } } }, "loader": { "color": "{b_72}" }, "left-icon": { "color": "{b_73}" }, "right-icon": { "color": "{b_74}" }, "jds-text": { "color": "{feedbackError80}" } }, "positive": { "container": { "background-color": "{b_75}", "border-width": "{b_76}", "border-color": "{b_77}", "behavior": { "active": { "background-color": "{b_78}", "border-color": "{b_79}" }, "focus": { "border-color": "{b_80}", "border-width": "{b_81}" } } }, "loader": { "color": "{b_82}" }, "left-icon": { "color": "{b_83}" }, "right-icon": { "color": "{b_84}" }, "jds-text": { "color": "{feedbackSuccess80}" } } }, "tertiary": { "normal": { "container": { "border-width": "{b_9}", "background-color": "{b_85}", "behavior": { "hover": { "background-color": "{b_86}" }, "active": { "background-color": "{b_87}" }, "focus": { "border-color": "{b_88}", "background-color": "{b_89}" } } }, "loader": { "color": "{b_90}" }, "left-icon": { "color": "{b_91}" }, "right-icon": { "color": "{b_92}" }, "jds-text": { "color": "{primary60}" } }, "destructive": { "container": { "background-color": "{b_93}", "behavior": { "hover": { "background-color": "{b_94}" }, "active": { "background-color": "{b_95}" }, "focus": { "border-color": "{b_96}", "border-width": "{b_97}", "background-color": "{b_98}" } } }, "loader": { "color": "{b_99}" }, "left-icon": { "color": "{b_100}" }, "right-icon": { "color": "{b_101}" }, "jds-text": { "color": "{feedbackError80}" } }, "positive": { "container": { "background-color": "{b_102}", "behavior": { "active": { "background-color": "{b_103}" }, "focus": { "border-color": "{b_104}", "border-width": "{b_105}" } } }, "loader": { "color": "{b_106}" }, "left-icon": { "color": "{b_107}" }, "right-icon": { "color": "{b_108}" }, "jds-text": { "color": "{feedbackSuccess80}" } } } }, { "true": { "small": { "container": { "padding-top": "{b_109}", "padding-right": "{b_110}", "padding-bottom": "{b_111}", "padding-left": "{b_112}" }, "left-icon": { "size": "{b_113}" }, "right-icon": { "size": "{b_114}" }, "loader": { "size": "{b_115}" } }, "medium": { "container": { "padding-top": "{b_116}", "padding-right": "{b_117}", "padding-bottom": "{b_118}", "padding-left": "{b_119}" }, "left-icon": { "size": "{b_120}" }, "right-icon": { "size": "{b_121}" }, "loader": { "size": "{b_122}" } }, "large": { "container": { "padding-top": "{b_123}", "padding-left": "{b_124}", "padding-bottom": "{b_125}", "padding-right": "{b_126}" }, "left-icon": { "size": "{b_127}" }, "right-icon": { "size": "{b_128}" }, "loader": { "size": "{b_129}" } } }, "false": { "small": { "container": { "min-height": "{b_130}", "min-width": "{b_131}" }, "left-icon": { "size": "{b_132}" }, "right-icon": { "size": "{b_133}" }, "loader": { "size": "{b_134}" }, "jds-text": { "hidden": true } }, "medium": { "container": { "min-height": "{b_135}", "min-width": "{b_136}" }, "left-icon": { "size": "{b_137}" }, "right-icon": { "size": "{b_138}" }, "loader": { "size": "{b_139}" }, "jds-text": { "hidden": true } }, "large": { "container": { "min-height": 56, "min-width": 56 }, "left-icon": { "size": "{b_140}" }, "right-icon": { "size": "{b_141}" }, "loader": { "size": "{b_142}" }, "jds-text": { "hidden": true } } } }, { "true": { "true": { "true": { "false": { "false": { "container": { "justify-content": "{b_143}" } }, "true": { "container": { "justify-content": "{b_144}" } } } } }, "false": { "false": { "true": { "false": { "container": { "justify-content": "{b_145}" } } }, "false": { "true": { "container": { "justify-content": "{b_146}" } } } }, "true": { "true": { "false": { "container": { "justify-content": "{b_147}" } } } } } } }], "combination_config": [["kind", "state"], ["_hasLabel", "size"], ["fullWidth", "_hasRightIcon", "_hasLeftIcon", "_hasLabel", "loading"]], "api": { "config": { "kind": { "values": ["primary", "secondary", "tertiary"], "doc_description": "It can be used to switch between 3 variants of Button which is by default 'primary'." }, "size": { "values": ["medium", "small", "large"], "doc_description": "it can be used to control the size of Button." }, "state": { "values": ["normal", "destructive", "positive"], "doc_description": "It can be used to change the state of Button." }, "fullWidth": { "values": [false, true], "doc_description": "It can be used to make Button full-width." }, "disabled": { "values": [false, true], "doc_description": "It can be used to enable or disable Button." }, "_hasRightIcon": { "values": [true, false] }, "_hasLeftIcon": { "values": [true, false] }, "loading": { "values": [false, true], "doc_description": "This can be used to add loading spinner to the right of label in Button." }, "_hasLabel": { "values": [true, false] } }, "data": { "container": { "type": { "name": "type", "type": "string", "platform": "web" } }, "left-icon": { "value": { "type": "icon", "name": "iconLeft", "doc_description": "It can be used to add icon to the left of the text of Button." }, "description": { "type": "string", "name": "description", "required": false } }, "right-icon": { "value": { "type": "icon", "name": "icon", "doc_description": "It adds icon to the right of the text of Button." }, "description": { "type": "string", "name": "description", "required": false } }, "jds-text": { "value": { "type": "string", "name": "label", "doc_description": "It displays label of Button." } } }, "events": { "container": { "onClick": "onClick", "onFocus": { "name": "onFocus", "platform": "web" }, "onBlur": { "name": "onBlur", "platform": "web" } } }, "a11y": { "container": { "properties": { "role": { "value": "button" }, "aria-label": { "name": "ariaLabel", "prop": "label" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" }, "aria-expanded": "ariaExpanded", "aria-controls": "ariaControls" } }, "right-icon": { "properties": { "role": { "value": "img" }, "aria-label": { "name": "iconAriaLabel", "function": true } } } } } };

const withLogic$1U = (Component) => forwardRef((props, ref) => {
  const hasLabel = Boolean(props.children || props.title || props.label);
  if (props.children) {
    console.warn("children prop is deprecated. Use label instead");
  }
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        rootRef: ref,
        label: props.children || props.label || props.title,
        _hasRightIcon: Boolean(props.icon),
        _hasLabel: hasLabel,
        iconAriaLabel: props.iconAriaLabel || formatIconName(props.icon)
      }
    }
  );
});

const Component$1W = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1R;
  const { kind = "primary", size = "medium", state = "normal", fullWidth = false, disabled = false, loading = false, onClick = noop, onFocus = noop, onBlur = noop, ariaLabel = props.label?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ kind, size, state, fullWidth, disabled, loading, onClick, onFocus, onBlur, ariaLabel, ...rest }, componentTag },
    "JDSButton",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const Button = withLogic$1U(Component$1W);
Button.displayName = "Button";
Button.slotName = "jds_button";

const sdl$1Q = { "metadata": { "version": "1.0.0", "id": "carousel-pagination-1.0.0", "name": "JDSCarouselPagination", "layerName": "jds_carousel_pagination" }, "hierarchy": { "container": ["jds_carousel_pagination_item"] }, "base": { "container": { "hidden": false, "flex-direction": "{c_0}", "justify-content": "{c_1}", "align-items": "{c_2}", "gap": "{c_3}", "padding-top": "{c_4}", "padding-bottom": "{c_6}" }, "jds_carousel_pagination_item": { "density": "relaxed" } }, "variant": { "density": { "condensed": { "container": { "gap": "{c_7}" }, "jds_carousel_pagination_item": { "density": "condensed" } } } }, "combination": [{}], "combination_config": [[]], "api": { "config": { "density": { "type": "JDSCarouselPaginationItem.density", "values": ["relaxed", "condensed"] } }, "data": { "container": { "value": { "type": "list", "name": "items", "object": { "active": "boolean", "kind": "JDSCarouselPaginationItem.kind" } } }, "jds_carousel_pagination_item": { "active": { "type": "boolean", "name": "items.active" }, "kind": { "type": "JDSCarouselPaginationItem.kind", "name": "items.kind" } } }, "events": { "jds_carousel_pagination_item": { "onDotClick": "onDotClick" } }, "a11y": { "container": { "properties": { "role": { "value": "presentation" } } } } } };

function getPaginationItemKind(currentIndex, kind, visibleArray, selectedIndex, total) {
  if (kind !== "diminishing") {
    return "normal";
  }
  if (visibleArray[0] === currentIndex && selectedIndex > 4 || visibleArray[visibleArray.length - 1] === currentIndex && selectedIndex < total - 3) {
    return "tail_dot_small";
  }
  if (visibleArray[1] === currentIndex && selectedIndex > 4 || visibleArray[visibleArray.length - 2] === currentIndex && selectedIndex < total - 3) {
    return "tail_dot_large";
  }
  return "normal";
}
const getVisibleItems = (selectedIndex, total) => {
  let leftCount, rightCount;
  if (selectedIndex === total - 1) {
    leftCount = 6;
    rightCount = 0;
  } else if (selectedIndex === total - 2) {
    leftCount = 5;
    rightCount = 2;
  } else {
    leftCount = Math.min(selectedIndex, 4);
    leftCount = leftCount < 0 ? 0 : leftCount;
    rightCount = 7 - leftCount;
    rightCount = rightCount > total ? total : rightCount;
  }
  let left = Array.from({ length: leftCount + 1 }).map(
    (_, i) => selectedIndex - i
  );
  left.reverse();
  const right = Array.from({ length: rightCount }).map(
    (_, i) => selectedIndex + i
  );
  return Array.from(/* @__PURE__ */ new Set([...left, selectedIndex, ...right]));
};

const withLogic$1T = (Component) => (props) => {
  const { selectedIndex = 0, count, kind } = props;
  const visibleItems = getVisibleItems(selectedIndex, count);
  const items = Array.from({ length: count }).map((_, index) => {
    const itemKind = getPaginationItemKind(
      index,
      count > 7 ? "diminishing" : "normal",
      visibleItems,
      selectedIndex,
      count
    );
    const isHidden = count > 7 && !visibleItems.includes(index);
    return {
      active: selectedIndex === index,
      kind: itemKind,
      internalClasses: [isHidden ? "hide" : ""].join(" ")
    };
  });
  return /* @__PURE__ */ jsx(
    "div",
    {
      style: {
        position: "relative"
      },
      children: /* @__PURE__ */ jsx(Component, { ...{ ...props, items } })
    }
  );
};

const Component$1V = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1Q;
  const { density = "undefined", onDotClick = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ density, onDotClick, ...rest }, componentTag },
    "JDSCarouselPagination",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const CarouselPagination = withLogic$1T(Component$1V);
CarouselPagination.displayName = "CarouselPagination";
CarouselPagination.slotName = "jds_carousel_pagination";

const sdl$1P = { "metadata": { "version": "1.0.0", "id": "carousel-pagination-item-1.0.0", "name": "JDSCarouselPaginationItem", "layerName": "jds_carousel_pagination_item", "internal": true }, "hierarchy": { "container": [] }, "base": { "container": { "width": "{c_0}", "height": "{c_1}", "background-color": "{c_2}", "opacity": "{c_3}", "border-radius": "{c_4}", "show": true, "behavior": { "hover": { "background-color": "{c_5}", "opacity": "{c_6}" }, "active": { "background-color": "{c_7}", "opacity": "{c_8}" } } } }, "variant": { "density": { "condensed": { "container": { "height": "{c_9}" } } }, "active": { "true": { "container": { "opacity": "{c_10}", "behavior": { "hover": { "background-color": "{c_11}" }, "active": { "background-color": "{c_12}" } } } } }, "kind": { "label": { "container": { "hidden": true } }, "none": { "container": { "hidden": true } } } }, "combination": [{ "condensed": { "false": { "normal": { "container": { "width": "{c_18}" } }, "tail_dot_large": { "container": { "width": "{c_19}", "height": "{c_20}" } }, "tail_dot_small": { "container": { "width": "{c_21}", "height": "{c_22}" } }, "invisible": { "container": { "show": false } } }, "true": { "normal": { "container": { "width": "{c_23}" } }, "tail_dot_large": { "container": { "width": "{c_24}" } }, "tail_dot_small": { "container": { "width": "{c_25}" } }, "invisible": { "container": { "show": false } } } }, "relaxed": { "false": { "normal": { "container": { "width": "{c_13}" } }, "tail_dot_large": { "container": { "width": "{c_14}", "height": "{c_15}" } }, "tail_dot_small": { "container": { "width": "{c_16}", "height": "{c_17}" } }, "invisible": { "container": { "show": false } } }, "true": { "normal": { "container": { "width": "{c_26}" } }, "tail_dot_large": { "container": { "width": "{c_27}" } }, "tail_dot_small": { "container": { "width": "{c_28}" } }, "invisible": { "container": { "show": false } } } } }], "combination_config": [["density", "active", "kind"]], "api": { "config": { "kind": { "values": ["normal", "tail_dot_large", "tail_dot_small", "invisible"] }, "density": { "values": ["relaxed", "condensed"] }, "active": { "values": [false, true] } }, "events": { "container": { "onClick": "onDotClick" } }, "a11y": { "container": { "properties": { "role": { "value": "presentation" } } } }, "data": {} } };

const withLogic$1S = (Component) => (props) => {
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        onDotClick: () => props.onDotClick?.(props.internalIndex),
        className: props.internalClasses
      }
    }
  );
};

const Component$1U = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1P;
  const { kind = "normal", density = "relaxed", active = false, onDotClick = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ kind, density, active, onDotClick, ...rest }, componentTag },
    "JDSCarouselPaginationItem",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const CarouselPaginationItem = withLogic$1S(Component$1U);
CarouselPaginationItem.displayName = "CarouselPaginationItem";
CarouselPaginationItem.slotName = "jds_carousel_pagination_item";

const sdl$1O = { "metadata": { "version": "1.0.0", "id": "carousel-slide-1.0.0", "name": "JDSCarouselSlide", "layerName": "jds_carousel_slide" }, "hierarchy": { "container": ["slide-slot"] }, "base": { "container": { "hidden": true, "width": "{c_0}", "border-radius": "{c_1}", "enter-animation-name": "slideHorizontallyToLeft", "exit-animation-name": "slideHorizontallyToLeft", "padding-left": "{xxs}", "padding-right": "{xxs}", "web-cursor": "pointer" } }, "variant": { "active": { "true": { "container": { "hidden": false } } }, "forward": { "false": { "container": { "enter-animation-name": "slideHorizontallyToRight", "exit-animation-name": "slideHorizontallyToRight" } } }, "_platform": { "desktop": { "container": { "padding-left": 0, "padding-right": 0 } } } }, "api": { "config": { "active": { "values": [false, true] }, "forward": { "values": [true, false] }, "_platform": { "values": ["tablet", "desktop"] } }, "children": { "slide-slot": { "name": "children", "accepts": ["any"], "max": 1 } }, "events": { "container": { "onClick": "onClick", "onSwipeLeft": "onSwipeLeft", "onSwipeRight": "onSwipeRight" } }, "data": {} } };

const makeClass = (classes) => classes.filter((e) => e).join(" ").trim();
const setCSSVar = (obj) => {
  Object.keys(obj).forEach((key) => obj[key] === void 0 && delete obj[key]);
  return obj;
};
const getPlatform = () => {
  if (Devices.isMobile()) {
    return "mobile";
  }
  if (Devices.isTablet())
    return "tablet";
  return "desktop";
};

const withLogic$1R = (Component) => (props) => {
  const internalProps = props;
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        active: true,
        platform: getPlatform(),
        onPointerDown: (ev) => {
          internalProps?.onSwipeLeft?.(ev, { type: "touchdown" });
        },
        onPointerMove: (ev) => {
          internalProps?.onSwipeLeft?.(ev, { type: "touchmove" });
        },
        onPointerUp: (ev) => {
          internalProps?.onSwipeLeft?.(ev, { type: "touchup" });
        },
        onDragStart: (ev) => {
          ev.preventDefault();
        },
        onDragEnd: (ev) => {
          ev.preventDefault();
        }
      }
    }
  );
};

const Component$1T = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1O;
  const { active = false, forward = true, onClick = noop, onSwipeLeft = noop, onSwipeRight = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ active, forward, onClick, onSwipeLeft, onSwipeRight, ...rest }, componentTag },
    "JDSCarouselSlide",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const CarouselSlide = withLogic$1R(Component$1T);
CarouselSlide.displayName = "CarouselSlide";
CarouselSlide.slotName = "jds_carousel_slide";

const sdl$1N = { "metadata": { "version": "1.0.0", "id": "content-block-1.0.0", "name": "JDSContentBlock", "layerName": "jds_content_block" }, "hierarchy": { "root-container": [{ "inner-container": [{ "caption-container": ["caption-slot"] }, "title-jds-text", "description-jds-text", { "children-container": ["children-slot"] }] }, { "button-container": ["primary-jds_button", "secondary-jds_button", "primary-inverted-jds_button"] }] }, "base": { "root-container": { "flex-direction": "{c_0}", "align-items": "{c_1}", "justify-content": "{c_2}", "width": "{c_3}", "gap": "{m}" }, "inner-container": { "flex-direction": "{c_4}", "align-items": "{c_5}", "justify-content": "{c_6}" }, "caption-container": { "padding-bottom": "{c_8}", "hidden": false }, "children-container": { "hidden": false }, "button-container": { "flex-direction": "{c_12}", "gap": "{c_14}" }, "primary-jds_button": { "kind": "primary", "size": "small", "hidden": false }, "secondary-jds_button": { "kind": "secondary", "size": "small" }, "primary-inverted-jds_button": { "kind": "primary", "size": "small", "hidden": true }, "title-jds-text": { "font-family": "{headingXs}", "color": "{primaryGrey100}", "font-size": "{headingXs}", "line-height": "{headingXs}", "letter-spacing": "{headingXs}", "font-weight": "{headingXs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "padding-bottom": "{c_9}" }, "description-jds-text": { "font-family": "{bodyS}", "color": "{primaryGrey80}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "padding-bottom": "{c_10}" } }, "variant": { "size": { "xtra-xtra-small": { "title-jds-text": { "font-family": "{bodySBold}", "font-size": "{bodySBold}", "line-height": "{bodySBold}", "letter-spacing": "{bodySBold}", "font-weight": "{bodySBold}" } }, "small": { "title-jds-text": { "font-family": "{headingS}", "font-size": "{headingS}", "line-height": "{headingS}", "letter-spacing": "{headingS}", "font-weight": "{headingS}", "padding-bottom": "{c_15}" }, "description-jds-text": { "font-family": "{bodyM}", "font-size": "{bodyM}", "line-height": "{bodyM}", "letter-spacing": "{bodyM}", "font-weight": "{bodyM}" } }, "medium": { "caption-container": { "padding-bottom": "{c_16}" }, "button-container": { "gap": "{c_18}" }, "primary-jds_button": { "size": "medium" }, "secondary-jds_button": { "size": "medium" }, "primary-inverted-jds_button": { "size": "medium" }, "title-jds-text": { "font-family": "{headingM}", "font-size": "{headingM}", "line-height": "{headingM}", "letter-spacing": "{headingM}", "font-weight": "{headingM}", "padding-bottom": "{c_17}" }, "description-jds-text": { "font-family": "{bodyM}", "font-size": "{bodyM}", "line-height": "{bodyM}", "letter-spacing": "{bodyM}", "font-weight": "{bodyM}" } }, "large": { "caption-container": { "padding-bottom": "{c_19}" }, "button-container": { "gap": "{c_22}" }, "primary-jds_button": { "size": "large" }, "secondary-jds_button": { "size": "large" }, "primary-inverted-jds_button": { "size": "large" }, "title-jds-text": { "font-family": "{headingL}", "font-size": "{headingL}", "line-height": "{headingL}", "letter-spacing": "{headingL}", "font-weight": "{headingL}", "padding-bottom": "{c_20}" }, "description-jds-text": { "font-family": "{bodyL}", "font-size": "{bodyL}", "line-height": "{bodyL}", "letter-spacing": "{bodyL}", "font-weight": "{bodyL}" } }, "xtra-large": { "caption-container": { "padding-bottom": "{c_23}" }, "button-container": { "gap": "{c_26}" }, "primary-jds_button": { "size": "large" }, "secondary-jds_button": { "size": "large" }, "primary-inverted-jds_button": { "size": "large" }, "title-jds-text": { "font-family": "{headingXl}", "font-size": "{headingXl}", "line-height": "{headingXl}", "letter-spacing": "{headingXl}", "font-weight": "{headingXl}", "padding-bottom": "{c_24}" }, "description-jds-text": { "font-family": "{bodyL}", "font-size": "{bodyL}", "line-height": "{bodyL}", "letter-spacing": "{bodyL}", "font-weight": "{bodyL}" } } }, "invertCTA": { "true": { "primary-jds_button": { "hidden": true }, "primary-inverted-jds_button": { "hidden": false } } }, "ctaWrap": { "vertical": { "button-container": { "flex-direction": "{c_27}" }, "primary-jds_button": { "fullWidth": true }, "secondary-jds_button": { "fullWidth": true }, "primary-inverted-jds_button": { "fullWidth": true } } }, "shouldOverrideColor": { "true": { "title-jds-text": { "color": "{global.white}" }, "description-jds-text": { "color": "{global.white}" } } }, "singleButton": { "false": { "inner-container": { "width": "{c_28}" }, "button-container": { "width": "{c_29}" } } }, "isTertiary": { "true": { "secondary-jds_button": { "kind": "tertiary" } } }, "_hasCaptionSlot": { "false": { "caption-container": { "hidden": true } } }, "_hasChildrenSlot": { "false": { "children-container": { "hidden": true }, "description-jds-text": { "padding-bottom": "{custom_5}" } } }, "_hasDescription": { "false": { "description-jds-text": { "hidden": true } } } }, "combination": [{ "desktop": { "medium": { "title-jds-text": { "padding-bottom": "{c_30}" } }, "large": { "title-jds-text": { "padding-bottom": "{c_31}" } }, "xtra-large": { "title-jds-text": { "padding-bottom": "{c_32}" } } } }, { "true": { "xtra-xtra-small": { "root-container": { "flex-direction": "{c_33}", "justify-content": "{c_34}", "align-items": "{c_35}" }, "button-container": { "flex-direction": "{c_36}", "justify-content": "{c_37}", "align-items": "{c_38}" }, "inner-container": { "flex": 1 }, "primary-jds_button": { "hidden": false }, "secondary-jds_button": { "hidden": true }, "primary-inverted-jds_button": { "hidden": true } } } }, { "false": { "false": { "title-jds-text": { "padding-bottom": "{custom_5}" } } } }], "combination_config": [["_platform", "size"], ["singleButton", "size"], ["_hasChildrenSlot", "_hasDescription"]], "api": { "config": { "_platform": { "values": ["mobile", "desktop"] }, "size": { "values": ["xtra-small", "xtra-xtra-small", "small", "medium", "large", "xtra-large"], "doc_description": "It can be used to control the size of ContentBlock." }, "ctaWrap": { "values": ["horizontal", "vertical"], "doc_description": "It can be used to either wrap the primary button, secondary button horizontally or vertically." }, "invertCTA": { "values": [false, true], "doc_description": "It inverts the order of the CTAs if true." }, "shouldOverrideColor": { "values": [false, true] }, "singleButton": { "values": [false, true] }, "isTertiary": { "values": [false, true] }, "_hasCaptionSlot": { "values": [true, false] }, "_hasChildrenSlot": { "values": [true, false] }, "_hasDescription": { "values": [true, false] } }, "data": { "primary-jds_button": { "label": { "type": "string", "name": "primaryCTA", "doc_description": "It displays label of secondary button of Toast." } }, "secondary-jds_button": { "label": { "type": "string", "name": "secondaryCTA", "doc_description": "It displays label of primary button of Toast." } }, "primary-inverted-jds_button": { "label": { "type": "string", "name": "primaryCTA", "doc_description": "It displays label of secondary button of Toast." } }, "title-jds-text": { "value": { "type": "string", "name": "title", "doc_description": "It displays the title of ContentBlock." } }, "description-jds-text": { "value": { "type": "string", "name": "description", "doc_description": "It can be used to add description to the ContentBlock." } } }, "children": { "caption-slot": { "name": "caption", "accepts": ["jds_text", "jds_badge", "jds_tag"], "max": 1, "doc_description": "It displays the header of the ContentBlock. Can be 'badge', 'text', 'tag'." }, "children-slot": { "name": "children", "accepts": ["any"], "max": 1 } }, "events": { "primary-jds_button": { "onClick": "onPrimaryClick" }, "secondary-jds_button": { "onClick": "onSecondaryClick" }, "primary-inverted-jds_button": { "onClick": "onPrimaryClick" } }, "a11y": { "primary-jds_button": { "properties": { "ariaLabel": "primaryCtaAriaLabel", "ariaDescribedby": { "name": "primaryCtaAriaDescribedby", "platform": "web,ios" } } }, "secondary-jds_button": { "properties": { "ariaLabel": "secondaryCtaAriaLabel", "ariaDescribedby": { "name": "secondaryCtaAriaDescribedby", "platform": "web,ios" } } }, "primary-inverted-jds_button": { "properties": { "ariaLabel": "primaryCtaAriaLabel", "ariaDescribedby": { "name": "primaryCtaAriaDescribedby", "platform": "web,ios" } } } } } };

const legacySizes$2 = ["m", "l", "xl", "s", "xs", "xxs"];
const PROP_MAP$q = (props) => {
  if (legacySizes$2.includes(props.size)) {
    console.warn(
      legacySizes$2.join(","),
      "are deprecated. Use sizes staring with xtra, large, small"
    );
  }
  return {
    primaryCTA: {
      properties: {
        primaryCTA: resolvePropObjectKeys(props.primaryCTA, "title", ""),
        onPrimaryClick: props.onPrimaryClick || props.primaryCTA?.onClick
      }
    },
    secondaryCTA: {
      properties: {
        secondaryCTA: resolvePropObjectKeys(props.secondaryCTA, "title", ""),
        onSecondaryClick: props.onSecondaryClick || props.secondaryCTA?.onClick
      }
    },
    size: {
      defaultValue: "xtra-small",
      variations: {
        s: {
          size: "small"
        },
        m: {
          size: "medium"
        },
        xs: {
          size: "xtra-small"
        },
        xxs: {
          size: "xtra-xtra-small"
        },
        l: {
          size: "large"
        },
        xl: {
          size: "xtra-large"
        }
      }
    }
  };
};

const sizeMap = {
  xxs: "small",
  xs: "small",
  s: "small",
  m: "medium",
  l: "large",
  xl: "xtra-large",
  "xtra-small": "small",
  "xtra-xtra-small": "small",
  "xtra-large": "large"
};
const withLogic$1Q = (Component) => (userProps) => {
  const props = modifyProps(userProps, PROP_MAP$q);
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        caption: props.caption ? cloneElement(props.caption, {
          size: sizeMap[props.size] || props.size
        }) : void 0,
        _hasCaptionSlot: Boolean(props.caption),
        _hasChildrenSlot: Boolean(props.children),
        _platform: Devices.isDesktop() ? "desktop" : "mobile"
      }
    }
  );
};

const Component$1S = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1N;
  const { size = "xtra-small", ctaWrap = "horizontal", invertCTA = false, shouldOverrideColor = false, singleButton = false, isTertiary = false, onPrimaryClick = noop, onSecondaryClick = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ size, ctaWrap, invertCTA, shouldOverrideColor, singleButton, isTertiary, onPrimaryClick, onSecondaryClick, ...rest }, componentTag },
    "JDSContentBlock",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const ContentBlock = withLogic$1Q(Component$1S);
ContentBlock.displayName = "ContentBlock";
ContentBlock.slotName = "jds_content_block";

const JDSDatepickerDesktop = { "metadata": { "version": "1.0.0", "id": "date-picker-desktop-1.0.0", "name": "JDSDatepickerDesktop", "layerName": "jds_datepicker_desktop", "platform": "web" }, "hierarchy": { "popup": [{ "popup-container": ["jds_datepicker_desktop_internal"] }] }, "base": { "popup": { "priority": 70, "passive": true }, "popup-container": { "hidden": true, "flex-direction": "{d_0}", "justify-content": "{d_1}", "align-items": "{d_2}", "opacity": "{opacity.invisible}", "transition": { "property": ["opacity"], "duration": "{medium}", "timing-function": "{easeExit}" } } }, "variant": { "open": { "true": { "popup": { "passive": false }, "popup-container": { "hidden": false, "opacity": "{opacity.enabled}", "transition": { "timing-function": "{easeEntrance}" } } } } }, "combination": [{}], "combination_config": [[]], "api": { "config": { "state": { "values": ["default", "month_view", "year_view"] }, "open": { "values": [false, true] } }, "data": { "popup-container": { "padding-left": { "type": "size", "name": "offsetX" }, "padding-top": { "type": "size", "name": "offsetY" } }, "jds_datepicker_desktop_internal": { "triggerRef": { "type": "ref", "name": "triggerRef" }, "monthName": { "type": "string", "name": "monthName" }, "year": { "type": "number", "name": "year" }, "yearSelectable": { "type": "boolean", "name": "yearSelectable" }, "monthSelectable": { "type": "boolean", "name": "monthSelectable" }, "months": { "type": "list", "name": "months", "object": { "name": "string", "selected": "boolean", "disabled": "boolean" } }, "current": { "type": "number", "name": "year" }, "yearData": { "type": "object", "name": "yearData", "object": { "count": "number", "disabled": "list", "min": "number", "max": "number" } }, "loadedYears": { "type": "list", "name": "loadedYears", "object": { "name": "string", "selected": "boolean", "disabled": "boolean" } }, "date": { "type": "number", "name": "date" }, "month": { "type": "number", "name": "month" }, "value": { "type": "date", "name": "value" }, "calendarData": { "type": "object", "name": "calendarData", "object": { "disabledDays": "list", "disabledDates": "list", "max": "date", "min": "date" } }, "yearLoadCount": { "type": "number", "platform": "web", "name": "yearLoadCount" }, "days": { "type": "JDSDatepickerCalendarHeader.days", "name": "days", "object": { "letter": "string" } }, "row": { "type": "list", "name": "rows.row", "object": { "value": "string", "state": "JDSDatepickerCalendarButton.state" } } } }, "events": { "popup": { "onClick": "onClose" }, "jds_datepicker_desktop_internal": { "onClose": "onClose", "onSelect": "onSelect" } }, "a11y": { "jds_datepicker_desktop_internal": { "properties": { "previousButtonAriaLabel": "previousButtonAriaLabel", "closeAriaLabel": "closeAriaLabel", "previousMonthAriaLabel": "previousMonthAriaLabel", "nextMonthAriaLabel": "nextMonthAriaLabel" } } } } };

const sdl$1M = { "metadata": { "version": "1.0.0", "id": "date-picker-mobile-1.0.0", "name": "JDSDatepickerMobile", "layerName": "jds_datepicker_mobile" }, "hierarchy": { "popup": ["jds_datepicker_mobile_internal"] }, "base": { "popup": { "priority": 70, "passive": true }, "jds_datepicker_mobile_internal": { "state": "default", "open": false } }, "variant": { "state": { "month_view": { "jds_datepicker_mobile_internal": { "state": "month_view" } }, "year_view": { "jds_datepicker_mobile_internal": { "state": "year_view" } } }, "open": { "true": { "popup": { "passive": false }, "jds_datepicker_mobile_internal": { "open": true } } } }, "combination": [{}], "combination_config": [[]], "api": { "config": { "state": { "values": ["default", "month_view", "year_view"] }, "open": { "values": [false, true] } }, "data": { "jds_datepicker_mobile_internal": { "monthName": { "type": "string", "name": "monthName" }, "year": { "type": "string", "name": "year" }, "showArrows": { "type": "boolean", "name": "showArrows" }, "yearSelectable": { "type": "boolean", "name": "yearSelectable" }, "monthSelectable": { "type": "boolean", "name": "monthSelectable" }, "months": { "type": "list", "name": "months", "object": { "name": "string", "selected": "boolean", "disabled": "boolean" } }, "current": { "type": "number", "name": "year" }, "yearData": { "type": "object", "name": "yearData", "object": { "count": "number", "disabled": "list", "min": "number", "max": "number" } }, "loadedYears": { "type": "list", "name": "loadedYears", "object": { "name": "string", "selected": "boolean", "disabled": "boolean" } }, "date": { "type": "number", "name": "date" }, "month": { "type": "number", "name": "month" }, "value": { "type": "date", "name": "value" }, "calendarData": { "type": "object", "name": "calendarData", "object": { "disabledDays": "list", "disabledDates": "list", "max": "date", "min": "date" } }, "calendarDays": { "type": "JDSDatepickerCalendarHeader.days", "name": "_calendarDays" }, "calendarRows": { "type": "JDSDatepickerCalendar.rows", "name": "_calendarRows" }, "confirmDate": { "type": "string", "name": "confirmDate" } } }, "events": { "jds_datepicker_mobile_internal": { "onClose": "onClose", "onConfirm": "onConfirm" } }, "a11y": { "jds_datepicker_mobile_internal": { "properties": { "previousButtonAriaLabel": "previousButtonAriaLabel", "closeAriaLabel": "closeAriaLabel", "previousMonthAriaLabel": "previousMonthAriaLabel", "nextMonthAriaLabel": "nextMonthAriaLabel", "confirmAriaLabel": "confirmAriaLabel" } } } } };

const DatePickerWidth = 384;
const setPositions$1 = (position = "left-end", container, trigger) => {
  if (!trigger || !container) {
    return { left: 0, top: 0 };
  }
  const triggerBounds = trigger.getBoundingClientRect();
  const triggerOffsetTop = trigger.getBoundingClientRect()?.top;
  const triggerOffsetLeft = trigger.getBoundingClientRect()?.left;
  const bodyHeight = document.body.clientHeight;
  const bodyWidth = document.body.clientWidth;
  const datePickerHeight = 484;
  let left = 0;
  let top;
  let height;
  let width;
  switch (position) {
    case "right-start":
    case "left-start":
      top = triggerOffsetTop;
      if (top + datePickerHeight > bodyHeight) {
        top = triggerOffsetTop + triggerBounds.height / 2 - datePickerHeight / 2;
      }
      if (top + datePickerHeight > bodyHeight) {
        top = triggerOffsetTop + triggerBounds.height - datePickerHeight;
      }
      break;
    case "right-end":
    case "left-end":
      top = triggerOffsetTop + triggerBounds.height - datePickerHeight;
      if (top < 0) {
        top = triggerOffsetTop + triggerBounds.height / 2 - datePickerHeight / 2;
      }
      if (top < 0) {
        top = triggerOffsetTop;
      }
      if (left + DatePickerWidth > bodyWidth) {
        left = triggerOffsetLeft - DatePickerWidth;
      }
      break;
    case "right":
    case "left":
      top = triggerOffsetTop + triggerBounds.height / 2 - datePickerHeight / 2;
      if (triggerOffsetTop + triggerBounds.height / 2 - datePickerHeight / 2 < 0) {
        top = triggerOffsetTop;
      }
      if (triggerOffsetTop + triggerBounds.height / 2 + datePickerHeight / 2 > bodyHeight) {
        top = triggerOffsetTop + triggerBounds.height - datePickerHeight;
      }
      break;
    case "top-start":
    case "bottom-start":
      left = triggerOffsetLeft;
      if (left + DatePickerWidth > bodyWidth) {
        left = triggerOffsetLeft + triggerBounds.width / 2 - DatePickerWidth / 2;
      }
      if (left + DatePickerWidth > bodyWidth) {
        left = triggerOffsetLeft + triggerBounds.width - DatePickerWidth;
      }
      break;
    case "top-end":
    case "bottom-end":
      left = triggerOffsetLeft + triggerBounds.width - DatePickerWidth;
      if (left < 0) {
        left = triggerOffsetLeft + triggerBounds.width / 2 - DatePickerWidth / 2;
      }
      if (left < 0) {
        left = triggerOffsetLeft;
      }
      break;
    case "top":
    case "bottom":
      left = triggerOffsetLeft + triggerBounds.width / 2 - DatePickerWidth / 2;
      if (left < 0) {
        left = triggerOffsetLeft;
      }
      if (left + DatePickerWidth > bodyWidth) {
        left = triggerOffsetLeft + triggerBounds.width - DatePickerWidth;
      }
      break;
  }
  switch (position) {
    case "right":
    case "right-start":
    case "right-end":
      left = triggerOffsetLeft + triggerBounds.width;
      if (left + DatePickerWidth > bodyWidth) {
        left = triggerOffsetLeft - DatePickerWidth;
      }
      break;
    case "left":
    case "left-start":
    case "left-end":
      left = triggerOffsetLeft - DatePickerWidth;
      if (left < 0) {
        left = triggerOffsetLeft + triggerBounds.width;
      }
      break;
    case "top-start":
    case "top":
    case "top-end":
      top = triggerOffsetTop - datePickerHeight;
      if (top < 0) {
        top = triggerOffsetTop + triggerBounds.height;
      }
      break;
    case "bottom-start":
    case "bottom":
    case "bottom-end":
      top = triggerOffsetTop + triggerBounds.height;
      if (top + datePickerHeight > bodyHeight) {
        top = triggerOffsetTop - datePickerHeight;
      }
      break;
    default:
      top = triggerOffsetTop + triggerBounds.height / 2 - datePickerHeight / 2;
      left = triggerOffsetLeft + triggerBounds.width;
  }
  return { left, top, maxHeight: height, maxWidth: width };
};

const useToggle = (value, condition, listener) => {
  const [selected, setSelected] = useState(value);
  useEffect(() => {
    setSelected(value);
  }, [value]);
  const toggle = (e) => {
    listener?.(e);
    if (condition || typeof condition === "undefined") {
      setSelected(!selected);
    }
  };
  const close = () => {
    if (selected)
      setSelected(false);
  };
  return {
    selected,
    toggle,
    close
  };
};

const DEBOUNCE_TIME = 400;
const DATEPICKERINTERNAL_SELECTOR = "div.j-JDSDatepickerDesktopInternal-container";
const withLogic$1P = (Component) => (props) => {
  const { onClose, close: userClose = true, open, ...rest } = props;
  const closeProp = typeof open === "undefined" ? userClose : !open;
  const [containerElement, setContainerElement] = useState();
  const anchorRef = useRef(null);
  const trigger = props.triggerRef || anchorRef;
  const { selected, toggle, close } = useToggle(
    !closeProp,
    true,
    props.onClose
  );
  const [coords, setCoords] = useState({
    left: 0,
    top: 0
  });
  const calculateInitialPosition = useCallback(() => {
    if (trigger.current && containerElement) {
      const { left, top } = setPositions$1(
        props.position,
        containerElement,
        trigger.current
      );
      setCoords({ left, top: top || 0 });
    }
  }, [trigger, containerElement, props.position]);
  const [shouldRender, setShouldRender] = useState(selected);
  useEffect(() => {
    if (!shouldRender)
      return;
    calculateInitialPosition();
  }, [shouldRender, calculateInitialPosition]);
  const containerRef = useCallback((ref) => {
    setContainerElement(ref);
  }, []);
  useEffect(() => {
    const resizeObserver = new ResizeObserver(() => {
      calculateInitialPosition();
    });
    if (trigger.current) {
      resizeObserver.observe(trigger.current);
    }
    return () => {
      if (trigger.current) {
        resizeObserver.unobserve(trigger.current);
      }
    };
  }, [trigger, calculateInitialPosition]);
  useEffect(() => {
    window?.addEventListener(
      "resize",
      debounce(calculateInitialPosition, DEBOUNCE_TIME)
    );
    return () => window?.removeEventListener(
      "resize",
      debounce(calculateInitialPosition, DEBOUNCE_TIME)
    );
  }, [calculateInitialPosition]);
  const scrollCloseListener = useCallback(() => {
    close();
    onClose?.();
  }, [close, onClose]);
  useEffect(() => {
    window.addEventListener("scroll", scrollCloseListener);
    return () => {
      window.removeEventListener("scroll", scrollCloseListener);
    };
  }, [scrollCloseListener]);
  const [firstChild = /* @__PURE__ */ jsx("span", {}), ...restChildren] = Children.toArray(
    props.children
  );
  useEffect(() => {
    let timeout;
    if (selected) {
      setShouldRender(true);
    } else {
      timeout = setTimeout(() => {
        setShouldRender(false);
        setCoords(null);
      }, DEBOUNCE_TIME);
    }
    return () => clearTimeout(timeout);
  }, [selected]);
  useEffect(() => {
    if (!shouldRender || !selected)
      return;
    const timer = setTimeout(() => {
      const datePickerInternalRef = document.querySelector(
        DATEPICKERINTERNAL_SELECTOR
      );
      datePickerInternalRef?.setAttribute("tabindex", "0");
      datePickerInternalRef?.focus();
    }, DEBOUNCE_TIME);
    return () => clearTimeout(timer);
  }, [shouldRender, selected]);
  useEffect(() => {
    const handleKeyDown = (event) => {
      if (selected && event.key === "Escape") {
        close();
        onClose?.();
      }
    };
    window.addEventListener("keydown", handleKeyDown);
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
    };
  }, [close, onClose, selected]);
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    shouldRender && /* @__PURE__ */ jsx(
      Component,
      {
        ...{
          ...rest,
          open: selected,
          triggerRef: containerRef,
          onClose: () => {
            if (selected) {
              toggle();
            }
            onClose?.();
          },
          calendarData: {
            disabledDates: props.disabledDates,
            dateFilter: props.dateFilter,
            min: props.min,
            max: props.max
          },
          onClick: (ev) => ev.stopPropagation(),
          offsetX: coords?.left,
          offsetY: coords?.top,
          _onMonthSelect: (i) => {
            props.onMonthSelect?.();
          },
          _onYearSelect: (i) => {
            props.onYearSelect?.();
          },
          style: coords ? void 0 : { visibility: "hidden" }
        }
      }
    ),
    cloneElement(firstChild, { ref: anchorRef }),
    restChildren
  ] });
};

const Component$1R = (props) => {
  const { platform, ...restSwitchables } = useTokenValues();
  const componentTag = "undefined";
  const json = platform === "desktop" ? JDSDatepickerDesktop : sdl$1M;
  const { state = "default", open = false, onClose = noop, onSelect = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ state, open, onClose, onSelect, ...rest }, componentTag },
    "JDSDatepickerDesktop",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const DatePicker = withLogic$1P(Component$1R);
DatePicker.displayName = "DatePicker";
DatePicker.slotName = "jds_datepicker_desktop";

const sdl$1L = { "metadata": { "version": "1.0.0", "id": "date-picker-button-1.0.0", "name": "JDSDatepickerButton", "layerName": "jds_datepicker_button", "internal": true }, "hierarchy": { "container": ["jds-text", { "jds-icon-container": ["jds-icon"] }] }, "base": { "container": { "disabled": false, "height": "{d_0}", "border-radius": "{d_2}", "background-color": "{d_3}", "border-width": "{d_4}", "border-color": "{d_5}", "flex-direction": "{d_6}", "justify-content": "{d_7}", "align-items": "{d_8}", "gap": "{d_9}", "padding-right": "{d_10}", "padding-left": "{d_11}", "behavior": { "hover": { "border-color": "{d_12}" }, "focus": { "border-color": "{d_13}", "border-width": "{d_14}" }, "active": { "border-color": "{d_15}", "background-color": "{d_16}" } } }, "jds-text": { "font-family": "{button}", "color": "{primary60}", "font-size": "{button}", "line-height": "{button}", "letter-spacing": "{button}", "font-weight": "{button}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" }, "jds-icon": { "size": "{m}", "color": "{primary60}", "value": "ic_chevron_down", "hidden": false, "ic": "ic_chevron_down" }, "jds-icon-container": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{m}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}", "hidden": false, "ic": "ic_chevron_down" } }, "variant": { "state": { "selected": { "container": { "background-color": "{d_17}", "border-color": "{d_18}" }, "jds-icon": { "value": "ic_chevron_up", "ic": "ic_chevron_up" }, "jds-icon-container": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{m}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}", "ic": "ic_chevron_up" } }, "disabled": { "container": { "disabled": true, "border-width": "{d_19}", "opacity": "{d_20}" } }, "text_only": { "container": { "disabled": true, "border-width": "{d_21}" }, "jds-text": { "color": "{primaryGrey100}" }, "jds-icon": { "hidden": true }, "jds-icon-container": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{m}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}", "hidden": true } } } }, "combination": [{}], "combination_config": [[]], "api": { "config": { "state": { "values": ["default", "selected", "disabled", "text_only"] } }, "data": { "jds-text": { "value": { "type": "string", "name": "text" } } }, "events": { "container": { "onClick": "onClick" } }, "a11y": { "container": { "properties": { "role": { "value": "button" }, "aria-label": { "name": "ariaLabel", "prop": "text" }, "aria-expanded": { "name": "_ariaExpanded" } } } } } };

const withLogic$1O = (Component) => (props) => {
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        _ariaExpanded: props.state === "selected" ? "true" : "false"
      }
    }
  );
};

const Component$1Q = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1L;
  const { state = "default", onClick = noop, ariaLabel = props.text?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ state, onClick, ariaLabel, ...rest }, componentTag },
    "JDSDatepickerButton",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const DatepickerButton = withLogic$1O(Component$1Q);
DatepickerButton.displayName = "DatepickerButton";
DatepickerButton.slotName = "jds_datepicker_button";

const sdl$1K = { "metadata": { "version": "1.0.0", "id": "date-picker-calender-1.0.0", "name": "JDSDatepickerCalendar", "layerName": "jds_datepicker_calendar", "internal": true }, "hierarchy": { "container": ["jds_datepicker_calendar_header", { "rows-container": ["jds_datepicker_calendar_row"] }] }, "base": { "container": { "flex-direction": "{d_0}", "justify-content": "{d_1}", "align-items": "{d_2}", "gap": "{d_3}" }, "rows-container": { "flex-direction": "{d_4}", "flex": 1 } }, "variant": {}, "combination": [{}], "combination_config": [[]], "api": { "data": { "jds_datepicker_calendar_header": { "days": { "type": "JDSDatepickerCalendarHeader.days", "name": "days", "object": { "letter": "string" } } }, "rows-container": { "rows.day": { "type": "date", "name": "day" }, "rows.month": { "type": "number", "name": "month" }, "rows.year": { "type": "number", "name": "year" }, "rows.selected": { "type": "date", "name": "selected" }, "rows.disabled": { "type": "object", "name": "disabled", "object": { "disabledDays": "list", "disabledDates": "list", "max": "date", "min": "date" } }, "rows.loadedYears": { "type": "list", "name": "loadedYears", "object": { "name": "string", "selected": "boolean", "disabled": "boolean" } }, "value": { "type": "list", "name": "rows", "object": { "row": "JDSDatepickerCalendarRow.row" } } }, "jds_datepicker_calendar_row": { "row": { "type": "list", "name": "rows.row", "object": { "value": "string", "state": "JDSDatepickerCalendarButton.state" } } } }, "events": { "container": { "onSwipeLeft": "onSwipeLeft", "onSwipeRight": "onSwipeRight" }, "jds_datepicker_calendar_row": { "onClick": "onSelect" } }, "a11y": { "container": { "properties": { "aria-label": { "name": "_calendarAriaLabel", "value": "Select date from calendar" } } }, "jds_datepicker_calendar_row": { "properties": { "dateAriaLabel": { "name": "dateAriaLabel", "function": true } } } } } };

const getNormalisedDate$1 = (value) => {
  const date = new Date(value || /* @__PURE__ */ new Date());
  if (!date.getTime()) {
    return { day: 0, month: 0, year: 0 };
  }
  return {
    day: date.getDate(),
    month: date.getMonth() + 1,
    year: date.getFullYear()
  };
};
function removeTime(d) {
  d.setHours(0, 0, 0, 0);
  return d;
}
const isToday = (date, month, year, day) => {
  if (year !== date.getFullYear())
    return false;
  if (month !== date.getMonth())
    return false;
  if (day !== date.getDate())
    return false;
  return true;
};
const isDateDisabled = (value, disabled, dateFilter, min, max) => {
  if (dateFilter) {
    return dateFilter(value);
  }
  const { day, month, year } = getNormalisedDate$1(value);
  const disabledData = disabled.map((d) => getNormalisedDate$1(d));
  const disabledIndex = disabledData.findIndex((d) => {
    if (!(d.day === day))
      return false;
    if (!(d.month === month))
      return false;
    if (!(d.year === year))
      return false;
    return true;
  });
  if (disabledIndex >= 0)
    return true;
  if (min && max) {
    const minDate = removeTime(new Date(min));
    const maxDate = removeTime(new Date(max));
    const currentValue = removeTime(new Date(value));
    return !(currentValue <= maxDate && currentValue >= minDate);
  }
  if (min) {
    const minDate = removeTime(new Date(min));
    const currentValue = removeTime(new Date(value));
    return !(currentValue >= minDate);
  }
  if (max) {
    const maxDate = removeTime(new Date(max));
    const currentValue = removeTime(new Date(value));
    return !(currentValue <= maxDate);
  }
};
const getDayState = (day, month, year, currentCount, selected) => {
  const today = /* @__PURE__ */ new Date();
  const selectedDate = getNormalisedDate$1(selected);
  if (day - 1 === currentCount && selectedDate.month === month && selectedDate.year === year)
    return "selected";
  if (isToday(today, month - 1, year, currentCount + 1)) {
    return "current";
  }
  return "default";
};
const createRows = (month = 0, year = 0, day = 0, disabled = [], dateFilter, selected, min, max) => {
  const tokens = useTokenValues();
  const language = tokens.lang;
  const getMonthDatesFromLocale = useMemo(() => {
    return getMonthDates(language);
  }, [language]);
  const visibleMonth = removeTime(new Date(year, month - 1, 1));
  const firstDayOfMonth = visibleMonth.getDay();
  const daysInMonth = new Date(year, month, 0).getDate();
  const blanks = [];
  for (let i = 0; i < firstDayOfMonth; i++) {
    blanks.push({ state: "empty" });
  }
  const finalRows = [];
  const rows = Array.from({ length: daysInMonth }).map((_, i) => {
    return {
      value: i + 1,
      internalIndex: i + 1,
      state: getDayState(day, month, year, i, selected),
      disabled: isDateDisabled(
        new Date(year, month - 1, i + 1),
        disabled,
        dateFilter,
        min,
        max
      )
    };
  });
  const rowsWithBlanks = blanks.concat(rows);
  while (rowsWithBlanks.length % 7 !== 0) {
    rowsWithBlanks.push({
      state: "empty"
    });
  }
  let sum = 0;
  while (sum <= daysInMonth + 7) {
    const localizedRows = rowsWithBlanks.slice(sum, sum + 7).map(({ value, state, disabled: disabled2, ...rest }) => ({
      value: value ? getMonthDatesFromLocale[value - 1] : void 0,
      // Adjust index
      state,
      disabled: disabled2,
      ...rest
    }));
    finalRows.push({ row: localizedRows });
    sum = sum + 7;
  }
  return finalRows;
};
const loadedYears = (max = 0, min = 0, selected, disabled) => {
  const tokens = useTokenValues();
  const language = tokens.lang;
  const numeralList = useMemo(() => {
    return getNumbers(language);
  }, [language]);
  const getLocaleYear = (year) => {
    const yearString = year?.toString();
    return yearString?.replace(
      /\d/g,
      (num) => numeralList[parseInt(num, 10)] ?? num
    );
  };
  return Array.from({ length: max - min }).map((_, i) => {
    return {
      name: getLocaleYear(min + i),
      value: min + i,
      selected: min + i === selected,
      disabled: disabled?.[i] === true
    };
  });
};
const loadedMonths = (selected, selectedYear, selectable, min, max) => {
  const { month: minMonth, year: minYear } = getNormalisedDate$1(min);
  const { month: maxMonth, year: maxYear } = getNormalisedDate$1(max);
  const tokens = useTokenValues();
  const language = tokens?.lang;
  const getMonthNamesFromLocale = useMemo(() => {
    return getMonthNames(language);
  }, [language]);
  return getMonthNamesFromLocale.map((month, i) => {
    let disabled = false;
    if (selectedYear === minYear && min) {
      disabled = i + 1 < minMonth;
    }
    if (selectedYear === maxYear && max) {
      disabled = disabled || i + 1 > maxMonth;
    }
    return {
      name: month,
      value: i + 1,
      selected: selected === i + 1,
      disabled: !selectable || disabled
    };
  });
};
const getDisabledYears = (minYear, maxYear, minDate, maxDate) => {
  if (!minDate && !maxDate)
    return [];
  const { year: currentMinYear } = getNormalisedDate$1(minDate);
  const { year: currentMaxYear } = getNormalisedDate$1(maxDate);
  const years = Array.from({ length: maxYear - minYear }).map(
    (_, i) => {
      const year = minYear + i;
      if (minDate && maxDate)
        return year < currentMinYear || year > currentMaxYear;
      if (minDate)
        return year < currentMinYear;
      if (maxDate)
        return year > currentMaxYear;
      return false;
    }
  );
  return years;
};

const withLogic$1N = (Component) => (props) => {
  const { month, year, day } = props;
  const tokens = useTokenValues();
  const language = tokens.lang;
  const getWeekdayInitialsFromLocale = useMemo(() => {
    return getWeekdayInitials(language);
  }, [language]);
  const rows = createRows(
    month,
    year,
    day,
    props.disabled.disabledDates,
    props.disabled.dateFilter,
    props.selected,
    props.disabled?.min,
    props.disabled?.max
  );
  const selectedDate = props.selected;
  const options = {
    weekday: "long",
    month: "long",
    day: "numeric",
    year: "numeric"
  };
  const dateWithoutTime = selectedDate.toLocaleDateString(
    "en-US",
    options
  );
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        rows,
        dateAriaLabel: `Selected date ${dateWithoutTime}`,
        days: getWeekdayInitialsFromLocale.map((d) => ({ letter: d[0] }))
      }
    }
  );
};

const Component$1P = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1K;
  const { onSwipeLeft = noop, onSwipeRight = noop, onSelect = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ onSwipeLeft, onSwipeRight, onSelect, ...rest }, componentTag },
    "JDSDatepickerCalendar",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const DatepickerCalendar = withLogic$1N(Component$1P);
DatepickerCalendar.displayName = "DatepickerCalendar";
DatepickerCalendar.slotName = "jds_datepicker_calendar";

const sdl$1J = { "metadata": { "version": "1.0.0", "id": "date-picker-calender-button-1.0.0", "name": "JDSDatepickerCalendarButton", "layerName": "jds_datepicker_calendar_button", "internal": true }, "hierarchy": { "container": [{ "button-container": ["jds-text"] }] }, "base": { "container": { "flex-direction": "{d_0}", "justify-content": "{d_1}", "align-items": "{d_2}", "height": "{d_6}", "show": true }, "button-container": { "hidden": false, "flex-direction": "{d_8}", "justify-content": "{d_9}", "align-items": "{d_10}", "height": "{d_13}", "border-radius": "{d_14}", "border-width": 0, "border-color": "{d_15}", "background-color": "{d_16}", "behavior": { "hover": { "background-color": "{d_17}" }, "active": { "background-color": "{d_18}" }, "focus": { "background-color": "{d_19}", "border-width": "{d_20}" } } }, "jds-text": { "font-family": "{button}", "color": "{primary60}", "font-size": "{button}", "line-height": "{button}", "letter-spacing": "{button}", "font-weight": "{button}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" } }, "variant": { "_type": { "rounded": { "container": { "width": "{d_11}" }, "button-container": { "width": "{d_11}" } }, "rectangular": { "container": { "width": "{d_5}" }, "button-container": { "height": "{d_6}", "width": "{d_3}", "flex-direction": "{d_0}", "justify-content": "{d_1}", "align-items": "{d_2}" } } }, "state": { "selected": { "button-container": { "background-color": "{d_21}" }, "jds-text": { "color": "{primaryInverse}", "behavior": { "hover": { "color": "{primary60}" }, "focus": { "color": "{primary60}" } } } }, "current": { "button-container": { "background-color": "{d_22}" } }, "empty": { "button-container": { "hidden": true } } }, "disabled": { "true": { "container": { "disabled": true, "opacity": "{d_23}" }, "button-container": { "disabled": true } } } }, "combination": [{}], "combination_config": [[]], "api": { "config": { "_type": { "values": ["rounded", "rectangular"] }, "state": { "values": ["default", "selected", "current", "empty"] }, "disabled": { "values": [false, true] } }, "data": { "jds-text": { "value": { "type": "string", "name": "value" } } }, "events": { "button-container": { "onClick": "onClick" } }, "a11y": { "button-container": { "properties": { "role": { "value": "radio" }, "aria-label": { "name": "ariaLabel", "function": true }, "aria-current": "_ariaCurrent", "aria-checked": "_ariaChecked" } } } } };

const withLogic$1M = (Component) => (props) => {
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        ariaLabel: props.state === "selected" ? props.ariaLabel : `${props.value}`,
        _ariaCurrent: props.state === "current" ? "date" : void 0,
        _ariaChecked: props.state === "selected" ? "true" : "false",
        onClick: () => {
          props.onClick?.(props.internalIndex, props.disabled);
        },
        _type: (props.value?.length ?? -1) > 2 ? "rectangular" : "rounded"
      }
    }
  );
};

const Component$1O = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1J;
  const { state = "default", disabled = false, onClick = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ state, disabled, onClick, ...rest }, componentTag },
    "JDSDatepickerCalendarButton",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const DatepickerCalendarButton = withLogic$1M(Component$1O);
DatepickerCalendarButton.displayName = "DatepickerCalendarButton";
DatepickerCalendarButton.slotName = "jds_datepicker_calendar_button";

const sdl$1I = { "metadata": { "version": "1.0.0", "id": "date-picker-calender-header-1.0.0", "name": "JDSDatepickerCalendarHeader", "layerName": "jds_datepicker_calendar_header", "internal": true }, "hierarchy": { "container": ["jds-text"] }, "base": { "container": { "flex-direction": "{d_0}", "justify-content": "{d_1}", "align-items": "{d_2}", "width": "{d_3}", "show": true }, "jds-text": { "font-family": "{bodySBold}", "color": "{primaryGrey80}", "font-size": "{bodySBold}", "line-height": "{bodySBold}", "letter-spacing": "{bodySBold}", "font-weight": "{bodySBold}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "text-align": "center", "flex": 1 } }, "variant": {}, "combination": [{}], "combination_config": [[]], "api": { "data": { "container": { "value": { "type": "list", "name": "days", "object": { "letter": "string" } } }, "jds-text": { "value": { "type": "string", "name": "days.letter" } } }, "a11y": { "container": { "properties": { "role": { "value": "presentation" }, "aria-label": "_weekDayAriaLabel" } } } } };

const withLogic$1L = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$1N = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1I;
  const { custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...rest, componentTag },
    "JDSDatepickerCalendarHeader",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const DatepickerCalendarHeader = withLogic$1L(Component$1N);
DatepickerCalendarHeader.displayName = "DatepickerCalendarHeader";
DatepickerCalendarHeader.slotName = "jds_datepicker_calendar_header";

const sdl$1H = { "metadata": { "version": "1.0.0", "id": "date-picker-calender-row-1.0.0", "name": "JDSDatepickerCalendarRow", "layerName": "jds_datepicker_calendar_row", "internal": true }, "hierarchy": { "container": ["jds_datepicker_calendar_button"] }, "base": { "container": { "flex-direction": "{d_0}", "justify-content": "{d_1}", "align-items": "{d_2}", "width": "{d_3}" }, "jds_datepicker_calendar_button": { "flex": 1 } }, "variant": {}, "combination": [{}], "combination_config": [[]], "api": { "data": { "container": { "value": { "type": "list", "name": "row", "object": { "value": "string", "state": "JDSDatepickerCalendarButton.state", "disabled": "boolean" } } }, "jds_datepicker_calendar_button": { "value": { "type": "string", "name": "row.value" }, "state": { "type": "JDSDatepickerCalendarButton.state", "name": "row.state" }, "disabled": { "type": "string", "name": "row.disabled" } } }, "events": { "jds_datepicker_calendar_button": { "onClick": "onClick" } }, "a11y": { "container": { "properties": { "role": { "value": "radiogroup" } } }, "jds_datepicker_calendar_button": { "properties": { "ariaLabel": "dateAriaLabel" } } } } };

const withLogic$1K = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$1M = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1H;
  const { onClick = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ onClick, ...rest }, componentTag },
    "JDSDatepickerCalendarRow",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const DatepickerCalendarRow = withLogic$1K(Component$1M);
DatepickerCalendarRow.displayName = "DatepickerCalendarRow";
DatepickerCalendarRow.slotName = "jds_datepicker_calendar_row";

const JDSDatepickerDesktopInternal = { "metadata": { "version": "1.0.0", "id": "date-picker-desktop-1.0.0", "name": "JDSDatepickerDesktopInternal", "platform": "web", "layerName": "jds_datepicker_desktop_internal", "internal": true }, "hierarchy": { "container": [{ "top-container": ["left-jds_button", "close-jds_button"] }, { "controls-container": ["jds_datepicker_header", { "calender-view-container": ["top-jds_divider", "jds_datepicker_calendar", "jds_datepicker_month_view", "jds_datepicker_year_view"] }] }] }, "base": { "container": { "background-color": "{d_4}", "flex-direction": "{d_5}", "justify-content": "{d_6}", "align-items": "{d_7}", "border-radius": "{d_8}", "box-shadow": { "x": 0, "y": 4, "blur": 16, "spread": 0, "color": "#00000029" } }, "top-container": { "flex-direction": "{d_9}", "justify-content": "{d_10}", "align-items": "{d_11}", "padding-top": "{d_12}", "padding-right": "{d_13}", "padding-bottom": "{d_14}", "padding-left": "{d_15}", "width": "{d_16}" }, "jds_datepicker_header": { "state": "default", "padding-right": "{d_17}", "padding-left": "{d_18}" }, "left-jds_button": { "hidden": true, "kind": "tertiary", "icon": "ic_back", "size": "medium" }, "close-jds_button": { "kind": "tertiary", "icon": "ic_close", "size": "medium" }, "controls-container": { "flex-direction": "{d_19}", "justify-content": "{d_20}", "align-items": "{d_21}", "gap": "{d_22}" }, "calender-view-container": { "flex-direction": "{d_23}", "justify-content": "{d_24}", "align-items": "{d_25}", "height": "{d_26}", "width": "{d_27}" }, "top-jds_divider": { "pad": "none", "orientation": "horizontal", "hidden": true }, "jds_datepicker_calendar": { "hidden": false, "padding-right": "{d_28}", "padding-left": "{d_29}", "padding-bottom": "{d_30}" }, "jds_datepicker_month_view": { "hidden": true }, "jds_datepicker_year_view": { "hidden": true } }, "variant": { "state": { "month_view": { "top-jds_divider": { "hidden": false }, "top-container": { "justify-content": "{d_32}" }, "left-jds_button": { "hidden": false }, "jds_datepicker_calendar": { "hidden": true }, "jds_datepicker_month_view": { "hidden": false }, "jds_datepicker_header": { "state": "month" } }, "year_view": { "top-jds_divider": { "hidden": false }, "top-container": { "justify-content": "{d_33}" }, "left-jds_button": { "hidden": false }, "jds_datepicker_calendar": { "hidden": true }, "jds_datepicker_year_view": { "hidden": false }, "jds_datepicker_header": { "state": "year" } } } }, "combination": [{}], "combination_config": [[]], "api": { "config": { "state": { "values": ["default", "month_view", "year_view"] } }, "data": { "container": { "elementRef": { "type": "ref", "name": "triggerRef" }, "_years.yearLoadCount": { "type": "number", "name": "yearLoadCount" } }, "jds_datepicker_header": { "month": { "type": "string", "name": "monthName" }, "year": { "type": "number", "name": "year" }, "yearSelectable": { "type": "boolean", "name": "yearSelectable" }, "monthSelectable": { "type": "boolean", "name": "monthSelectable" } }, "jds_datepicker_month_view": { "months": { "type": "list", "name": "months", "object": { "name": "string", "state": "JDSDatepickerCalendarButton.state", "disabled": "boolean" } } }, "jds_datepicker_year_view": { "current": { "type": "number", "name": "current" }, "loadedYears": { "type": "list", "name": "loadedYears", "object": { "name": "string", "state": "JDSDatepickerCalendarButton.state", "disabled": "boolean" } } }, "jds_datepicker_calendar": { "day": { "type": "number", "name": "date" }, "month": { "type": "number", "name": "month" }, "year": { "type": "number", "name": "year" }, "selected": { "type": "date", "name": "value" }, "disabled": { "type": "object", "name": "calendarData", "object": { "disabledDays": "list", "disabledDates": "list", "max": "date", "min": "date" } } } }, "events": { "container": { "onClick": "_onContainerClick" }, "left-jds_button": { "onClick": "_onBack" }, "close-jds_button": { "onClick": "onClose" }, "jds_datepicker_header": { "onMonthClick": "_onMonthClick", "onYearClick": "_onYearClick", "onPrev": "_onPrev", "onNext": "_onNext" }, "jds_datepicker_month_view": { "onSelect": "_onMonthSelect" }, "jds_datepicker_year_view": { "onSelect": "_onYearSelect" }, "jds_datepicker_calendar": { "onSelect": "onSelect", "onSwipeLeft": "_onNextCalendar", "onSwipeRight": "_onPrevCalendar" } }, "a11y": { "container": { "properties": { "role": { "value": "dialog" }, "aria-label": { "value": "Date Picker" } } }, "left-jds_button": { "properties": { "ariaLabel": { "name": "previousButtonAriaLabel", "value": "Click to Return" } } }, "close-jds_button": { "properties": { "ariaLabel": { "name": "closeAriaLabel", "value": "Click to Close" } } }, "jds_datepicker_header": { "properties": { "previousAriaLabel": "previousMonthAriaLabel", "nextAriaLabel": "nextMonthAriaLabel" } } } } };

const sdl$1G = { "metadata": { "version": "1.0.0", "id": "date-picker-mobile-1.0.0", "name": "JDSDatepickerMobileInternal", "layerName": "jds_datepicker_mobile_internal", "internal": true }, "hierarchy": { "container": [{ "top-container": ["left-jds_button", "close-jds_button"] }, { "controls-container": ["jds_datepicker_header", "top-jds_divider", "jds_datepicker_calendar", "jds_datepicker_month_view", "jds_datepicker_year_view"] }, { "confirmation-container": ["bottom-jds_divider", { "confirmation-group-container": ["confirm-jds-text", "confirm-jds_button"] }] }] }, "base": { "container": { "background-color": "{primaryBackground}", "flex-direction": "{flexDirection.column}", "justify-content": "{justifyContent.start}", "align-items": "{alignItems.center}", "size": "{size.max}", "translate-y": "{size.max}", "transition": { "property": ["translate-y"], "duration": "{rapid}", "timing-function": "{easeQuick}" } }, "top-container": { "flex-direction": "{flexDirection.row}", "justify-content": "{justifyContent.end}", "align-items": "{alignItems.center}", "padding-top": "{xs}", "padding-bottom": "{xs}", "padding-left": "{s}", "padding-right": "{s}", "width": "{size.max}" }, "left-jds_button": { "hidden": true, "kind": "tertiary", "icon": "ic_back", "size": "medium" }, "close-jds_button": { "kind": "tertiary", "icon": "ic_close", "size": "medium" }, "controls-container": { "flex-direction": "{flexDirection.column}", "justify-content": "{justifyContent.start}", "align-items": "{alignItems.center}", "gap": "{m}", "flex": 1 }, "jds_datepicker_header": { "state": "default", "padding-left": "{s}", "padding-right": "{s}" }, "top-jds_divider": { "pad": "none", "orientation": "horizontal", "hidden": true }, "jds_datepicker_calendar": { "hidden": false, "padding-left": "{s}", "padding-right": "{s}", "padding-bottom": "{m}" }, "jds_datepicker_month_view": { "hidden": true, "padding-left": "{s}", "padding-right": "{s}" }, "jds_datepicker_year_view": { "hidden": true, "padding-left": "{s}", "padding-right": "{s}" }, "confirmation-container": { "padding-top": 0, "padding-bottom": "{m}", "flex-direction": "{flexDirection.column}", "gap": "{s}", "justify-content": "{justifyContent.start}", "align-items": "{alignItems.center}", "width": "{size.max}" }, "bottom-jds_divider": { "pad": "none", "orientation": "horizontal" }, "confirmation-group-container": { "padding-top": 0, "padding-right": "{m}", "padding-bottom": 0, "padding-left": "{m}", "flex-direction": "{flexDirection.column}", "justify-content": "{justifyContent.start}", "align-items": "{alignItems.center}", "gap": "{s}", "width": "{size.max}" }, "confirm-jds_button": { "fullWidth": true, "kind": "primary", "size": "medium" }, "confirm-jds-text": { "font-family": "{bodySBold}", "color": "{primaryGrey80}", "font-size": "{bodySBold}", "line-height": "{bodySBold}", "letter-spacing": "{bodySBold}", "font-weight": "{bodySBold}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" } }, "variant": { "state": { "month_view": { "top-jds_divider": { "hidden": false }, "top-container": { "justify-content": "{justifyContent.spaceBetween}" }, "left-jds_button": { "hidden": false }, "jds_datepicker_calendar": { "hidden": true }, "jds_datepicker_month_view": { "hidden": false }, "jds_datepicker_header": { "state": "month", "showArrows": false } }, "year_view": { "top-jds_divider": { "hidden": false }, "top-container": { "justify-content": "{justifyContent.spaceBetween}" }, "left-jds_button": { "hidden": false }, "jds_datepicker_calendar": { "hidden": true }, "jds_datepicker_year_view": { "hidden": false }, "jds_datepicker_header": { "state": "year", "showArrows": false } } }, "open": { "true": { "container": { "translate-y": 0 } } } }, "combination": [{}], "combination_config": [[]], "api": { "config": { "state": { "values": ["default", "month_view", "year_view"] }, "open": { "values": [false, true] } }, "data": { "jds_datepicker_header": { "month": { "type": "string", "name": "monthName" }, "year": { "type": "string", "name": "year" }, "showArrows": { "type": "boolean", "name": "showArrows" }, "yearSelectable": { "type": "boolean", "name": "yearSelectable" }, "monthSelectable": { "type": "boolean", "name": "monthSelectable" } }, "jds_datepicker_month_view": { "months": { "type": "list", "name": "months", "object": { "name": "string", "state": "JDSDatepickerCalendarButton.state", "disabled": "boolean" } } }, "jds_datepicker_year_view": { "current": { "type": "number", "name": "current" }, "data": { "type": "object", "name": "yearData", "object": { "count": "number", "disabled": "list", "min": "number", "max": "number" } }, "loadedYears": { "type": "list", "name": "loadedYears", "object": { "name": "string", "state": "JDSDatepickerCalendarButton.state", "disabled": "boolean" } } }, "jds_datepicker_calendar": { "day": { "type": "number", "name": "date" }, "month": { "type": "number", "name": "month" }, "year": { "type": "number", "name": "year" }, "selected": { "type": "date", "name": "value" }, "disabled": { "type": "object", "name": "calendarData", "object": { "disabledDays": "list", "disabledDates": "list", "max": "date", "min": "date" } }, "days": { "type": "JDSDatepickerCalendarHeader.days", "name": "calendarDays" }, "rows": { "type": "JDSDatepickerCalendar.rows", "name": "calendarRows" } }, "confirm-jds_button": { "label": { "type": "string", "name": "_confirmLabel" } }, "confirm-jds-text": { "value": { "type": "string", "name": "confirmDate" } } }, "events": { "left-jds_button": { "onClick": "_onBack" }, "close-jds_button": { "onClick": "onClose" }, "jds_datepicker_header": { "onMonthClick": "_onMonthClick", "onYearClick": "_onYearClick", "onPrev": "_onPrev", "onNext": "_onNext" }, "jds_datepicker_month_view": { "onSelect": "_onMonthSelect" }, "jds_datepicker_year_view": { "onSelect": "_onYearSelect" }, "jds_datepicker_calendar": { "onSelect": "_onSelect", "onSwipeLeft": "_onNextCalendar", "onSwipeRight": "_onPrevCalendar" }, "confirm-jds_button": { "onClick": "onConfirm" } }, "a11y": { "left-jds_button": { "properties": { "ariaLabel": { "name": "previousButtonAriaLabel", "value": "Tap to Return" } } }, "close-jds_button": { "properties": { "ariaLabel": { "name": "closeAriaLabel", "value": "Tap to Close" } } }, "jds_datepicker_header": { "properties": { "previousAriaLabel": "previousMonthAriaLabel", "nextAriaLabel": "nextMonthAriaLabel" } }, "confirm-jds_button": { "properties": { "ariaLabel": { "name": "confirmAriaLabel", "value": "Tap to Confirm" } } } } } };

const YEAR_COUNT$1 = 50;
const withLogic$1J = (Component) => (props) => {
  const { yearSelectable = true, monthSelectable = true, ...rest } = props;
  const { lang, platform } = useTokenValues();
  const confirmLabelLocal = useMemo(() => {
    return getConfirmLabel(lang);
  }, [lang]);
  const [state, setState] = useState("default");
  const anchorRef = useRef(null);
  const { day, month, year } = getNormalisedDate$1(props.value);
  const [selectedMonth, setSelectedMonth] = useState(month);
  const [selectedDate, setSelectedDate] = useState({
    date: day,
    month,
    year
  });
  const [selectedYear, setSelectedYear] = useState(year);
  useEffect(() => {
    const { day: day2, month: month2, year: year2 } = getNormalisedDate$1(props.value);
    setSelectedDate({ date: day2, month: month2, year: year2 });
    setSelectedYear(year2);
    setSelectedMonth(month2);
  }, [props.value]);
  const [firstChild = /* @__PURE__ */ jsx("span", {}), ...restChildren] = Children.toArray(
    props.children
  );
  const formattedConfirmDate = new Date(
    selectedDate.year,
    selectedDate.month - 1,
    selectedDate.date
  ).toLocaleDateString(lang, {
    weekday: "short",
    day: "2-digit",
    month: "long",
    year: "numeric"
  });
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(
      Component,
      {
        ...{
          ...rest,
          onClose: () => {
            props.onClose?.();
            setState("default");
          },
          yearSelectable,
          monthSelectable,
          confirmDate: formattedConfirmDate,
          _confirmLabel: confirmLabelLocal,
          value: new Date(
            selectedDate.year,
            selectedDate.month - 1,
            selectedDate.date
          ),
          onClick: (ev) => ev.stopPropagation(),
          date: selectedDate.date,
          month: selectedMonth,
          year: selectedYear,
          monthName: selectedMonth - 1,
          months: loadedMonths(
            selectedMonth - 1,
            selectedYear,
            monthSelectable,
            props.calendarData?.min,
            props.calendarData?.max
          ),
          loadedYears: loadedYears(
            selectedYear + YEAR_COUNT$1 / 2,
            selectedYear - YEAR_COUNT$1 / 2,
            selectedYear,
            getDisabledYears(
              selectedYear - YEAR_COUNT$1 / 2,
              selectedYear + YEAR_COUNT$1 / 2,
              props.calendarData?.min,
              props.calendarData?.max
            )
          ),
          current: selectedYear,
          state,
          onConfirm: () => {
            const date = new Date(
              selectedDate.year,
              selectedDate.month - 1,
              selectedDate.date
            );
            props.onSelect?.(date);
            props.onConfirm?.(date);
            props?.onClose?.();
          },
          _onYearClick: () => setState("year_view"),
          _onMonthClick: () => setState("month_view"),
          _onBack: () => setState("default"),
          _onSelect: (num) => {
            setSelectedDate({
              date: num,
              month: selectedMonth,
              year: selectedYear
            });
            setState("default");
          },
          onSelect: (num, disabled) => {
            setSelectedDate({
              date: num,
              month: selectedMonth,
              year: selectedYear
            });
            if (!disabled && platform === "desktop") {
              props.onSelect?.(
                new Date(selectedYear, selectedMonth - 1, num)
              );
              props.onClose?.();
            }
            setState("default");
          },
          _onMonthSelect: (i) => {
            if (monthSelectable) {
              setSelectedMonth(i);
              setState("default");
            }
          },
          _onYearSelect: (i) => {
            if (yearSelectable) {
              setSelectedYear(i);
              setState("default");
            }
          },
          _onPrev: () => setSelectedMonth((m) => {
            if (m === 1) {
              setSelectedYear(selectedYear - 1);
              return 12;
            }
            return m - 1;
          }),
          _onNext: () => setSelectedMonth((m) => {
            if (m === 12) {
              setSelectedYear(selectedYear + 1);
              return 1;
            }
            return m + 1;
          })
        }
      }
    ),
    cloneElement(firstChild, { ref: anchorRef }),
    restChildren
  ] });
};

const Component$1L = (props) => {
  const { platform, ...restSwitchables } = useTokenValues();
  const componentTag = "undefined";
  const json = platform === "desktop" ? JDSDatepickerDesktopInternal : sdl$1G;
  const { state = "default", onClose = noop, onSelect = noop, previousButtonAriaLabel = "Click to Return", closeAriaLabel = "Click to Close", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ state, onClose, onSelect, previousButtonAriaLabel, closeAriaLabel, ...rest }, componentTag },
    "JDSDatepickerDesktopInternal",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const DatepickerDesktopInternal = withLogic$1J(Component$1L);
DatepickerDesktopInternal.displayName = "DatepickerDesktopInternal";
DatepickerDesktopInternal.slotName = "jds_datepicker_desktop_internal";

const sdl$1F = { "metadata": { "version": "1.0.0", "id": "date-picker-header-1.0.0", "name": "JDSDatepickerHeader", "layerName": "jds_datepicker_header", "internal": true }, "hierarchy": { "container": ["left-jds_button", { "inner-container": ["month-jds_datepicker_button", "year-jds_datepicker_button"] }, "right-jds_button"] }, "base": { "container": { "width": "{d_0}", "height": "{d_1}", "flex-direction": "{d_2}", "justify-content": "{d_3}", "align-items": "{d_4}" }, "inner-container": { "height": "{d_5}", "flex-direction": "{d_6}", "justify-content": "{d_7}", "align-items": "{d_8}", "gap": "{d_9}", "flex": 1 }, "left-jds_button": { "hidden": false, "kind": "tertiary", "icon": "ic_chevron_left", "size": "medium" }, "right-jds_button": { "hidden": false, "kind": "tertiary", "icon": "ic_chevron_right", "size": "medium" }, "month-jds_datepicker_button": { "state": "default" }, "year-jds_datepicker_button": { "state": "default" } }, "variant": { "state": { "month": { "month-jds_datepicker_button": { "state": "selected" } }, "year": { "year-jds_datepicker_button": { "state": "selected" } } }, "showArrows": { "false": { "left-jds_button": { "hidden": true }, "right-jds_button": { "hidden": true } } }, "monthSelectable": { "false": { "month-jds_datepicker_button": { "state": "disabled" } } }, "yearSelectable": { "false": { "year-jds_datepicker_button": { "state": "disabled" } } } }, "combination": [{ "false": { "false": { "month-jds_datepicker_button": { "state": "text_only" }, "year-jds_datepicker_button": { "state": "text_only" } } } }], "combination_config": [["monthSelectable", "yearSelectable"]], "api": { "config": { "state": { "values": ["default", "month", "year"] }, "showArrows": { "values": [true, false] }, "monthSelectable": { "values": [true, false] }, "yearSelectable": { "values": [true, false] } }, "data": { "month-jds_datepicker_button": { "text": { "type": "string", "name": "month" } }, "year-jds_datepicker_button": { "text": { "type": "string", "name": "year" } } }, "events": { "left-jds_button": { "onClick": "onPrev" }, "month-jds_datepicker_button": { "onClick": "onMonthClick" }, "year-jds_datepicker_button": { "onClick": "onYearClick" }, "right-jds_button": { "onClick": "onNext" } }, "a11y": { "left-jds_button": { "properties": { "ariaLabel": { "name": "previousAriaLabel", "value": "Navigate to previous month" } } }, "right-jds_button": { "properties": { "ariaLabel": { "name": "nextAriaLabel", "value": "Navigate to next month" } } }, "month-jds_datepicker_button": { "properties": { "ariaLabel": { "name": "_monthAriaLabel" } } }, "year-jds_datepicker_button": { "properties": { "ariaLabel": { "name": "_yearAriaLabel" } } } } } };

const withLogic$1I = (Component) => (props) => {
  const tokens = useTokenValues();
  const language = tokens.lang;
  const numeralList = useMemo(() => {
    return getNumbers(language);
  }, [language]);
  const getLocaleYear = (year) => {
    const yearString = year?.toString();
    return yearString?.replace(
      /\d/g,
      (num) => numeralList[parseInt(num, 10)] ?? num
    );
  };
  const getMonthNamesFromLocale = useMemo(() => {
    return getMonthNames(language);
  }, [language]);
  const monthNames = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ];
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        _monthAriaLabel: props.state === "month" ? "Select month" : `${monthNames[Number(props.month)]}, Select month`,
        _yearAriaLabel: props.state === "year" ? "Select year" : `${props.year}, Select year`
      },
      year: getLocaleYear(Number(props.year)),
      month: getMonthNamesFromLocale[Number(props.month)]
    }
  );
};

const Component$1K = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1F;
  const { state = "default", showArrows = true, monthSelectable = true, yearSelectable = true, onPrev = noop, onMonthClick = noop, onYearClick = noop, onNext = noop, previousAriaLabel = "Navigate to previous month", nextAriaLabel = "Navigate to next month", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ state, showArrows, monthSelectable, yearSelectable, onPrev, onMonthClick, onYearClick, onNext, previousAriaLabel, nextAriaLabel, ...rest }, componentTag },
    "JDSDatepickerHeader",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const DatepickerHeader = withLogic$1I(Component$1K);
DatepickerHeader.displayName = "DatepickerHeader";
DatepickerHeader.slotName = "jds_datepicker_header";

const sdl$1E = { "metadata": { "version": "1.0.0", "id": "date-picker-month-view-1.0.0", "name": "JDSDatepickerMonthView", "layerName": "jds_datepicker_month_view", "internal": true }, "hierarchy": { "container": ["jds_datepicker_calendar_button"] }, "base": { "container": { "flex-direction": "{d_0}", "height": "{d_1}", "width": "{d_2}", "align-items": "{d_3}", "overflow": "scroll" } }, "variant": {}, "combination": [{}], "combination_config": [[]], "api": { "data": { "container": { "value": { "type": "list", "name": "months", "object": { "name": "string", "state": "JDSDatepickerCalendarButton.state", "disabled": "boolean" } } }, "jds_datepicker_calendar_button": { "value": { "type": "string", "name": "months.name" }, "state": { "type": "JDSDatepickerCalendarButton.state", "name": "months.state" }, "disabled": { "type": "boolean", "name": "months.disabled" } } }, "events": { "jds_datepicker_calendar_button": { "onClick": "onSelect" } }, "a11y": { "container": { "properties": { "role": { "value": "list" } } } } } };

const withLogic$1H = (Component) => (props) => {
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        onSelect: (i) => {
          props?.onSelect?.(props.months?.[i]?.value);
        }
      }
    }
  );
};

const Component$1J = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1E;
  const { onSelect = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ onSelect, ...rest }, componentTag },
    "JDSDatepickerMonthView",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const DatepickerMonthView = withLogic$1H(Component$1J);
DatepickerMonthView.displayName = "DatepickerMonthView";
DatepickerMonthView.slotName = "jds_datepicker_month_view";

const sdl$1D = { "metadata": { "version": "1.0.0", "id": "date-picker-view-button-1.0.0", "name": "JDSDatepickerViewButton", "layerName": "jds_datepicker_view_button", "internal": true }, "hierarchy": { "root-container": [{ "container": ["jds_button"] }] }, "base": { "root-container": { "width": "{d_0}", "flex-direction": "{d_1}", "justify-content": "{d_2}", "align-items": "{d_3}" }, "container": { "height": "{d_4}", "width": "{d_5}", "flex-direction": "{d_6}", "justify-content": "{d_7}", "align-items": "{d_8}" }, "jds_button": { "kind": "tertiary", "size": "medium", "fullWidth": true, "state": "normal" } }, "variant": { "selected": { "true": { "jds_button": { "kind": "primary" } } }, "disabled": { "true": { "jds_button": { "disabled": true } } } }, "combination": [{}], "combination_config": [[]], "api": { "config": { "disabled": { "values": [false, true] }, "selected": { "values": [false, true] } }, "data": { "jds_button": { "label": { "type": "string", "name": "name" }, "disabled": { "type": "boolean", "name": "disabled" } } }, "events": { "jds_button": { "onClick": "onSelect" } }, "a11y": { "jds_button": { "properties": { "ariaLabel": "ariaLabel" } }, "container": { "properties": { "role": { "value": "listitem" } } } } } };

const withLogic$1G = (Component) => (props) => {
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        onSelect: () => {
          props?.onSelect?.(props.internalIndex + 1);
        }
      }
    }
  );
};

const Component$1I = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1D;
  const { disabled = false, selected = false, onSelect = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ disabled, selected, onSelect, ...rest }, componentTag },
    "JDSDatepickerViewButton",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const DatepickerViewButton = withLogic$1G(Component$1I);
DatepickerViewButton.displayName = "DatepickerViewButton";
DatepickerViewButton.slotName = "jds_datepicker_view_button";

const sdl$1C = { "metadata": { "version": "1.0.0", "id": "date-picker-year-view-1.0.0", "name": "JDSDatepickerYearView", "layerName": "jds_datepicker_year_view", "internal": true }, "hierarchy": { "container": ["jds_datepicker_calendar_button"] }, "base": { "container": { "flex-direction": "{d_0}", "height": 300, "width": "{d_1}", "align-items": "{d_2}", "overflow": "scroll" } }, "variant": {}, "combination": [{}], "combination_config": [[]], "api": { "data": { "container": { "value": { "type": "list", "name": "loadedYears", "object": { "name": "string", "state": "JDSDatepickerCalendarButton.state", "disabled": "boolean" } } }, "jds_datepicker_calendar_button": { "value": { "type": "string", "name": "loadedYears.name" }, "state": { "type": "JDSDatepickerCalendarButton.state", "name": "loadedYears.state" }, "disabled": { "type": "boolean", "name": "loadedYears.disabled" } } }, "events": { "container": { "onScroll": { "name": "onScroll", "platform": "web" } }, "jds_datepicker_calendar_button": { "onClick": "onSelect" } }, "a11y": { "container": { "properties": { "role": { "value": "list" } } } } } };

const withLogic$1F = (Component) => (props) => {
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        onSelect: (i) => {
          props?.onSelect?.(props.loadedYears?.[i]?.value);
        }
      }
    }
  );
};

const Component$1H = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1C;
  const { onScroll = noop, onSelect = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ onScroll, onSelect, ...rest }, componentTag },
    "JDSDatepickerYearView",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const DatepickerYearView = withLogic$1F(Component$1H);
DatepickerYearView.displayName = "DatepickerYearView";
DatepickerYearView.slotName = "jds_datepicker_year_view";

const sdl$1B = { "metadata": { "version": "1.0.0", "id": "desktop-bottom-sheet-1.0.0", "name": "JDSDesktopBottomSheetInternal", "layerName": "jds_desktop_bottom_sheet_internal", "platform": "web", "internal": true }, "hierarchy": { "container": [{ "root-container": [{ "cancel-container": [{ "back-container": ["back-jds_button"] }, "cancel-jds_button", "step-jds-text"] }, { "vertical-container": ["title-jds-text", "description-jds-text", "children-slot", { "cta-container": ["primary-jds_action_button", "secondary-jds_action_button"] }] }] }, { "custom-container": ["children-slot"] }] }, "base": { "container": { "flex-direction": "{d_0}", "justify-content": "{d_13}", "align-items": "{d_14}" }, "root-container": { "hidden": true, "z-index": 1, "flex-direction": "{d_24}", "justify-content": "{d_25}", "background-color": "{d_26}", "align-items": "{d_27}", "border-top-left-radius": "{d_28}", "border-top-right-radius": "{d_29}", "width": "{d_15}", "translate-y": "{d_16}", "enter-animation-name": "slideVerticallyUp", "exit-animation-name": "slideVerticallyDown", "enter-animation-curve": "entrance_ease", "exit-animation-curve": "exit_ease", "enter-animation-duration": 500, "exit-animation-duration": 500, "transition": { "property": ["translate-y"], "duration": "{d_17}", "timing-function": "{d_18}" } }, "cancel-container": { "hidden": false, "flex-direction": "{d_30}", "justify-content": "{d_31}", "align-items": "{d_32}", "width": "{d_33}", "padding-top": "{d_34}", "padding-bottom": "{d_35}", "padding-left": "{d_36}", "padding-right": "{d_37}", "gap": "{d_38}" }, "cancel-jds_button": { "hidden": false, "icon": "ic_close", "size": "medium", "kind": "tertiary" }, "vertical-container": { "flex-direction": "{d_39}", "justify-content": "{d_40}", "align-items": "{d_41}", "padding-left": "{d_42}", "padding-right": "{d_43}", "width": "{d_44}" }, "primary-jds_action_button": { "hidden": false, "kind": "primary", "size": "medium", "appearance": "normal", "state": "normal", "stretch": true }, "secondary-jds_action_button": { "hidden": false, "kind": "secondary", "size": "medium", "appearance": "normal", "state": "normal", "stretch": true }, "cta-container": { "flex-direction": "{d_47}", "gap": "{d_48}", "width": "{d_49}", "padding-bottom": "{d_50}", "padding-top": "{d_51}" }, "back-container": { "flex": 1, "hidden": true }, "back-jds_button": { "kind": "tertiary", "icon": "ic_back" }, "custom-container": { "hidden": true, "z-index": 1, "flex-direction": "{d_1}", "justify-content": "{d_2}", "align-items": "{d_3}", "background-color": "{d_4}", "border-top-left-radius": "{d_5}", "border-top-right-radius": "{d_6}", "padding-left": "{d_7}", "padding-right": "{d_8}", "padding-top": "{d_9}", "padding-bottom": "{d_10}", "width": "{d_11}", "translate-y": "{d_12}", "transition": { "property": ["translate-y"], "duration": "{medium}", "timing-function": "{easeEntrance}" } }, "title-jds-text": { "font-family": "{headingXs}", "color": "{primaryGrey100}", "font-size": "{headingXs}", "line-height": "{headingXs}", "letter-spacing": "{headingXs}", "font-weight": "{headingXs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "max-lines": 2, "padding-bottom": "{d_45}", "maxLines": 2 }, "description-jds-text": { "font-family": "{bodyXs}", "color": "{primaryGrey80}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "padding-bottom": "{d_46}" }, "step-jds-text": { "font-family": "{bodyS}", "color": "{primaryGrey100}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": true, "padding-right": "{d_52}" } }, "variant": { "controlType": { "stepper": { "back-container": { "hidden": false }, "cancel-jds_button": { "hidden": true }, "step-jds-text": { "hidden": false } } }, "buttonOrientation": { "horizontal": { "cta-container": { "flex-direction": "{flexDirection.row}" } } }, "kind": { "passive": { "root-container": { "box-shadow": { "x": 0, "y": 4, "blur": 16, "spread": 0, "color": "{d_53}" } } } }, "close": { "false": { "root-container": { "translate-y": 0, "hidden": false } } }, "primaryCtaDisabled": { "true": { "primary-jds_action_button": { "state": "disabled" } } }, "secondaryCtaDisabled": { "true": { "secondary-jds_action_button": { "state": "disabled" } } } }, "combination": [{ "false": { "true": { "custom-container": { "hidden": false, "translate-y": 0 }, "root-container": { "hidden": true, "translate-y": "{size.max}" }, "vertical-container": { "hidden": true } } } }], "combination_config": [["close", "isCustom"]], "api": { "config": { "kind": { "values": ["overlay", "passive"] }, "controlType": { "values": ["normal", "stepper"] }, "buttonOrientation": { "values": ["vertical", "horizontal"] }, "isCustom": { "values": [false, true] }, "close": { "values": [true, false] }, "primaryCtaDisabled": { "values": [false, true] }, "secondaryCtaDisabled": { "values": [false, true] } }, "data": { "root-container": { "max-height": { "type": "number", "name": "height" } }, "primary-jds_action_button": { "label": { "type": "string", "name": "primaryCTA" } }, "secondary-jds_action_button": { "label": { "type": "string", "name": "secondaryCTA" } }, "title-jds-text": { "value": { "type": "string", "name": "title" } }, "description-jds-text": { "value": { "type": "string", "name": "description" } }, "step-jds-text": { "value": { "type": "string", "name": "step_label" } } }, "children": { "children-slot": { "name": "children", "accepts": ["any"], "max": 1 } }, "events": { "root-container": { "onClick": "onBottomSheetClick", "onSwipeDown": "onClose" }, "custom-container": { "onClick": "onBottomSheetClick", "onSwipeDown": "onClose" }, "cancel-jds_button": { "onClick": "onCancel" }, "primary-jds_action_button": { "onClick": "onPrimaryClick" }, "secondary-jds_action_button": { "onClick": "onSecondaryClick" }, "back-jds_button": { "onClick": "onBack" } }, "a11y": { "root-container": { "properties": { "role": { "value": "dialog" }, "aria-label": { "name": "ariaLabel", "value": "Bottom Sheet Content" }, "aria-modal": { "name": "_ariaModal" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" } } }, "cancel-jds_button": { "properties": { "ariaLabel": { "name": "cancelButtonAriaLabel", "value": "Close Modal" } } }, "back-jds_button": { "properties": { "ariaLabel": { "name": "backButtonAriaLabel", "value": "Click to go Back" } } }, "primary-jds_action_button": { "properties": { "ariaLabel": "primaryCtaAriaLabel", "ariaDescribedby": { "name": "primaryCtaAriaDescribedby", "platform": "web,ios" } } }, "secondary-jds_action_button": { "properties": { "ariaLabel": "secondaryCtaAriaLabel", "ariaDescribedby": { "name": "secondaryCtaAriaDescribedby", "platform": "web,ios" } } } } } };

const PROP_MAP$p = (props) => {
  return {
    primaryCTA: {
      properties: {
        primaryCTA: resolvePropObjectKeys(props.primaryCTA, "title", ""),
        onPrimaryClick: props.primaryCTA?.onClick || props.onPrimaryClick
      }
    },
    secondaryCTA: {
      properties: {
        secondaryCTA: resolvePropObjectKeys(props.secondaryCTA, "title", ""),
        onSecondaryClick: props.secondaryCTA?.onClick || props.onSecondaryClick
      }
    }
  };
};
const withLogic$1E = (Component) => (userProps) => {
  const props = modifyProps(userProps, PROP_MAP$p);
  const { close, onRequestClose, onClose, ...rest } = props;
  const allowClose = !onRequestClose || onRequestClose();
  const closeFn = () => {
    if (allowClose) {
      onClose?.();
    }
  };
  const { mobile } = Devices.useMedia();
  useEscapeClose(closeFn, allowClose);
  if (mobile) {
    return /* @__PURE__ */ jsx(BottomSheet$1, { ...userProps });
  }
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...rest,
        onBack: () => {
          props.stepperConfig?.onBack?.(props.stepperConfig.activeStep);
        },
        label: props.stepperConfig?.indicatorText,
        _ariaModal: props.kind === "overlay" || !props.close ? "true" : "false",
        _onBottomSheetClick: (ev) => ev.stopPropagation(),
        close,
        onCancel: () => {
          if (allowClose) {
            closeFn();
          }
        },
        onClose: () => {
          if (allowClose) {
            closeFn();
          }
        }
      }
    }
  );
};

const Component$1G = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1B;
  const { kind = "overlay", controlType = "normal", buttonOrientation = "vertical", isCustom = false, close = true, primaryCtaDisabled = false, secondaryCtaDisabled = false, onBottomSheetClick = noop, onClose = noop, onCancel = noop, onPrimaryClick = noop, onSecondaryClick = noop, onBack = noop, ariaLabel = "Bottom Sheet Content", cancelButtonAriaLabel = "Close Modal", backButtonAriaLabel = "Click to go Back", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ kind, controlType, buttonOrientation, isCustom, close, primaryCtaDisabled, secondaryCtaDisabled, onBottomSheetClick, onClose, onCancel, onPrimaryClick, onSecondaryClick, onBack, ariaLabel, cancelButtonAriaLabel, backButtonAriaLabel, ...rest }, componentTag },
    "JDSDesktopBottomSheetInternal",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const DesktopBottomSheetInternal = withLogic$1E(Component$1G);
DesktopBottomSheetInternal.displayName = "DesktopBottomSheetInternal";
DesktopBottomSheetInternal.slotName = "jds_desktop_bottom_sheet_internal";

const sdl$1A = { "metadata": { "version": "1.0.0", "id": "divider-1.0.0", "name": "JDSDivider", "layerName": "jds_divider", "description": "Dividers are used to group and divide contents within a page.", "usage": "Dividers are used inorder to establish clear grouping of content or emphasize the in-between boundaries of a list of content." }, "hierarchy": { "container": ["start-container", "jds-text", "end-container"] }, "base": { "container": { "hidden": false, "background-color": "{d_0}", "flex-direction": "{d_1}", "justify-content": "{d_2}", "align-items": "{d_3}", "gap": "{d_4}", "flex": 1, "padding-left": "{d_5}", "padding-right": "{d_6}", "padding-top": "{d_7}", "padding-bottom": "{d_8}" }, "start-container": { "hidden": false, "min-height": "{d_9}", "min-width": "{d_10}", "flex-direction": "{d_11}", "flex": 1, "background-color": "{d_12}", "border-radius": "{d_13}", "show": true }, "end-container": { "hidden": true, "min-height": "{d_14}", "min-width": "{d_15}", "flex-direction": "{d_16}", "flex": 1, "background-color": "{d_17}", "border-radius": "{d_18}", "show": true }, "jds-text": { "font-family": "{bodyXsBold}", "color": "{primaryGrey80}", "font-size": "{bodyXsBold}", "line-height": "{bodyXsBold}", "letter-spacing": "{bodyXsBold}", "font-weight": "{bodyXsBold}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": true } }, "variant": { "variant": { "stepper": { "start-container": { "background-color": "{d_19}" }, "end-container": { "background-color": "{d_20}" } } }, "orientation": { "horizontal": { "container": { "width": "{d_21}" }, "start-container": { "height": 1 }, "end-container": { "height": 1 } }, "vertical": { "container": { "height": "{d_22}", "flex-direction": "{d_23}" }, "start-container": { "width": 1, "flex-direction": "{d_24}", "flex": 1 }, "end-container": { "width": 1, "flex-direction": "{d_25}", "flex": 1 } } }, "pad": { "none": { "container": { "padding-top": 0, "padding-bottom": 0, "padding-right": 0, "padding-left": 0 } } }, "_withLabel": { "true": { "end-container": { "hidden": false }, "jds-text": { "hidden": false } } } }, "combination": [{ "base": { "all": { "container": { "padding-left": "{d_26}", "padding-right": "{d_27}", "padding-top": "{d_28}", "padding-bottom": "{d_29}" } }, "left": { "container": { "padding-left": "{d_30}", "padding-right": 0, "padding-top": 0, "padding-bottom": 0 } }, "right": { "container": { "padding-right": "{d_31}", "padding-left": 0, "padding-top": 0, "padding-bottom": 0 } }, "top": { "container": { "padding-bottom": 0, "padding-right": 0, "padding-left": 0, "padding-top": "{d_32}" } }, "bottom": { "container": { "padding-top": 0, "padding-right": 0, "padding-left": 0, "padding-bottom": "{d_33}" } }, "vertical": { "container": { "padding-top": "{d_34}", "padding-right": 0, "padding-left": 0, "padding-bottom": "{d_35}" } }, "horizontal": { "container": { "padding-top": 0, "padding-bottom": 0, "padding-left": "{d_36}", "padding-right": "{d_37}" } } }, "medium": { "all": { "container": { "padding-left": "{d_38}", "padding-right": "{d_39}", "padding-top": "{d_40}", "padding-bottom": "{d_41}" } }, "left": { "container": { "padding-left": "{d_42}", "padding-right": 0, "padding-top": 0, "padding-bottom": 0 } }, "right": { "container": { "padding-right": "{d_43}", "padding-left": 0, "padding-top": 0, "padding-bottom": 0 } }, "top": { "container": { "padding-right": 0, "padding-left": 0, "padding-bottom": 0, "padding-top": "{d_44}" } }, "bottom": { "container": { "padding-right": 0, "padding-left": 0, "padding-top": 0, "padding-bottom": "{d_45}" } }, "vertical": { "container": { "padding-top": "{d_46}", "padding-bottom": "{d_47}", "padding-right": 0, "padding-left": 0 } }, "horizontal": { "container": { "padding-top": 0, "padding-bottom": 0, "padding-left": "{d_48}", "padding-right": "{d_49}" } } }, "xtra-small": { "all": { "container": { "padding-left": "{d_50}", "padding-right": "{d_51}", "padding-top": "{d_52}", "padding-bottom": "{d_53}" } }, "left": { "container": { "padding-left": "{d_54}", "padding-top": 0, "padding-bottom": 0, "padding-right": 0 } }, "right": { "container": { "padding-right": "{d_55}", "padding-top": 0, "padding-bottom": 0, "padding-left": 0 } }, "top": { "container": { "padding-bottom": 0, "padding-top": "{d_56}", "padding-left": 0, "padding-right": 0 } }, "bottom": { "container": { "padding-top": 0, "padding-bottom": "{d_57}", "padding-left": 0, "padding-right": 0 } }, "vertical": { "container": { "padding-top": "{d_58}", "padding-bottom": "{d_59}", "padding-left": 0, "padding-right": 0 } }, "horizontal": { "container": { "padding-top": 0, "padding-bottom": 0, "padding-left": "{d_60}", "padding-right": "{d_61}" } } }, "xtra-xtra-small": { "all": { "container": { "padding-left": "{d_62}", "padding-right": "{d_63}", "padding-top": "{d_64}", "padding-bottom": "{d_65}" } }, "left": { "container": { "padding-left": "{d_66}", "padding-right": 0, "padding-top": 0, "padding-bottom": 0 } }, "right": { "container": { "padding-right": "{d_67}", "padding-left": 0, "padding-top": 0, "padding-bottom": 0 } }, "top": { "container": { "padding-bottom": 0, "padding-top": "{d_68}", "padding-left": 0, "padding-right": 0 } }, "bottom": { "container": { "padding-top": 0, "padding-bottom": "{d_69}", "padding-left": 0, "padding-right": 0 } }, "vertical": { "container": { "padding-top": "{d_70}", "padding-bottom": "{d_71}", "padding-left": 0, "padding-right": 0 } }, "horizontal": { "container": { "padding-top": 0, "padding-right": 0, "padding-left": "{d_72}", "padding-bottom": "{d_73}" } } }, "xtra-xtra-large": { "all": { "container": { "padding-left": "{d_74}", "padding-right": "{d_75}", "padding-top": "{d_76}", "padding-bottom": "{d_77}" } }, "left": { "container": { "padding-left": "{d_78}", "padding-right": 0, "padding-top": 0, "padding-bottom": 0 } }, "right": { "container": { "padding-right": "{d_79}", "padding-top": 0, "padding-left": 0, "padding-bottom": 0 } }, "top": { "container": { "padding-bottom": 0, "padding-top": "{d_80}", "padding-left": 0, "padding-right": 0 } }, "bottom": { "container": { "padding-top": 0, "padding-bottom": "{d_81}", "padding-left": 0, "padding-right": 0 } }, "vertical": { "container": { "padding-top": "{d_82}", "padding-bottom": "{d_83}", "padding-left": 0, "padding-right": 0 } }, "horizontal": { "container": { "padding-top": 0, "padding-bottom": 0, "padding-left": "{d_84}", "padding-right": "{d_85}" } } }, "xtra-large": { "all": { "container": { "padding-left": "{d_86}", "padding-right": "{d_87}", "padding-top": "{d_88}", "padding-bottom": "{d_89}" } }, "left": { "container": { "padding-left": "{d_90}", "padding-top": 0, "padding-right": 0, "padding-bottom": 0 } }, "right": { "container": { "padding-right": "{d_91}", "padding-top": 0, "padding-left": 0, "padding-bottom": 0 } }, "top": { "container": { "padding-bottom": 0, "padding-left": 0, "padding-right": 0, "padding-top": "{d_92}" } }, "bottom": { "container": { "padding-top": 0, "padding-left": 0, "padding-right": 0, "padding-bottom": "{d_93}" } }, "vertical": { "container": { "padding-top": "{d_94}", "padding-left": 0, "padding-right": 0, "padding-bottom": "{d_95}" } }, "horizontal": { "container": { "padding-top": 0, "padding-bottom": 0, "padding-left": "{d_96}", "padding-right": "{d_97}" } } }, "large": { "all": { "container": { "padding-left": "{d_98}", "padding-right": "{d_99}", "padding-top": "{d_100}", "padding-bottom": "{d_101}" } }, "left": { "container": { "padding-left": "{d_102}", "padding-right": "0", "padding-top": 0, "padding-bottom": 0 } }, "right": { "container": { "padding-right": "{d_103}", "padding-left": "0", "padding-top": 0, "padding-bottom": 0 } }, "top": { "container": { "padding-bottom": 0, "padding-left": 0, "padding-right": 0, "padding-top": "{d_104}" } }, "bottom": { "container": { "padding-top": 0, "padding-left": 0, "padding-right": 0, "padding-bottom": "{d_105}" } }, "vertical": { "container": { "padding-top": "{d_106}", "padding-left": 0, "padding-right": 0, "padding-bottom": "{d_107}" } }, "horizontal": { "container": { "padding-top": 0, "padding-bottom": 0, "padding-left": "{d_108}", "padding-right": "{d_109}" } } }, "huge": { "all": { "container": { "padding-left": "{d_110}", "padding-right": "{d_111}", "padding-top": "{d_112}", "padding-bottom": "{d_113}" } }, "left": { "container": { "padding-left": "{d_114}", "padding-right": 0, "padding-top": 0, "padding-bottom": 0 } }, "right": { "container": { "padding-right": "{d_115}", "padding-top": 0, "padding-left": 0, "padding-bottom": 0 } }, "top": { "container": { "padding-bottom": 0, "padding-top": "{d_116}", "padding-left": 0, "padding-right": 0 } }, "bottom": { "container": { "padding-top": 0, "padding-bottom": "{d_117}", "padding-left": 0, "padding-right": 0 } }, "vertical": { "container": { "padding-top": "{d_118}", "padding-bottom": "{d_119}", "padding-left": 0, "padding-right": 0 } }, "horizontal": { "container": { "padding-top": 0, "padding-bottom": 0, "padding-left": "{d_120}", "padding-right": "{d_121}" } } }, "massive": { "all": { "container": { "padding-left": "{d_122}", "padding-right": "{d_123}", "padding-top": "{d_124}", "padding-bottom": "{d_125}" } }, "left": { "container": { "padding-left": "{d_126}", "padding-right": 0, "padding-top": 0, "padding-bottom": 0 } }, "right": { "container": { "padding-right": "{d_127}", "padding-left": 0, "padding-top": 0, "padding-bottom": 0 } }, "top": { "container": { "padding-bottom": 0, "padding-top": "{d_128}", "padding-left": 0, "padding-right": 0 } }, "bottom": { "container": { "padding-top": 0, "padding-bottom": "{d_129}", "padding-left": 0, "padding-right": 0 } }, "vertical": { "container": { "padding-top": "{d_130}", "padding-bottom": "{d_131}", "padding-left": 0, "padding-right": 0 } }, "horizontal": { "container": { "padding-top": 0, "padding-bottom": 0, "padding-left": "{d_132}", "padding-right": "{d_133}" } } }, "small": { "left": { "container": { "padding-right": 0, "padding-top": 0, "padding-bottom": 0 } }, "right": { "container": { "padding-left": 0, "padding-top": 0, "padding-bottom": 0 } }, "top": { "container": { "padding-bottom": 0, "padding-left": 0, "padding-right": 0 } }, "bottom": { "container": { "padding-top": 0, "padding-left": 0, "padding-right": 0 } }, "vertical": { "container": { "padding-left": 0, "padding-right": 0 } }, "horizontal": { "container": { "padding-top": 0, "padding-bottom": 0 } } } }], "combination_config": [["pad", "padPosition"]], "api": { "data": { "jds-text": { "value": { "type": "string", "name": "label" } } }, "config": { "orientation": { "values": ["horizontal", "vertical"], "doc_description": "Determines the view styles i.e. horizontal or vertical." }, "variant": { "values": ["default", "stepper"] }, "_withLabel": { "values": [false, true] }, "padPosition": { "values": ["all", "vertical", "horizontal", "bottom", "top", "left", "right"], "doc_description": "Sets the position of padding defined as part of `padding` property. If `padding` property present, this default to `all`." }, "pad": { "values": ["small", "base", "medium", "xtra-small", "large", "xtra-large", "xtra-xtra-large", "xtra-xtra-small", "huge", "massive", "none"] } }, "a11y": { "container": { "properties": { "role": { "value": "separator" }, "aria-label": { "name": "_ariaLabel", "prop": "label", "function": true }, "aria-orientation": { "name": "_ariaOrientation", "prop": "orientation" }, "aria-hidden": { "name": "ariaHidden" } } } } } };

const legacyPadding = ["xx-small", "x-small", "x-large", "xx-large"];
const PROP_MAP$o = (props) => {
  if (legacyPadding.includes(props.pad)) {
    console.warn(
      "sizes starting with xx- are deprecated. Use sizes starting with `xtra`. Ex: x-small => xtra-small"
    );
  }
  return {
    pad: {
      variations: {
        base: {
          pad: "base"
        },
        huge: {
          pad: "huge"
        },
        medium: {
          pad: "medium"
        },
        small: {
          pad: "small"
        },
        large: {
          pad: "large"
        },
        "x-small": {
          pad: "xtra-small"
        },
        "xx-small": {
          pad: "xtra-xtra-small"
        },
        "x-large": {
          pad: "xtra-large"
        },
        "xx-large": {
          pad: "xtra-xtra-large"
        },
        massive: {
          pad: "massive"
        }
      }
    },
    appearance: {
      properties: {
        orientation: props.appearance || props.orientation
      }
    }
  };
};
const withLogic$1D = (Component) => (userProps) => {
  const props = modifyProps(userProps, PROP_MAP$o);
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        _withLabel: Boolean(props.label?.length),
        orientation: props.orientation || props.appearance
      }
    }
  );
};

const Component$1F = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1A;
  const { orientation = "horizontal", variant = "default", padPosition = "all", pad = "small", _ariaLabel = props.label?.toString(), _ariaOrientation = props.orientation?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ orientation, variant, padPosition, pad, _ariaLabel, _ariaOrientation, ...rest }, componentTag },
    "JDSDivider",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const Divider = withLogic$1D(Component$1F);
Divider.displayName = "Divider";
Divider.slotName = "jds_divider";

const sdl$1z = { "metadata": { "version": "1.0.0", "id": "dropdown-menu-1.0.0", "name": "JDSDropdownMenu", "layerName": "jds_dropdown_menu" }, "hierarchy": { "popup": [{ "popup-container": ["jds_dropdown_menu_internal"] }] }, "base": { "popup": { "priority": 60, "background-color": "{global.transparent}", "hidden": true }, "popup-container": { "hidden": false }, "jds_dropdown_menu_internal": { "hidden": false, "kind": "single-select" } }, "variant": { "kind": { "multi-select": { "jds_dropdown_menu_internal": { "kind": "multi-select", "showCTAButtons": true } } }, "_menuFullScreen": { "true": { "popup-container": { "size": "{size.max}" }, "jds_dropdown_menu_internal": { "menuFullScreen": true } } }, "open": { "true": { "popup": { "hidden": false }, "jds_dropdown_menu_internal": { "open": true } } }, "searchTrigger": { "true": { "jds_dropdown_menu_internal": { "searchTrigger": true } } }, "showCTAButtons": { "false": { "jds_dropdown_menu_internal": { "showCTAButtons": false } } }, "labelTextWrap": { "true": { "jds_dropdown_menu_internal": { "labelTextWrap": true } } }, "width": { "trigger": { "jds_dropdown_menu_internal": { "menuWidthConfig": "trigger" } } }, "position": { "bottom_start": { "jds_dropdown_menu_internal": { "position": "bottom_start" } }, "bottom_end": { "jds_dropdown_menu_internal": { "position": "bottom_end" } }, "top_start": { "jds_dropdown_menu_internal": { "position": "top_start" } }, "top_end": { "jds_dropdown_menu_internal": { "position": "top_end" } }, "right_start": { "jds_dropdown_menu_internal": { "position": "right_start" } }, "right_end": { "jds_dropdown_menu_internal": { "position": "right_end" } }, "left_start": { "jds_dropdown_menu_internal": { "position": "left_start" } }, "left_end": { "jds_dropdown_menu_internal": { "position": "left_end" } }, "bottom_centre": { "jds_dropdown_menu_internal": { "position": "bottom_centre" } }, "top_centre": { "jds_dropdown_menu_internal": { "position": "top_centre" } } } }, "api": { "events": { "jds_dropdown_menu_internal": { "onSuffixClick": "onSuffixClick", "onSearchChange": "onSearchChange", "onAppear": { "name": "_onAppear", "platform": "ios" }, "onContainerClick": "_onContainerClick", "onPrimaryClick": "onPrimaryClick", "onSecondaryClick": "onSecondaryClick" }, "popup": { "onClick": "onClose" } }, "data": { "jds_dropdown_menu_internal": { "searchLabel": { "type": "string", "name": "searchLabel" }, "searchValue": { "type": "string", "name": "searchValue" }, "searchSuffix": { "type": "icon", "name": "searchSuffix" }, "menuWidth": { "type": "size", "name": "_menuWidth" }, "triggerRef": { "type": "ref", "name": "triggerRef" }, "menuMaxHeight": { "type": "string", "name": "_menuMaxHeight" }, "primaryCTA": { "type": "string", "name": "primaryCTA" }, "secondaryCTA": { "type": "string", "name": "secondaryCTA" }, "children": { "name": "children", "type": "slot", "accepts": ["jds_dropdown_menu_group"] } }, "popup-container": { "padding-left": { "type": "size", "name": "offsetX" }, "padding-top": { "type": "size", "name": "offsetY" } } }, "config": { "kind": { "values": ["single-select", "multi-select"] }, "searchTrigger": { "values": [false, true] }, "showCTAButtons": { "values": [true, false] }, "labelTextWrap": { "values": [false, true] }, "open": { "values": [false, true] }, "width": { "values": ["max-content", "trigger"] }, "position": { "values": ["bottom_start", "bottom_end", "top_start", "top_end", "right_start", "right_end", "left_start", "left_end", "bottom_centre", "top_centre"] }, "_menuFullScreen": { "values": [false, true] } }, "a11y": { "jds_dropdown_menu_internal": { "properties": { "searchAriaLabel": "searchAriaLabel" } } } } };

function findFocusedIndex(menuItems) {
  const focusedElement = document.activeElement;
  const index = menuItems.findIndex((item) => item === focusedElement);
  return index;
}
function handlePrevOrNextItemFocus(focusIndex, containerDomRef, itemSelector) {
  const menuItems = containerDomRef?.querySelectorAll?.(itemSelector);
  if (!menuItems?.length) {
    return;
  }
  const currentFocusIndex = findFocusedIndex(Array.from(menuItems));
  if (focusIndex === 1) {
    if (currentFocusIndex < menuItems.length - 1) {
      menuItems[currentFocusIndex + 1].focus();
    } else {
      menuItems[0].focus();
    }
  } else if (focusIndex === -1) {
    if (currentFocusIndex > 0) {
      menuItems[currentFocusIndex - 1].focus();
    } else {
      menuItems[menuItems.length - 1].focus();
    }
  }
}
const spaceAvailabilityOrder = {
  "bottom-start": [
    "bottom-end",
    "bottom-center",
    "top-start",
    "top-end",
    "top-center"
  ],
  "bottom-end": [
    "bottom-start",
    "bottom-center",
    "top-end",
    "top-start",
    "top-center"
  ],
  "top-start": [
    "top-end",
    "top-center",
    "bottom-start",
    "bottom-end",
    "bottom-center"
  ],
  "top-end": [
    "top-start",
    "top-center",
    "bottom-end",
    "bottom-start",
    "bottom-center"
  ],
  "right-end": ["right-start", "left-end", "left-start"],
  "right-start": [
    "right-end",
    "left-start",
    "left-end",
    "bottom-end",
    "bottom-center"
  ],
  "left-end": ["left-start", "right-end", "right-start"],
  "left-start": ["left-end", "right-start", "right-end"],
  "top-center": [
    "top-start",
    "top-end",
    "bottom-center",
    "bottom-start",
    "bottom-end"
  ],
  "bottom-center": [
    "bottom-start",
    "bottom-end",
    "top-center",
    "top-start",
    "top-end"
  ]
};
function getCalculatedPosition(position, anchorRect, containerDomRect) {
  if (!(position && anchorRect && containerDomRect)) {
    return position;
  }
  if (checkSpaceAvailability(position, anchorRect, containerDomRect)) {
    return position;
  }
  let alternativePosition = spaceAvailabilityOrder[position].find(
    (alternativePosition2) => {
      return checkSpaceAvailability(
        alternativePosition2,
        anchorRect,
        containerDomRect
      );
    }
  );
  if (!alternativePosition) {
    alternativePosition = checkBestAvailablePosition(anchorRect);
  }
  return alternativePosition || position;
}
function checkBestAvailablePosition(anchorRect) {
  const windowWidth = window.innerWidth;
  const windowHeight = window.innerHeight;
  const { bottom, top, left, right } = anchorRect;
  const positionWidthHeightRatios = {
    "bottom-start": (windowWidth - left) * (windowHeight - bottom),
    "bottom-end": right * (windowHeight - bottom),
    "top-start": (windowWidth - left) * top,
    "top-end": right * top,
    "right-start": (windowWidth - right) * (windowHeight - top),
    "right-end": (windowWidth - right) * bottom,
    "left-start": left * (windowHeight - top),
    "left-end": left * bottom,
    "top-center": 0,
    "bottom-center": 0
  };
  let bestPosition = "bottom-start";
  let bestAvailableSpace = 0;
  for (const [position, availableSpace] of Object.entries(
    positionWidthHeightRatios
  )) {
    if (availableSpace > bestAvailableSpace) {
      bestPosition = position;
      bestAvailableSpace = availableSpace;
    }
  }
  return bestPosition;
}
function checkSpaceAvailability(position, anchorRect, containerDomRect) {
  const {
    width: anchorWidth,
    top: anchorTop,
    bottom: anchorBottom,
    right: anchorRight,
    left: anchorLeft
  } = anchorRect;
  const { width: containerWidth, height: containerHeight } = containerDomRect;
  const screenWidth = window.innerWidth;
  const screenHeight = window.innerHeight;
  const screenStart = 0;
  switch (position) {
    case "bottom-start":
      return anchorBottom + containerHeight < screenHeight && anchorLeft + containerWidth < screenWidth;
    case "bottom-end":
      return anchorBottom + containerHeight < screenHeight && anchorRight - containerWidth > screenStart;
    case "top-start":
      return anchorLeft + containerWidth < screenWidth && anchorTop - containerHeight > 0;
    case "top-end":
      return anchorRight - containerWidth > screenStart && anchorTop - containerHeight > 0;
    case "right-end":
      return anchorRight + containerWidth < screenWidth && anchorBottom - containerHeight > 0;
    case "right-start":
      return anchorRight + containerWidth < screenWidth && anchorTop + containerHeight < screenHeight;
    case "left-end":
      return anchorLeft - containerWidth > screenStart && anchorBottom - containerHeight > 0;
    case "left-start":
      return anchorTop + containerHeight < screenHeight && anchorLeft - containerWidth > screenStart;
    case "top-center":
      return anchorTop - containerHeight > 0 && anchorLeft + anchorWidth / 2 - containerWidth / 2 > screenStart && anchorLeft + anchorWidth / 2 + containerWidth / 2 < screenWidth;
    case "bottom-center":
      return anchorBottom + containerHeight < screenHeight && anchorLeft + anchorWidth / 2 - containerWidth / 2 > screenStart && anchorLeft + anchorWidth / 2 + containerWidth / 2 < screenWidth;
    default:
      return true;
  }
}

const DropdownMenuContext = createContext({
  activeMenuId: void 0,
  setActiveMenuId() {
  },
  labelTextWrap: true,
  selectedValue: void 0,
  setSelectedValue() {
  },
  selectedValues: [],
  setSelectedValues() {
  },
  isNested: false,
  setIsNested() {
  },
  resetSelections() {
  },
  applySelections() {
  }
});

const useScrollClose = (callback) => {
  useEffect(() => {
    document.addEventListener("scroll", callback);
    return () => {
      document.removeEventListener("scroll", callback);
    };
  }, [callback]);
};

const MENU_MARGIN = 4;
const getIcon$1 = (icon) => {
  if (!icon)
    return void 0;
  if (typeof icon === "string")
    return /* @__PURE__ */ jsx(Icon, { ic: icon, color: "grey-80" });
  if (icon.props?.ic)
    return /* @__PURE__ */ jsx(Icon, { ic: icon.props.ic, color: "grey-80" });
  return /* @__PURE__ */ jsx(Icon, { ic: icon, color: "grey-80" });
};
function getPositionCoordinates(position, anchorRect, containerDomRect) {
  const {
    top: anchorTop,
    bottom: anchorBottom,
    right: anchorRight,
    left: anchorLeft,
    width: anchorWidth
  } = anchorRect;
  const { width: containerWidth, height: containerHeight } = containerDomRect;
  const screenHeight = window.innerHeight;
  const screenWidth = window.innerWidth;
  let left = 0;
  let top = 0;
  let maxHeight;
  let maxWidth;
  switch (position) {
    case "bottom-start":
      left = anchorLeft;
      top = anchorBottom;
      maxHeight = screenHeight - anchorBottom;
      maxWidth = screenWidth - anchorLeft;
      break;
    case "bottom-end":
      left = anchorRight - containerWidth;
      top = anchorBottom;
      maxHeight = screenHeight - anchorBottom;
      maxWidth = anchorRight;
      break;
    case "top-start":
      left = anchorLeft;
      top = anchorTop - containerHeight;
      maxHeight = anchorTop;
      maxWidth = screenWidth - anchorLeft;
      break;
    case "top-end":
      left = anchorRight - containerWidth;
      top = anchorTop - containerHeight;
      maxHeight = anchorTop;
      maxWidth = anchorRight;
      break;
    case "right-end":
      left = anchorRight;
      top = anchorBottom - containerHeight;
      maxHeight = anchorBottom;
      maxWidth = screenWidth - anchorRight;
      break;
    case "right-start":
      left = anchorRight;
      top = anchorTop;
      maxHeight = screenHeight - anchorTop;
      maxWidth = screenWidth - anchorRight;
      break;
    case "left-end":
      left = anchorLeft - containerWidth;
      top = anchorBottom - containerHeight;
      maxHeight = anchorBottom;
      maxWidth = anchorLeft;
      break;
    case "left-start":
      left = anchorLeft - containerWidth;
      top = anchorTop;
      maxHeight = screenHeight - anchorTop;
      maxWidth = anchorLeft;
      break;
    case "top-center":
      left = anchorLeft + anchorWidth / 2 - containerWidth / 2;
      top = anchorTop - containerHeight;
      maxHeight = anchorTop;
      maxWidth = screenWidth;
      break;
    case "bottom-center":
      left = anchorLeft + anchorWidth / 2 - containerWidth / 2;
      top = anchorBottom;
      maxHeight = screenHeight - anchorBottom;
      maxWidth = screenWidth;
      break;
  }
  if (position.includes("top")) {
    top -= MENU_MARGIN;
  } else if (position.includes("bottom")) {
    top += MENU_MARGIN;
  } else if (position.includes("right")) {
    left += MENU_MARGIN;
  } else if (position.includes("left")) {
    left -= MENU_MARGIN;
  }
  return {
    left: Math.round(left < 0 ? 0 : left),
    top: Math.round(top < 0 ? 0 : top),
    maxHeight,
    maxWidth
  };
}
const DROPDOWNMENU_SELECTOR$1 = "div.j-JDSDropdownMenuInternal-menu-container";
const SEARCH_BAR_HEIGHT = 56;
const withLogic$1C = (Component) => (props) => {
  const [activeMenuId, setActiveMenuId] = useState(
    void 0
  );
  const { element, rootRef } = useRootRef();
  const [labelTextWrap, setLabelTextWrap] = useState(true);
  const [selectedValue, setSelectedValue] = useState(
    void 0
  );
  const [selectedValues, setSelectedValues] = useState([]);
  const [menuVisible, setMenuVisible] = useState(false);
  const [internalOpen, setInternalOpen] = useState(false);
  const [isNested, setIsNested] = useState(false);
  const [fullScreen, setFullScreen] = useState(false);
  const [menuWidth, setMenuWidth] = useState("max-content");
  const internalProps = props;
  const { anchorEl, position } = props;
  const dropdownMenuRef = element?.querySelector(
    DROPDOWNMENU_SELECTOR$1
  );
  const [coords, setCoords] = useState({
    left: 0,
    top: 0,
    maxHeight: 0,
    maxWidth: void 0
  });
  const defaultValue = {
    activeMenuId: void 0,
    setActiveMenuId,
    labelTextWrap,
    selectedValue,
    setSelectedValue(value) {
      setSelectedValue(value);
      if (props.value !== value) {
        props?.onSelect?.(value);
        props?.onClose?.();
        setActiveMenuId(void 0);
      }
    },
    selectedValues,
    setSelectedValues: (values) => setSelectedValues([...values]),
    isNested,
    setIsNested,
    resetSelections: () => {
      setSelectedValues([]);
    },
    applySelections: () => {
      props?.onSelect?.(selectedValues);
      props?.onClose?.();
    }
  };
  useEffect(() => {
    if (props.open) {
      setInternalOpen(true);
      if (dropdownMenuRef && anchorEl?.current) {
        setFullScreen(false);
        setMenuWidth("max-content");
        setTimeout(() => {
          const anchorDomRect = anchorEl.current?.getBoundingClientRect();
          const containerDomRect = dropdownMenuRef?.getBoundingClientRect();
          if (anchorDomRect && containerDomRect) {
            const calculatedPosition = getCalculatedPosition(
              position || "bottom-start",
              anchorDomRect,
              containerDomRect
            );
            const { left, top, maxHeight, maxWidth } = getPositionCoordinates(
              calculatedPosition,
              anchorDomRect,
              containerDomRect
            );
            const menuItems = dropdownMenuRef.querySelectorAll(
              ".j-JDSDropdownMenuItem-container"
            );
            const isFullScreen = Devices.isMobile() ? isNested || (menuItems?.length || 0) > 7 : false;
            setFullScreen(isFullScreen);
            if (isFullScreen) {
              setCoords({
                left: 0,
                top: 0,
                maxHeight,
                maxWidth
              });
            } else {
              setCoords({
                left,
                top,
                maxHeight,
                maxWidth
              });
            }
            setMenuVisible(true);
            if (props.width === "trigger") {
              setMenuWidth(`${anchorDomRect.width}px`);
            } else {
              setMenuWidth(
                maxWidth && containerDomRect.width > maxWidth ? `${maxWidth}px` : "max-content"
              );
            }
          }
        }, 10);
      }
    } else {
      setMenuVisible(false);
      setTimeout(() => {
        setInternalOpen(false);
      }, 300);
    }
  }, [props.open, anchorEl, position, dropdownMenuRef, isNested]);
  useEffect(() => {
    if (props.kind === "multi-select") {
      setSelectedValues(props.value ? [props.value] : []);
    } else {
      setSelectedValue(props.value);
    }
  }, [props.value]);
  useEffect(() => {
    setLabelTextWrap(!!props.labelTextWrap);
  }, [props.labelTextWrap]);
  useEffect(() => {
    if (props.open && dropdownMenuRef) {
      dropdownMenuRef.focus();
    }
  }, [props.open, dropdownMenuRef]);
  useEffect(() => {
    const handleKeyDown = (event) => {
      if (props.open && !activeMenuId) {
        switch (event.key) {
          case "ArrowUp": {
            handlePrevOrNextItemFocus(
              -1,
              dropdownMenuRef,
              ".j-JDSDropdownMenuItem-container"
            );
            event.preventDefault();
            event.stopPropagation();
            break;
          }
          case "ArrowDown": {
            handlePrevOrNextItemFocus(
              1,
              dropdownMenuRef,
              ".j-JDSDropdownMenuItem-container"
            );
            event.preventDefault();
            event.stopPropagation();
            break;
          }
          case "Escape": {
            props?.onClose?.();
            anchorEl?.current?.focus?.();
            break;
          }
        }
      }
    };
    if (props.open) {
      window.addEventListener("keydown", handleKeyDown);
    }
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
    };
  }, [props.open, dropdownMenuRef, activeMenuId]);
  const shouldShowSuffix = props?.searchConfig?.suffix !== false;
  const close = () => {
    props?.onClose?.();
    setMenuVisible(false);
    setActiveMenuId(void 0);
  };
  useScrollClose(close);
  return /* @__PURE__ */ jsx(
    DropdownMenuContext.Provider,
    {
      value: {
        ...defaultValue,
        setActiveMenuId,
        setIsNested,
        activeMenuId,
        labelTextWrap,
        selectedValue,
        selectedValues,
        isNested
      },
      children: /* @__PURE__ */ jsx(
        Component,
        {
          ...{
            ...props,
            open: internalOpen,
            onClose: () => {
              props?.onClose?.();
              setMenuVisible(false);
              setActiveMenuId(void 0);
            },
            rootRef,
            offsetX: internalProps.offsetX || `${coords.left}px`,
            _menuWidth: fullScreen ? "100%" : menuWidth,
            _menuFullScreen: fullScreen,
            _menuMaxHeight: coords.maxHeight === 0 ? "unset" : props.searchTrigger ? `${coords.maxHeight - SEARCH_BAR_HEIGHT}px` : `${coords.maxHeight}px`,
            offsetY: internalProps.offsetY || `${coords.top}px`,
            searchSuffix: shouldShowSuffix ? "IcMic" : void 0,
            searchLabel: props.searchLabel || "Search",
            searchValue: props.searchValue,
            onSuffixClick: props.onSuffixClick,
            onSearchChange: props?.onSearchChange,
            _onContainerClick: (event) => {
              event.stopPropagation();
            },
            onPrimaryClick: () => {
              props.onPrimaryClick?.();
              defaultValue.applySelections();
            },
            onSecondaryClick: () => {
              props.onSecondaryClick?.();
              defaultValue.resetSelections();
            },
            _menuContainerVisible: menuVisible
          }
        }
      )
    }
  );
};

const Component$1E = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1z;
  const { kind = "single-select", searchTrigger = false, showCTAButtons = true, labelTextWrap = false, open = false, width = "max-content", position = "bottom_start", onSuffixClick = noop, onSearchChange = noop, onPrimaryClick = noop, onSecondaryClick = noop, onClose = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ kind, searchTrigger, showCTAButtons, labelTextWrap, open, width, position, onSuffixClick, onSearchChange, onPrimaryClick, onSecondaryClick, onClose, ...rest }, componentTag },
    "JDSDropdownMenu",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const DropdownMenu = withLogic$1C(Component$1E);
DropdownMenu.displayName = "DropdownMenu";
DropdownMenu.slotName = "jds_dropdown_menu";

const sdl$1y = { "metadata": { "version": "1.0.0", "id": "dropdown-menu-group-1.0.0", "name": "JDSDropdownMenuGroup", "layerName": "jds_dropdown_menu_group", "internal": true }, "hierarchy": { "container": ["top-jds_divider", { "label-container": ["label-jds-text"] }, { "menu-item-container": ["menu-item-slot"] }, "bottom-jds_divider"] }, "base": { "top-jds_divider": { "hidden": false, "orientation": "horizontal", "pad": "xtra-small", "padPosition": "top" }, "bottom-jds_divider": { "hidden": false, "orientation": "horizontal", "pad": "none", "padPosition": "all" }, "label-container": { "width": "{d_6}", "padding-top": "{d_3}", "padding-right": "{d_5}", "padding-left": "{d_4}" }, "container": { "hidden": false, "width": "{d_0}", "background-color": "{d_7}", "flex-direction": "{d_1}" }, "menu-item-container": { "width": "{d_8}", "flex-direction": "{d_2}" }, "menu-item-slot": { "hidden": false }, "label-jds-text": { "font-family": "{bodyXxsBold}", "color": "{primaryGrey100}", "font-size": "{bodyXxsBold}", "line-height": "{bodyXxsBold}", "letter-spacing": "{bodyXxsBold}", "font-weight": "{bodyXxsBold}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": false } }, "variant": { "_hideTopDivider": { "true": { "top-jds_divider": { "hidden": true }, "label-container": { "hidden": true } } }, "hideBottomDivider": { "true": { "bottom-jds_divider": { "hidden": true } } } }, "api": { "children": { "menu-item-slot": { "name": "children", "accepts": ["jds_dropdown_menu_item"] } }, "data": { "label-jds-text": { "value": { "type": "string", "name": "label" } } }, "config": { "hideBottomDivider": { "values": [false, true] }, "_hideTopDivider": { "values": [false, true] } } } };

const withLogic$1B = (Component) => (props) => {
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        _hideTopDivider: !props.label
      }
    }
  );
};

const Component$1D = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1y;
  const { hideBottomDivider = false, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ hideBottomDivider, ...rest }, componentTag },
    "JDSDropdownMenuGroup",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const DropdownMenuGroup = withLogic$1B(Component$1D);
DropdownMenuGroup.displayName = "DropdownMenuGroup";
DropdownMenuGroup.slotName = "jds_dropdown_menu_group";

const sdl$1x = { "metadata": { "version": "1.0.0", "id": "dropdown-menu-1.0.0", "name": "JDSDropdownMenuInternal", "layerName": "jds_dropdown_menu_internal", "internal": true }, "hierarchy": { "menu-container": [{ "search-container": ["jds_search_box"] }, { "menu-group-container": ["menu-group-slot"] }, { "botton-container": ["secondary-jds_action_button", "primary-jds_action_button"] }] }, "base": { "menu-container": { "hidden": false, "background-color": "{primaryGrey20}", "flex-direction": "{flexDirection.column}", "border-radius": "{large}", "pointer-events": "auto", "overflow": "hidden", "opacity": "{opacity.invisible}", "enter-animation-name": "fadeIn", "exit-animation-name": "fadeOut", "enter-animation-curve": "entrance_ease", "exit-animation-curve": "exit_ease", "enter-animation-duration": 500, "exit-animation-duration": 500, "box-shadow": { "x": 0, "y": 4, "blur": 16, "spread": 0, "color": "{custom_color_5}" } }, "jds_search_box": { "prefix": "ic_search", "kind": "light_background", "width": "{size.max}" }, "menu-group-container": { "hidden": false, "width": "{size.max}", "flex-direction": "{flexDirection.column}", "padding-top": "{xs}", "padding-bottom": "{xs}", "overflow-y": "auto" }, "search-container": { "hidden": true, "width": "{size.max}", "padding-top": "{base}", "padding-left": "{base}", "padding-right": "{base}" }, "menu-group-slot": { "hidden": false }, "botton-container": { "hidden": true, "width": "{size.max}", "padding-top": "{base}", "padding-bottom": "{m}", "padding-left": "{base}", "padding-right": "{base}", "flex-direction": "{flexDirection.row}", "gap": "{s}" }, "primary-jds_action_button": { "kind": "primary", "size": "medium", "stretch": true }, "secondary-jds_action_button": { "kind": "secondary", "size": "medium", "stretch": true } }, "variant": { "menuFullScreen": { "true": { "menu-container": { "size": "{size.max}" } } }, "_menuContainerVisible": { "true": { "menu-container": { "opacity": "{opacity.enabled}" } } }, "searchTrigger": { "true": { "search-container": { "hidden": false } } }, "kind": { "multi-select": { "botton-container": { "hidden": false } } } }, "combination": [{ "multi-select": { "false": { "botton-container": { "hidden": true } } } }], "combination_config": [["kind", "showCTAButtons"]], "api": { "children": { "menu-group-slot": { "name": "children", "accepts": ["jds_dropdown_menu_group"] } }, "events": { "jds_search_box": { "onSuffixClick": "onSuffixClick", "onChange": "onSearchChange" }, "menu-container": { "onAppear": { "name": "onAppear", "platform": "ios" }, "onClick": "onContainerClick" }, "secondary-jds_action_button": { "onClick": "onSecondaryClick" }, "primary-jds_action_button": { "onClick": "onPrimaryClick" } }, "data": { "jds_search_box": { "label": { "type": "string", "name": "searchLabel" }, "value": { "type": "string", "name": "searchValue" }, "suffix": { "type": "icon", "name": "searchSuffix" } }, "menu-container": { "width": { "type": "size", "name": "menuWidth" }, "elementRef": { "type": "ref", "name": "triggerRef" } }, "menu-group-container": { "max-height": { "type": "string", "name": "menuMaxHeight" } }, "primary-jds_action_button": { "label": { "type": "string", "name": "primaryCTA" } }, "secondary-jds_action_button": { "label": { "type": "string", "name": "secondaryCTA" } } }, "config": { "kind": { "values": ["single-select", "multi-select"] }, "searchTrigger": { "values": [false, true] }, "showCTAButtons": { "values": [true, false] }, "labelTextWrap": { "values": [false, true] }, "open": { "values": [false, true] }, "menuWidthConfig": { "values": ["max-content", "trigger"] }, "position": { "values": ["bottom_start", "bottom_end", "top_start", "top_end", "right_start", "right_end", "left_start", "left_end", "bottom_centre", "top_centre"] }, "menuFullScreen": { "values": [false, true] }, "_menuContainerVisible": { "values": [false, true] } }, "a11y": { "menu-container": { "properties": { "role": { "value": "menu" } } }, "jds_search_box": { "properties": { "ariaLabel": "searchAriaLabel" } } } } };

const DROPDOWNMENU_SELECTOR = "div.j-JDSDropdownMenuInternal-menu-container";
const withLogic$1A = (Component) => (props) => {
  const { activeMenuId, setActiveMenuId } = useContext(DropdownMenuContext);
  const { element, rootRef } = useRootRef();
  const [menuVisible, setMenuVisible] = useState(false);
  const [internalOpen, setInternalOpen] = useState(false);
  const { anchorEl, position } = props;
  const dropdownMenuRef = element?.querySelector(
    DROPDOWNMENU_SELECTOR
  );
  useEffect(() => {
    if (props.open) {
      setTimeout(() => {
        setInternalOpen(true);
        setMenuVisible(true);
      }, 10);
    } else {
      setMenuVisible(false);
      setTimeout(() => {
        setInternalOpen(false);
      }, 300);
    }
  }, [props.open, anchorEl, position, dropdownMenuRef]);
  useEffect(() => {
    const handleKeyDown = (event) => {
      if (props.open && !activeMenuId) {
        switch (event.key) {
          case "ArrowUp": {
            handlePrevOrNextItemFocus(
              -1,
              dropdownMenuRef,
              ".j-JDSDropdownMenuItem-container"
            );
            event.preventDefault();
            event.stopPropagation();
            break;
          }
          case "ArrowDown": {
            handlePrevOrNextItemFocus(
              1,
              dropdownMenuRef,
              ".j-JDSDropdownMenuItem-container"
            );
            event.preventDefault();
            event.stopPropagation();
            break;
          }
          case "Escape": {
            props?.onClose?.();
            anchorEl?.current?.focus?.();
            break;
          }
        }
      }
    };
    if (props.open) {
      window.addEventListener("keydown", handleKeyDown);
    }
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
    };
  }, [props.open, dropdownMenuRef, activeMenuId]);
  const shouldShowSuffix = props?.searchConfig?.suffix !== false;
  const close = () => {
    props?.onClose?.();
    setMenuVisible(false);
    setActiveMenuId(void 0);
  };
  useScrollClose(close);
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        open: internalOpen,
        onClose: () => {
          props?.onClose?.();
          setMenuVisible(false);
          setActiveMenuId(void 0);
        },
        rootRef,
        searchSuffix: shouldShowSuffix ? "IcMic" : void 0,
        searchLabel: props.searchLabel || "Search",
        searchValue: props.searchValue,
        onSuffixClick: props.onSuffixClick,
        onSearchChange: props?.onSearchChange,
        _onContainerClick: (event) => {
          event.stopPropagation();
        },
        _menuContainerVisible: menuVisible
      }
    }
  );
};

const Component$1C = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1x;
  const { kind = "single-select", searchTrigger = false, showCTAButtons = true, labelTextWrap = false, open = false, menuWidthConfig = "max-content", position = "bottom_start", menuFullScreen = false, onSuffixClick = noop, onSearchChange = noop, onAppear = noop, onContainerClick = noop, onSecondaryClick = noop, onPrimaryClick = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ kind, searchTrigger, showCTAButtons, labelTextWrap, open, menuWidthConfig, position, menuFullScreen, onSuffixClick, onSearchChange, onAppear, onContainerClick, onSecondaryClick, onPrimaryClick, ...rest }, componentTag },
    "JDSDropdownMenuInternal",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const DropdownMenuInternal = withLogic$1A(Component$1C);
DropdownMenuInternal.displayName = "DropdownMenuInternal";
DropdownMenuInternal.slotName = "jds_dropdown_menu_internal";

const sdl$1w = { "metadata": { "version": "1.0.0", "id": "dropdown-menu-item-1.0.0", "name": "JDSDropdownMenuItem", "layerName": "jds_dropdown_menu_item", "internal": true }, "hierarchy": { "root-container": [{ "container": ["jds_checkbox", { "prefix-container": ["prefix-slot"] }, { "content-container": ["label-jds-text", "description-jds-text"] }, { "suffix-container": ["suffix-jds-text", "icon"] }] }, { "jds_dropdown_menu_submenu": ["menu-group-slot"] }] }, "base": { "root-container": { "hidden": false, "width": "{d_24}" }, "container": { "hidden": false, "flex-direction": "{d_1}", "align-items": "{d_16}", "gap": "{d_3}", "background-color": "{d_4}", "width": "{d_0}", "padding-top": "{d_8}", "padding-right": "{d_9}", "padding-bottom": "{d_10}", "padding-left": "{d_11}", "opacity": "", "behavior": { "hover": { "background-color": "{d_5}" }, "active": { "background-color": "{d_6}" }, "focus": { "border-radius": "{d_23}" } } }, "menu-group-slot": { "hidden": false }, "suffix-container": { "hidden": false }, "prefix-container": { "hidden": false, "align-self": "{d_17}" }, "prefix-slot": { "hidden": false }, "content-container": { "hidden": false, "flex": 1, "overflow": "hidden", "justify-content": "{d_14}", "align-items": "{d_15}", "flex-direction": "{d_2}" }, "icon": { "size": "{d_19}", "color": "{d_18}", "value": "ic_chevron_right", "behavior": { "active": { "color": "{d_20}" } }, "hidden": true }, "jds_dropdown_menu_submenu": { "hidden": true }, "jds_checkbox": { "hidden": true }, "label-jds-text": { "font-family": "{bodyS}", "color": "{primaryGrey100}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": false, "behavior": { "active": { "color": "{primaryInverse}" } } }, "description-jds-text": { "font-family": "{bodyXxs}", "color": "{primaryGrey100}", "font-size": "{bodyXxs}", "line-height": "{bodyXxs}", "letter-spacing": "{bodyXxs}", "font-weight": "{bodyXxs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": false, "behavior": { "active": { "color": "{primaryInverse}" } } }, "suffix-jds-text": { "font-family": "{bodyXxs}", "color": "{primaryGrey80}", "font-size": "{bodyXxs}", "line-height": "{bodyXxs}", "letter-spacing": "{bodyXxs}", "font-weight": "{bodyXxs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": false, "behavior": { "active": { "color": "{primaryInverse}" } } } }, "variant": { "kind": { "multi-select": { "jds_checkbox": { "hidden": false, "checked": false }, "container": { "behavior": { "active": { "background-color": "{primaryGrey40}" } } }, "icon": { "behavior": { "active": { "color": "{primaryGrey80}" } } }, "label-jds-text": { "behavior": { "active": {} } }, "description-jds-text": { "behavior": { "active": {} } }, "suffix-jds-text": { "behavior": { "active": { "color": "{primaryGrey100}" } } } } }, "_labelTextWrap": { "false": { "label-jds-text": { "max-lines": 1, "maxLines": 1 } } }, "disabled": { "true": { "container": { "disabled": true, "opacity": "{d_22}" } } }, "selected": { "true": { "jds_dropdown_menu_submenu": { "hidden": false }, "container": { "background-color": "{d_12}", "behavior": { "hover": { "background-color": "{d_13}" } } }, "icon": { "color": "{d_21}" }, "label-jds-text": { "color": "{primaryInverse}" }, "description-jds-text": { "color": "{primaryInverse}" }, "suffix-jds-text": { "color": "{primaryInverse}" } } }, "_hasSubMenu": { "true": { "icon": { "hidden": false }, "suffix-jds-text": { "hidden": true } } } }, "combination": [{ "multi-select": { "true": { "container": { "background-color": "{primaryGrey20}", "behavior": { "hover": { "background-color": "{primaryGrey20}" } } }, "icon": { "color": "{primaryGrey80}" }, "label-jds-text": {}, "description-jds-text": {}, "suffix-jds-text": { "color": "{primaryGrey100}" } } } }], "combination_config": [["kind", "selected"]], "api": { "children": { "prefix-slot": { "name": "prefix", "accepts": ["jds_image", "jds_avatar", "jds_icon"], "max": 1 }, "menu-group-slot": { "name": "children", "accepts": ["jds_dropdown_menu_group"] } }, "events": { "container": { "onAppear": { "name": "_onAppear", "platform": "ios" }, "onClick": "onClick" }, "jds_checkbox": { "onClick": "onItemSelect" } }, "data": { "jds_dropdown_menu_submenu": { "offsetX": { "type": "string", "name": "_offsetX" }, "offsetY": { "type": "string", "name": "_offsetY" }, "children": { "type": "slot", "name": "children", "accepts": ["jds_dropdown_menu_group"] } }, "jds_checkbox": { "indeterminate": { "type": "boolean", "name": "_indeterminate" }, "checked": { "type": "boolean", "name": "_checked" } }, "label-jds-text": { "value": { "type": "string", "name": "label" } }, "description-jds-text": { "value": { "type": "string", "name": "description" } }, "suffix-jds-text": { "value": { "type": "string", "name": "suffix" } } }, "config": { "kind": { "values": ["single-select", "multi-select"] }, "selected": { "values": [false, true] }, "disabled": { "values": [false, true] }, "_hasSubMenu": { "values": [false, true] }, "_labelTextWrap": { "values": [true, false] } }, "a11y": { "container": { "properties": { "role": { "value": "menuitem" }, "aria-label": { "name": "ariaLabel", "prop": "label" }, "aria-haspopup": { "name": "_ariaHaspopup", "prop": "_hasSubMenu" }, "aria-expanded": { "name": "_ariaExpanded" } } } } } };

function getUniqueId() {
  return generateId() + "-" + generateId() + "-" + generateId();
}
const generateId = function() {
  return ((1 + Math.random()) * 65536 | 0).toString(16).substring(1);
};

const DROPDOWNMENUITEM_SELECTOR = "div.j-JDSDropdownMenuItem-container";
const SUBMENU_OFFSET_TOP = 8;
const SUBMENU_MARGIN = 4;
const getPrefixComponent = (prefix) => {
  if (typeof prefix === "string") {
    return getIcon$1(prefix);
  }
  if (prefix?.props?.src) {
    return cloneElement(prefix, {
      ...prefix.props,
      roundedCorner: true,
      aspectRatio: "square",
      style: { width: "24px", height: "24px" }
    });
  }
  if (prefix?.props?.initials || prefix?.props?.kind) {
    return cloneElement(prefix, {
      ...prefix.props,
      size: "x-small"
    });
  }
  return void 0;
};
const withLogic$1z = (Component) => (props) => {
  const { element, rootRef } = useRootRef();
  const [selected, setSelected] = useState(false);
  const [menuItemId, setMenuItemId] = useState("");
  const context = useContext(DropdownMenuContext);
  const [offset, setOffset] = useState({
    offsetX: 0,
    offsetY: 0
  });
  useEffect(() => {
    setMenuItemId(getUniqueId());
  }, []);
  useEffect(() => {
    if (context.isNested && !props.children) {
      if (selected) {
        setSelected(false);
      }
      return;
    }
    if (props.children) {
      context.setIsNested(true);
      setSelected(context.activeMenuId === menuItemId);
    } else {
      if (props.kind === "multi-select") {
        setSelected(context.selectedValues.includes(props.value || ""));
      } else {
        setSelected(
          context.selectedValue !== void 0 && context.selectedValue === props.value
        );
      }
    }
  }, [
    selected,
    context.activeMenuId,
    menuItemId,
    context.selectedValue,
    context.selectedValues,
    context.isNested,
    props.value,
    props.children
  ]);
  const handleSubMenuPositioning = () => {
    const dropdownMenuItemRef2 = element?.querySelector(
      DROPDOWNMENUITEM_SELECTOR
    );
    if (dropdownMenuItemRef2) {
      const { right, top, bottom, left } = dropdownMenuItemRef2.getBoundingClientRect();
      setOffset({
        offsetX: `${right + SUBMENU_MARGIN}px`,
        offsetY: `${top - SUBMENU_OFFSET_TOP}px`
      });
      setTimeout(() => {
        const subMenuRef = document.querySelector(
          ".j-jds-JDSDropdownMenuSubMenu-menu-container"
        );
        if (!subMenuRef) {
          return;
        }
        const subMenuDomRect = subMenuRef.getBoundingClientRect();
        if (subMenuDomRect.right < window.innerWidth) {
          return;
        }
        if (subMenuDomRect.width < left) {
          setOffset(({ offsetY }) => ({
            offsetX: `${left - (subMenuDomRect.width + SUBMENU_MARGIN)}px`,
            offsetY
          }));
        } else {
          setOffset({
            offsetX: `${window.innerWidth - subMenuDomRect.width}px`,
            offsetY: `${bottom + SUBMENU_MARGIN}px`
          });
        }
      }, 50);
    }
  };
  const dropdownMenuItemRef = element?.querySelector(
    DROPDOWNMENUITEM_SELECTOR
  );
  useEffect(() => {
    const handleKeyDown = (event) => {
      switch (event.key) {
        case "ArrowRight": {
          if (document.activeElement === dropdownMenuItemRef) {
            if (Boolean(props.children) && !selected) {
              context.setActiveMenuId(menuItemId);
              handleSubMenuPositioning();
              setTimeout(() => {
                const subMenuRef = document.querySelector(
                  ".j-JDSDropdownMenuSubMenu-menu-container"
                );
                if (subMenuRef) {
                  handlePrevOrNextItemFocus(
                    1,
                    subMenuRef,
                    ".j-JDSDropdownMenuItem-container"
                  );
                }
              }, 10);
            }
            event.preventDefault();
            event.stopPropagation();
          }
          break;
        }
        case "ArrowLeft":
        case "Escape": {
          if (selected && context.activeMenuId) {
            setSelected(false);
            context.setActiveMenuId("");
            dropdownMenuItemRef?.focus?.();
          }
          break;
        }
      }
    };
    window.addEventListener("keydown", handleKeyDown);
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
    };
  }, [context.activeMenuId, selected, dropdownMenuItemRef, menuItemId]);
  const children = React.Children.toArray(props.children?.props?.children);
  const selectedItems = React.Children.toArray(
    props.children?.props?.children
  ).filter((child) => {
    if (!(typeof child === "object"))
      return false;
    if (!("props" in child))
      return false;
    return child.props.selected;
  });
  const isSelected = children.length ? selectedItems.length === children.length : props.selected;
  const handleClick = (event) => {
    const updatedSelectedValues = [...context.selectedValues];
    if (props.children) {
      context.setActiveMenuId(menuItemId);
      handleSubMenuPositioning();
    } else {
      if (props.kind === "multi-select") {
        const isChecked = event.target.checked;
        if (isChecked) {
          if (!updatedSelectedValues.includes(props.value ?? "")) {
            updatedSelectedValues.push(props.value ?? "");
          }
        } else {
          const index = updatedSelectedValues.indexOf(props.value ?? "");
          if (index > -1) {
            updatedSelectedValues.splice(index, 1);
          }
        }
      } else {
        context.setSelectedValue(props.value ?? "");
      }
    }
    if (props.kind === "multi-select") {
      children.forEach((child) => {
        if (typeof child === "object" && "props" in child) {
          if (child.props.selected) {
            if (!updatedSelectedValues.includes(child.props.value)) {
              updatedSelectedValues.push(child.props.value);
            }
          } else {
            const index = updatedSelectedValues.indexOf(child.props.value);
            if (index > -1) {
              updatedSelectedValues.splice(index, 1);
            }
          }
        }
      });
      context.setSelectedValues(updatedSelectedValues);
    }
    props?.onClick?.(props.value);
  };
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        rootRef,
        prefix: getPrefixComponent(props.prefix),
        disabled: Boolean(props.disabled),
        _labelTextWrap: context.labelTextWrap,
        _offsetX: offset.offsetX,
        _offsetY: offset.offsetY,
        _hasSubMenu: Boolean(props.children),
        selected,
        _checked: isSelected,
        _indeterminate: !isSelected && selectedItems.length > 0,
        className: selected ? "selected" : "",
        onClick: handleClick,
        tabIndex: 0,
        _ariaExpanded: !props.children ? void 0 : selected ? "true" : "false"
      }
    }
  );
};

const Component$1B = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1w;
  const { kind = "single-select", selected = false, disabled = false, onClick = noop, onItemSelect = noop, ariaLabel = props.label?.toString(), _ariaHaspopup = props._hasSubMenu?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ kind, selected, disabled, onClick, onItemSelect, ariaLabel, _ariaHaspopup, ...rest }, componentTag },
    "JDSDropdownMenuItem",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const DropdownMenuItem = withLogic$1z(Component$1B);
DropdownMenuItem.displayName = "DropdownMenuItem";
DropdownMenuItem.slotName = "jds_dropdown_menu_item";

const sdl$1v = { "metadata": { "version": "1.0.0", "id": "dropdown-menu-submenu-1.0.0", "name": "JDSDropdownMenuSubMenu", "layerName": "jds_dropdown_menu_sub_menu", "internal": true }, "hierarchy": { "popup": [{ "popup-container": ["jds_dropdown_menu_sub_menu_internal"] }] }, "base": { "popup": { "priority": 65, "background-color": "{global.transparent}", "passive": true } }, "variant": { "_platform": { "mobile": { "popup-container": { "size": "{size.max}" } } } }, "api": { "data": { "popup-container": { "padding-left": { "type": "size", "name": "offsetX" }, "padding-top": { "type": "size", "name": "offsetY" } }, "jds_dropdown_menu_sub_menu_internal": { "_menuWidth": { "type": "size", "name": "_menuWidth" }, "_menuMaxHeight": { "type": "size", "name": "_menuMaxHeight" }, "triggerRef": { "type": "ref", "name": "triggerRef" }, "children": { "name": "children", "type": "slot", "accepts": ["jds_dropdown_menu_group"] } } }, "events": { "jds_dropdown_menu_sub_menu_internal": { "onAppear": { "name": "_onAppear", "platform": "ios" }, "onSelect": "onSelect" } }, "config": { "_platform": { "values": ["mobile", "desktop"] }, "_menuContainerVisible": { "values": [false, true] } } } };

const DROPDOWNMENUSUBMENU_SELECTOR = "div.j-JDSDropdownMenuSubMenuInternal-menu-container";
const withLogic$1y = (Component) => (props) => {
  const { element, rootRef } = useRootRef();
  const context = useContext(DropdownMenuContext);
  const [visible, setVisible] = useState(false);
  const childArray = Children.toArray(props.children);
  const firstChild = childArray[0];
  const dropdownMenuSubMenuRef = element?.querySelector(
    DROPDOWNMENUSUBMENU_SELECTOR
  );
  useEffect(() => {
    if (dropdownMenuSubMenuRef) {
      setTimeout(() => {
        dropdownMenuSubMenuRef.focus();
      });
    }
  }, [dropdownMenuSubMenuRef, visible]);
  useEffect(() => {
    const handleKeyDown = (event) => {
      const isOpen = dropdownMenuSubMenuRef?.contains(document.activeElement);
      if (isOpen) {
        switch (event.key) {
          case "ArrowUp": {
            handlePrevOrNextItemFocus(
              -1,
              dropdownMenuSubMenuRef,
              ".j-JDSDropdownMenuItem-container"
            );
            event.preventDefault();
            event.stopPropagation();
            break;
          }
          case "ArrowDown": {
            handlePrevOrNextItemFocus(
              1,
              dropdownMenuSubMenuRef,
              ".j-JDSDropdownMenuItem-container"
            );
            event.preventDefault();
            event.stopPropagation();
            break;
          }
        }
      }
    };
    if (context.activeMenuId) {
      window.addEventListener("keydown", handleKeyDown);
    }
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
    };
  }, [context.activeMenuId, dropdownMenuSubMenuRef]);
  useEffect(() => {
    setTimeout(() => {
      setVisible(true);
    }, 50);
  }, []);
  const isMobile = Devices.isMobile();
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        rootRef,
        _menuContainerVisible: visible,
        _menuWidth: "max-content",
        offsetX: isMobile ? 0 : props.offsetX,
        offsetY: isMobile ? 0 : props.offsetY,
        _platform: isMobile ? "mobile" : "desktop",
        children: isValidElement(firstChild) ? firstChild.props._childrenProps.props.children : null
      }
    }
  );
};

const Component$1A = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1v;
  const { onSelect = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ onSelect, ...rest }, componentTag },
    "JDSDropdownMenuSubMenu",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const DropdownMenuSubMenu = withLogic$1y(Component$1A);
DropdownMenuSubMenu.displayName = "DropdownMenuSubMenu";
DropdownMenuSubMenu.slotName = "jds_dropdown_menu_sub_menu";

const sdl$1u = { "metadata": { "version": "1.0.0", "id": "dropdown-menu-submenu-1.0.0", "name": "JDSDropdownMenuSubMenuInternal", "layerName": "jds_dropdown_menu_sub_menu_internal", "internal": true }, "hierarchy": { "menu-container": ["menu-group-slot"] }, "base": { "menu-container": { "hidden": false, "background-color": "{primaryGrey20}", "flex-direction": "{flexDirection.column}", "border-radius": "{large}", "pointer-events": "auto", "overflow": "hidden", "padding-top": "{xs}", "padding-bottom": "{xs}", "overflow-y": "auto", "opacity": "{opacity.invisible}", "enter-animation-name": "fadeIn", "exit-animation-name": "fadeOut", "enter-animation-curve": "entrance_ease", "exit-animation-curve": "exit_ease", "enter-animation-duration": 500, "exit-animation-duration": 500, "box-shadow": { "x": 0, "y": 4, "blur": 16, "spread": 0, "color": "{custom_color_5}" } }, "menu-group-slot": { "hidden": false } }, "variant": { "_platform": { "mobile": { "menu-container": { "size": "{size.max}" } } }, "_menuContainerVisible": { "true": { "menu-container": { "opacity": "{opacity.enabled}" } } } }, "api": { "children": { "menu-group-slot": { "name": "children", "accepts": ["jds_dropdown_menu_group"] } }, "data": { "menu-container": { "width": { "type": "size", "name": "_menuWidth" }, "max-height": { "type": "size", "name": "_menuMaxHeight" }, "elementRef": { "type": "ref", "name": "triggerRef" } } }, "events": { "menu-container": { "onAppear": { "name": "onAppear", "platform": "ios" }, "onClick": "onSelect" } }, "config": { "_platform": { "values": ["mobile", "desktop"] }, "_menuContainerVisible": { "values": [false, true] } }, "a11y": { "menu-container": { "properties": { "role": { "value": "menu" } } } } } };

const withLogic$1x = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$1z = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1u;
  const { onAppear = noop, onSelect = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ onAppear, onSelect, ...rest }, componentTag },
    "JDSDropdownMenuSubMenuInternal",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const DropdownMenuSubMenuInternal = withLogic$1x(Component$1z);
DropdownMenuSubMenuInternal.displayName = "DropdownMenuSubMenuInternal";
DropdownMenuSubMenuInternal.slotName = "jds_dropdown_menu_sub_menu_internal";

const sdl$1t = { "metadata": { "version": "1.0.0", "id": "fab-1.0.0", "name": "JDSFAB", "layerName": "jds_fab", "description": "The Floating Action Button(FAB) performs the primary, or most common, action on a screen.", "usage": "It places the key user action within easy reach by being persistently visible at a fixed point on a screen." }, "hierarchy": { "popup": [{ "popup-container": ["jds_fab_internal"] }] }, "base": { "popup": { "priority": 50, "passive": true }, "popup-container": { "show": true, "flex-direction": "{f_0}", "justify-content": "{f_1}", "align-items": "{f_2}", "size": "{f_3}", "padding-right": "{f_4}", "padding-bottom": "{f_5}" }, "jds_fab_internal": { "hidden": false } }, "variant": { "show": { "false": { "popup-container": { "padding-bottom": "0" }, "jds_fab_internal": { "show": false } } }, "extend": { "false": { "jds_fab_internal": { "extend": false } } }, "disableAnimation": { "false": { "popup-container": { "transition": { "property": ["padding-bottom"], "duration": "{rapid}", "timing-function": "{easeJoyfulEntrance}" } }, "jds_fab_internal": { "disableAnimation": false } }, "true": { "jds_fab_internal": { "disableAnimation": true } } } }, "api": { "data": { "jds_fab_internal": { "title": { "type": "string", "name": "title", "doc_description": "It displays the title of FAB." }, "icon": { "type": "icon", "name": "icon", "doc_description": "It displays icon of FAB." } } }, "config": { "show": { "values": [true, false], "doc_description": "It can be used to show or hide FAB." }, "extend": { "values": [true, false], "doc_description": "When false, shows only icon." }, "disableAnimation": { "values": [false, true], "doc_description": "It can be used to control the entry animation of FAB" } }, "events": { "jds_fab_internal": { "onClick": "onClick", "onHover": { "name": "onHover", "platform": "web" }, "onHoverEnd": { "name": "onHoverEnd", "platform": "web" } } }, "a11y": { "jds_fab_internal": { "properties": { "ariaLabel": "ariaLabel", "ariaDescribedby": { "name": "ariaDescribedby", "platform": "web,ios" } } } } } };

const withLogic$1w = (Component) => (props) => {
  const [scroll, setScroll] = useState(false);
  const [hovered, setHovered] = useState(false);
  const { extend, extendOnHover, shrinkOnScroll, onHide, onShow, onUnmount } = props;
  const scrollListener = useCallback(
    (ev) => {
      if (shrinkOnScroll)
        setScroll(ev.currentTarget.scrollY !== 0);
    },
    [shrinkOnScroll]
  );
  useEffect(() => {
    return () => {
      onUnmount?.();
    };
  }, [onUnmount]);
  useEffect(() => {
    window.addEventListener("scroll", scrollListener);
    return () => {
      window.removeEventListener("scroll", scrollListener);
    };
  }, [scrollListener]);
  const internalExtend = useCallback(() => {
    if (!props.title)
      return false;
    if (scroll) {
      if (shrinkOnScroll) {
        onHide?.();
        return false;
      }
    }
    if (extend) {
      onShow?.();
      return true;
    }
    if (hovered) {
      onShow?.();
    }
    return hovered;
  }, [extend, scroll, hovered, onHide, onShow, shrinkOnScroll]);
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        className: "fab-pointer",
        extend: internalExtend(),
        _hasTitle: Boolean(props.title),
        onHover: (ev) => {
          ev.stopPropagation();
          if (extendOnHover)
            setHovered(true);
        },
        onHoverEnd: (ev) => {
          ev.stopPropagation();
          setHovered(false);
        }
      }
    }
  );
};

const Component$1y = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1t;
  const { show = true, extend = true, disableAnimation = false, onClick = noop, onHover = noop, onHoverEnd = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ show, extend, disableAnimation, onClick, onHover, onHoverEnd, ...rest }, componentTag },
    "JDSFAB",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const FAB = withLogic$1w(Component$1y);
FAB.displayName = "FAB";
FAB.slotName = "jds_fab";

const sdl$1s = { "metadata": { "version": "1.0.0", "id": "fab-1.0.0", "name": "JDSFABInternal", "layerName": "jds_fab_internal", "description": "The Floating Action Button(FAB) performs the primary, or most common, action on a screen.", "usage": "It places the key user action within easy reach by being persistently visible at a fixed point on a screen.", "internal": true }, "hierarchy": { "container": ["icon", "jds-text"] }, "base": { "container": { "hidden": false, "background-color": "{f_6}", "display": "flex", "flex-direction": "{f_7}", "justify-content": "{f_8}", "align-items": "{f_9}", "gap": "{f_10}", "border-radius": "{f_11}", "padding-top": "{f_12}", "padding-left": "{f_13}", "padding-right": "{f_14}", "padding-bottom": "{f_15}", "border-color": "{f_16}", "border-width": "{f_17}", "box-shadow": { "x": 0, "y": 4, "blur": 16, "spread": 0, "color": "#00000014" }, "behavior": { "hover": { "background-color": "{f_18}", "box-shadow": { "x": 0, "y": 4, "blur": 16, "spread": 0, "color": "#00000029" } }, "active": { "background-color": "{f_19}", "box-shadow": { "x": 0, "y": 4, "blur": 16, "spread": 0, "color": "#0000003D" } }, "focus": { "background-color": "{f_20}", "border-width": "{f_21}", "box-shadow": { "x": 0, "y": 4, "blur": 16, "spread": 0, "color": "#00000029" } } } }, "icon": { "hidden": false, "size": "{f_22}", "color": "{f_23}", "border-radius": "{f_24}", "behavior": { "active": { "color": "{f_25}" } } }, "jds-text": { "font-family": "{bodySBold}", "color": "{secondaryInverse}", "font-size": "{bodySBold}", "line-height": "{bodySBold}", "letter-spacing": "{bodySBold}", "font-weight": "{bodySBold}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": false, "behavior": { "active": { "color": "{secondary30}" } } } }, "variant": { "show": { "false": { "container": { "hidden": true, "translate-y": "{size.max}" } } }, "extend": { "false": { "container": { "padding-left": "{f_26}", "padding-right": "{f_27}" }, "jds-text": { "hidden": true } } }, "disableAnimation": { "false": { "container": { "enter-animation-name": "slideVerticallyUp", "exit-animation-name": "slideVerticallyDown", "enter-animation-curve": "entrance_ease", "exit-animation-curve": "exit_ease", "enter-animation-duration": 500, "exit-animation-duration": 500, "translate-y": "0", "transition": { "property": ["background-color", "box-shadow", "padding-left", "padding-right", "translate-y"], "duration": "{rapid}", "timing-function": "{easeJoyfulEntrance}" } } }, "true": { "container": { "transition": { "property": ["background-color", "box-shadow", "padding-left", "padding-right"], "duration": "{rapid}", "timing-function": "{easeJoyfulEntrance}" } } } }, "_hasTitle": { "false": { "jds-text": { "hidden": true } } } }, "api": { "data": { "icon": { "value": { "type": "icon", "name": "icon", "doc_description": "It displays icon of FAB." } }, "jds-text": { "value": { "type": "string", "name": "title", "doc_description": "It displays the title of FAB." } } }, "config": { "show": { "values": [true, false], "doc_description": "It can be used to show or hide FAB." }, "extend": { "values": [true, false], "doc_description": "When false, shows only icon." }, "disableAnimation": { "values": [false, true] }, "_hasTitle": { "values": [true, false] } }, "events": { "container": { "onClick": "onClick", "onHover": { "name": "onHover", "platform": "web" }, "onHoverEnd": { "name": "onHoverEnd", "platform": "web" } } }, "a11y": { "container": { "properties": { "role": { "value": "button" }, "aria-label": { "name": "ariaLabel", "prop": "title" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" } } }, "icon": { "properties": { "role": { "value": "img" }, "aria-label": { "name": "iconAriaLabel", "function": true } } } } } };

const withLogic$1v = (Component) => (props) => {
  const [scroll, setScroll] = useState(false);
  const [hovered, setHovered] = useState(false);
  const { extend, extendOnHover, shrinkOnScroll, onHide, onShow, onUnmount } = props;
  const scrollListener = useCallback(
    (ev) => {
      if (shrinkOnScroll)
        setScroll(ev.currentTarget.scrollY !== 0);
    },
    [shrinkOnScroll]
  );
  useEffect(() => {
    return () => {
      onUnmount?.();
    };
  }, [onUnmount]);
  useEffect(() => {
    window.addEventListener("scroll", scrollListener);
    return () => {
      window.removeEventListener("scroll", scrollListener);
    };
  }, [scrollListener]);
  const internalExtend = useCallback(() => {
    if (!props.title)
      return false;
    if (scroll) {
      if (shrinkOnScroll) {
        onHide?.();
        return false;
      }
    }
    if (extend) {
      onShow?.();
      return true;
    }
    if (hovered) {
      onShow?.();
    }
    return hovered;
  }, [extend, scroll, hovered, onHide, onShow, shrinkOnScroll]);
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        className: "fabinternal-pointer",
        extend: internalExtend(),
        _hasTitle: Boolean(props.title),
        iconAriaLabel: props.iconAriaLabel || formatIconName(props.icon),
        onHover: (ev) => {
          ev.stopPropagation();
          if (extendOnHover)
            setHovered(true);
        },
        onHoverEnd: (ev) => {
          ev.stopPropagation();
          setHovered(false);
        }
      }
    }
  );
};

const Component$1x = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1s;
  const { show = true, extend = true, disableAnimation = false, onClick = noop, onHover = noop, onHoverEnd = noop, ariaLabel = props.title?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ show, extend, disableAnimation, onClick, onHover, onHoverEnd, ariaLabel, ...rest }, componentTag },
    "JDSFABInternal",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const FABInternal = withLogic$1v(Component$1x);
FABInternal.displayName = "FABInternal";
FABInternal.slotName = "jds_fab_internal";

const sdl$1r = { "metadata": { "version": "1.0.0", "id": "feedback-block-1.0.0", "name": "JDSFeedbackBlock", "layerName": "jds_feedback_block" }, "hierarchy": { "container": [{ "icon-container": ["icon"] }, "jds-text"] }, "base": { "container": { "hidden": true, "flex-direction": "{f_0}", "justify-content": "{f_1}", "align-items": "{f_2}", "gap": "{f_3}" }, "icon-container": { "flex-direction": "{f_5}", "justify-content": "{f_6}", "align-items": "{f_7}", "height": "{f_8}" }, "icon": { "size": "{f_9}" }, "jds-text": { "font-family": "{bodyS}", "color": "{primaryGrey100}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" } }, "variant": { "size": { "s": { "icon-container": { "height": "{f_10}" }, "icon": { "size": "{f_11}" }, "jds-text": { "font-family": "{bodyXs}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}" } } }, "state": { "success": { "container": { "hidden": false }, "icon": { "value": "ic_success_colored", "color": "{feedbackSuccess50}" }, "jds-text": { "color": "{feedbackSuccess80}" } }, "error": { "container": { "hidden": false }, "icon": { "value": "ic_error_colored", "color": "{feedbackError50}" }, "jds-text": { "color": "{feedbackError80}" } }, "warning": { "container": { "hidden": false }, "icon": { "value": "ic_warning_colored", "color": "{feedbackWarning50}" }, "jds-text": { "color": "{feedbackWarning80}" } } }, "alignment": { "top": { "container": { "align-items": "{f_4}" } } } }, "api": { "config": { "size": { "values": ["l", "s"] }, "state": { "values": ["none", "success", "error", "warning"] }, "alignment": { "values": ["center", "top"] } }, "data": { "jds-text": { "value": { "type": "string", "name": "stateText" } } } } };

const withLogic$1u = (Component) => (props) => {
  if (!props.stateText)
    return null;
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$1w = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1r;
  const { size = "l", state = "none", alignment = "center", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ size, state, alignment, ...rest }, componentTag },
    "JDSFeedbackBlock",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const FeedbackBlock = withLogic$1u(Component$1w);
FeedbackBlock.displayName = "FeedbackBlock";
FeedbackBlock.slotName = "jds_feedback_block";

const sdl$1q = { "metadata": { "version": "1.0.0", "id": "file-uploader-control-1.0.0", "name": "JDSFileUploaderControl", "layerName": "jds_file_uploader_control", "internal": true }, "hierarchy": { "container": [{ "label-container": ["label-jds-text", { "info-jds-icon-container": ["info-jds-icon"] }] }, "upload-jds_button", "helper-jds-text"] }, "base": { "container": { "flex-direction": "{f_0}", "justify-content": "{f_1}", "align-items": "{f_2}", "gap": "{f_3}", "width": "{f_4}", "opacity": "{f_5}" }, "label-container": { "flex-direction": "{f_6}", "justify-content": "{f_7}", "align-items": "{f_8}", "gap": "{f_9}" }, "upload-jds_button": { "iconLeft": "ic_upload", "kind": "secondary", "size": "medium", "fullWidth": true }, "label-jds-text": { "font-family": "{bodyXs}", "color": "{primaryGrey80}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "textType": "label" }, "info-jds-icon": { "size": "{base}", "color": "{primaryGrey80}", "value": "ic_info", "ic": "ic_info" }, "info-jds-icon-container": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{base}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}", "ic": "ic_info" }, "helper-jds-text": { "font-family": "{bodyXs}", "color": "{primaryGrey80}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" } }, "variant": {}, "combination": [{}], "combination_config": [[]], "api": { "data": { "upload-jds_button": { "label": { "type": "string", "name": "uploadButtonLabel" } }, "label-jds-text": { "value": { "type": "string", "name": "label" } }, "helper-jds-text": { "value": { "type": "string", "name": "helperText" } } }, "events": { "upload-jds_button": { "onClick": "onClick" }, "info-jds-icon": { "onClick": "onInfoClick" } }, "a11y": { "upload-jds_button": { "properties": { "ariaLabel": "uploadButtonAriaLabel" } } } } };

const withLogic$1t = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$1v = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1q;
  const { onClick = noop, onInfoClick = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ onClick, onInfoClick, ...rest }, componentTag },
    "JDSFileUploaderControl",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const FileUploaderControl = withLogic$1t(Component$1v);
FileUploaderControl.displayName = "FileUploaderControl";
FileUploaderControl.slotName = "jds_file_uploader_control";

const sdl$1p = { "metadata": { "version": "1.0.0", "id": "file-uploader-item-1.0.0", "name": "JDSFileUploaderItem", "layerName": "jds_file_uploader_item", "internal": true }, "hierarchy": { "container": [{ "file-container": [{ "state-container": ["jds_spinner", { "state-jds-icon-container": ["state-jds-icon"] }, "message-jds-text"] }, { "button-container": ["suffix-jds_button"] }] }, "jds_divider"] }, "base": { "container": { "flex-direction": "{f_0}", "justify-content": "{f_1}", "align-items": "{f_2}", "width": "{f_3}", "opacity": "{f_4}", "background-color": "{f_5}" }, "file-container": { "flex-direction": "{f_6}", "justify-content": "{f_7}", "align-items": "{f_8}", "gap": "{f_9}", "padding-left": "{f_10}", "width": "{f_11}" }, "state-container": { "flex-direction": "{f_12}", "justify-content": "{f_13}", "align-items": "{f_14}", "gap": "{f_15}" }, "jds_spinner": { "hidden": true, "kind": "normal", "size": "small" }, "button-container": { "show": true, "size": "48", "align-items": "{f_16}" }, "suffix-jds_button": { "icon": "ic_close", "kind": "tertiary", "size": "small" }, "jds_divider": { "hidden": false, "orientation": "horizontal", "pad": "none" }, "state-jds-icon": { "size": "{m}", "color": "{primary50}", "hidden": true }, "state-jds-icon-container": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{m}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}", "hidden": true }, "message-jds-text": { "font-family": "{bodyXs}", "color": "{primaryGrey80}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "textType": "label" } }, "variant": { "kind": { "collapsed": { "suffix-jds_button": { "icon": "ic_chevron_down" }, "jds_divider": { "hidden": true } }, "expanded": { "suffix-jds_button": { "icon": "ic_chevron_up" }, "jds_divider": { "hidden": true } } }, "showDivider": { "false": { "jds_divider": { "hidden": true } } } }, "combination": [{ "normal": { "loading": { "jds_spinner": { "hidden": false }, "state-jds-icon": {}, "state-jds-icon-container": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{m}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}", "hidden": true } }, "success": { "jds_spinner": { "hidden": true }, "state-jds-icon": { "color": "{feedbackSuccess50}", "value": "ic_success_colored", "hidden": false, "ic": "ic_success_colored" }, "state-jds-icon-container": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{m}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}", "hidden": false, "ic": "ic_success_colored" }, "message-jds-text": { "color": "{feedbackSuccess50}" } }, "error": { "jds_spinner": { "hidden": true }, "suffix-jds_button": { "hidden": true }, "state-jds-icon": { "color": "{feedbackError50}", "value": "ic_error_colored", "hidden": false, "ic": "ic_error_colored" }, "state-jds-icon-container": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{m}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}", "hidden": false, "ic": "ic_error_colored" }, "message-jds-text": { "color": "{feedbackError50}" } } } }], "combination_config": [["kind", "state"]], "api": { "config": { "state": { "values": ["loading", "success", "error"] }, "kind": { "values": ["normal", "collapsed", "expanded"] }, "showDivider": { "values": [true, false] } }, "data": { "message-jds-text": { "value": { "type": "string", "name": "message" } } }, "events": { "suffix-jds_button": { "onClick": "onClick" } }, "a11y": { "container": { "properties": { "role": { "value": "listitem" }, "aria-label": { "name": "ariaLabel", "prop": "message" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" } } }, "suffix-jds_button": { "properties": { "ariaLabel": { "name": "suffixAriaLabel", "value": "Remove File" }, "ariaExpanded": "ariaExpanded" } } } } };

const withLogic$1s = (Component) => (props) => {
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...props,
      onClick: () => {
        props.onClick?.(props.internalIndex);
      }
    }
  );
};

const Component$1u = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1p;
  const { state = "loading", kind = "normal", showDivider = true, onClick = noop, ariaLabel = props.message?.toString(), suffixAriaLabel = "Remove File", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ state, kind, showDivider, onClick, ariaLabel, suffixAriaLabel, ...rest }, componentTag },
    "JDSFileUploaderItem",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const FileUploaderItem = withLogic$1s(Component$1u);
FileUploaderItem.displayName = "FileUploaderItem";
FileUploaderItem.slotName = "jds_file_uploader_item";

const sdl$1o = { "metadata": { "version": "1.0.0", "id": "file-uploader-list-1.0.0", "name": "JDSFileUploaderList", "layerName": "jds_file_uploader_list", "internal": true }, "hierarchy": { "container": ["jds_file_uploader_item"] }, "base": { "container": { "flex-direction": "{f_0}", "justify-content": "{f_1}", "align-items": "{f_2}", "width": "{f_3}", "opacity": "{f_4}", "background-color": "{f_5}", "border-radius": "{f_6}" }, "jds_file_uploader_item": { "kind": "normal", "showDivider": true } }, "variant": { "showDivider": { "false": { "jds_file_uploader_item": { "showDivider": false } } } }, "combination": [{}], "combination_config": [[]], "api": { "config": { "showDivider": { "values": [true, false] } }, "data": { "container": { "value": { "type": "list", "name": "items", "object": { "state": "JDSFileUploaderItem.state", "message": "string" } } }, "jds_file_uploader_item": { "state": { "type": "number", "name": "items.state" }, "message": { "type": "string", "name": "items.message" } } }, "events": { "jds_file_uploader_item": { "onClick": "onClick" } }, "a11y": { "container": { "properties": { "role": { "value": "list" } }, "name": "items", "repeating": { "ariaLabel": "itemAriaLabel", "ariaDescribedby": { "name": "itemAriaDescribedby", "platform": "web,ios" } } }, "jds_file_uploader_item": { "properties": { "ariaLabel": "items.itemAriaLabel", "ariaDescribedby": "items.itemAriaDescribedby" } } } } };

const withLogic$1r = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$1t = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1o;
  const { showDivider = true, onClick = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ showDivider, onClick, ...rest }, componentTag },
    "JDSFileUploaderList",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const FileUploaderList = withLogic$1r(Component$1t);
FileUploaderList.displayName = "FileUploaderList";
FileUploaderList.slotName = "jds_file_uploader_list";

const sdl$1n = { "metadata": { "version": "1.0.0", "id": "file-uploader-panel-1.0.0", "name": "JDSFileUploaderPanel", "layerName": "jds_file_uploader_panel", "internal": true }, "hierarchy": { "container": ["jds_file_uploader_item", { "inner-container": ["jds_progress_bar"] }, "jds_file_uploader_list"] }, "base": { "container": { "flex-direction": "{f_0}", "justify-content": "{f_1}", "align-items": "{f_2}", "width": "{f_3}", "opacity": "{f_4}", "background-color": "{f_5}", "border-radius": "{f_6}", "padding-top": "{f_7}", "padding-bottom": "{f_8}" }, "inner-container": { "hidden": true, "padding-top": "{f_9}", "padding-bottom": "{f_10}", "padding-left": "{f_11}", "padding-right": "{f_12}", "width": "{f_13}" }, "jds_file_uploader_item": { "hidden": true }, "jds_progress_bar": { "kind": "determinate", "flex": 1 } }, "variant": { "kind": { "collapsible": { "jds_file_uploader_item": { "hidden": false }, "inner-container": { "hidden": false } } } }, "combination": [{ "collapsible": { "false": { "jds_file_uploader_item": { "kind": "collapsed" }, "jds_file_uploader_list": { "hidden": true } }, "true": { "jds_file_uploader_item": { "kind": "expanded" }, "jds_file_uploader_list": { "hidden": false } } } }], "combination_config": [["kind", "expanded"]], "api": { "config": { "kind": { "values": ["classic", "collapsible"] }, "expanded": { "values": [false, true] }, "showDivider": { "values": [true, false] } }, "data": { "jds_file_uploader_item": { "message": { "type": "string", "name": "message" } }, "jds_progress_bar": { "value": { "type": "float", "name": "value" } }, "jds_file_uploader_list": { "showDivider": { "type": "boolean", "name": "showDivider" }, "items": { "type": "list", "name": "items", "object": { "state": "JDSFileUploaderItem.state", "message": "string" } } } }, "events": { "jds_file_uploader_item": { "onClick": "onClick" }, "jds_file_uploader_list": { "onClick": "onClose" } }, "a11y": { "jds_file_uploader_list": { "name": "items", "repeating": { "itemAriaLabel": "itemAriaLabel", "itemAriaDescribedby": { "name": "itemAriaDescribedby", "platform": "web,ios" } } }, "jds_file_uploader_item": { "properties": { "ariaLabel": "panelAriaLabel", "ariaDescribedby": { "name": "panelAriaDescribedBy", "platform": "web,ios" }, "suffixAriaLabel": { "name": "panelSuffixAriaLabel", "value": "Toggle Files List" }, "ariaExpanded": { "name": "_ariaExpanded", "prop": "expanded" } } } } } };

const withLogic$1q = (Component) => (props) => {
  const { toggle, selected } = useToggle(props.expanded, true);
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        expanded: selected,
        onClick: (ev) => {
          if (selected)
            props.onClose?.();
          else
            props.onClick?.(ev);
          toggle();
        },
        onClose: (index) => {
          props.onClose?.(index);
        }
      }
    }
  );
};

const Component$1s = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1n;
  const { kind = "classic", expanded = false, showDivider = true, onClick = noop, onClose = noop, panelSuffixAriaLabel = "Toggle Files List", _ariaExpanded = props.expanded?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ kind, expanded, showDivider, onClick, onClose, panelSuffixAriaLabel, _ariaExpanded, ...rest }, componentTag },
    "JDSFileUploaderPanel",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const FileUploaderPanel = withLogic$1q(Component$1s);
FileUploaderPanel.displayName = "FileUploaderPanel";
FileUploaderPanel.slotName = "jds_file_uploader_panel";

const sdl$1m = { "metadata": { "version": "1.0.0", "id": "footer-icon-link-1.0.0", "name": "JDSFooterIconLinks", "layerName": "jds_footer_icon_links", "platform": "web" }, "hierarchy": { "container": ["title-jds-text", { "icons-container": ["jds_button"] }] }, "base": { "container": { "gap": "{f_0}", "flex-direction": "{f_1}", "align-items": "{f_2}" }, "jds_button": { "size": "small" }, "icons-container": { "flex-direction": "{f_3}", "gap": "{f_4}" }, "title-jds-text": { "font-family": "{headingXxs}", "color": "{primaryGrey100}", "font-size": "{headingXxs}", "line-height": "{headingXxs}", "letter-spacing": "{headingXxs}", "font-weight": "{headingXxs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "language": "en" } }, "api": { "data": { "icons-container": { "value": { "name": "links", "type": "list", "object": { "icon": "string", "href": "string" } } }, "jds_button": { "icon": { "name": "links.icon", "type": "string" } }, "title-jds-text": { "value": { "type": "string", "name": "title" } } }, "a11y": { "icons-container": { "name": "links", "repeating": { "ariaLabel": "iconAriaLabel", "ariaDescribedby": { "name": "iconAriaDescribedby", "platform": "web,ios" } } }, "jds_button": { "properties": { "ariaLabel": "links.iconAriaLabel", "ariaDescribedby": "links.iconAriaDescribedby" } } } } };

const withLogic$1p = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$1r = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1m;
  const { custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...rest, componentTag },
    "JDSFooterIconLinks",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const FooterIconLinks = withLogic$1p(Component$1r);
FooterIconLinks.displayName = "FooterIconLinks";
FooterIconLinks.slotName = "jds_footer_icon_links";

const sdl$1l = { "metadata": { "version": "1.0.0", "id": "footer-links-1.0.0", "name": "JDSFooterLinks", "layerName": "jds_footer_links", "platform": "web" }, "hierarchy": { "container": ["title-jds-text", { "links-container": [{ "link-item-container": ["jds_link"] }] }] }, "base": { "container": { "flex-direction": "{f_0}", "align-items": "{f_1}", "size": "{f_2}" }, "link-item-container": { "size": "{f_3}", "padding-top": "{f_4}", "padding-bottom": "{f_5}", "flex-direction": "{f_6}", "justify-content": "{f_7}", "align-items": "{f_8}", "background-color": "{f_9}", "behavior": { "hover": { "background-color": "{f_10}" } } }, "links-container": { "padding-top": "{f_13}", "size": "{f_14}", "flex-direction": "{f_15}" }, "jds_link": { "kind": "submenu", "textAppearance": "body_s" }, "title-jds-text": { "font-family": "{headingXxs}", "color": "{primaryGrey100}", "font-size": "{headingXxs}", "line-height": "{headingXxs}", "letter-spacing": "{headingXxs}", "font-weight": "{headingXxs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "padding-top": "{f_11}", "padding-bottom": "{f_12}" } }, "api": { "config": {}, "data": { "links-container": { "value": { "name": "links", "type": "list", "object": { "newTab": "boolean", "href": "string", "title": "string", "routerLinkProps": "object", "onClick": "event" } } }, "jds_link": { "title": { "type": "string", "name": "links.title" }, "href": { "type": "string", "name": "links.href" }, "newTab": { "type": "string", "name": "links.newTab", "platform": "web" }, "routerLinkProps": { "type": "RouterLinkProps", "name": "links.routerLinkProps", "platform": "angular" }, "provider": { "type": "object", "name": "links.provider", "platform": "react" }, "onClick": { "type": "string", "name": "links.onClick" } }, "title-jds-text": { "value": { "type": "string", "name": "title" } } }, "a11y": { "links-container": { "name": "links", "repeating": { "ariaLabel": "linkAriaLabel", "ariaDescribedby": { "name": "linkAriaDescribedby", "platform": "web,ios" } } }, "jds_link": { "properties": { "ariaLabel": "links.linkAriaLabel", "ariaDescribedby": "links.linkAriaDescribedby" } } } } };

const withLogic$1o = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$1q = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1l;
  const { custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...rest, componentTag },
    "JDSFooterLinks",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const FooterLinks = withLogic$1o(Component$1q);
FooterLinks.displayName = "FooterLinks";
FooterLinks.slotName = "jds_footer_links";

const sdl$1k = { "metadata": { "version": "1.0.0", "id": "footer-links-grid-1.0.0", "name": "JDSFooterLinksGrid", "layerName": "jds_footer_links_grid", "platform": "web" }, "hierarchy": { "container": ["jds_footer_links"] }, "base": { "container": { "flex-direction": "{f_0}", "size": "{f_1}", "gap": "{f_2}", "flex": 1 } }, "api": { "config": {}, "data": { "container": { "value": { "type": "list", "name": "links", "object": { "title": "string", "provider": "object", "subLinks": "list" } } }, "jds_footer_links": { "links": { "type": "list", "name": "links.subLinks" }, "title": { "type": "string", "name": "links.title" }, "provider": { "type": "object", "name": "links.provider" } } } } };

const withLogic$1n = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$1p = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1k;
  const { custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...rest, componentTag },
    "JDSFooterLinksGrid",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const FooterLinksGrid = withLogic$1n(Component$1p);
FooterLinksGrid.displayName = "FooterLinksGrid";
FooterLinksGrid.slotName = "jds_footer_links_grid";

const sdl$1j = { "metadata": { "version": "1.0.0", "id": "footer-market-links-1.0.0", "name": "JDSFooterMarketLinks", "layerName": "jds_footer_market_links", "platform": "web" }, "hierarchy": { "container": ["title-jds-text", { "assets-container": ["image"] }] }, "base": { "container": { "gap": "{f_0}", "flex-direction": "{f_1}", "align-items": "{f_2}" }, "assets-container": { "flex-direction": "{f_3}", "align-items": "{f_4}", "gap": "{f_5}" }, "image": { "height": 40, "object-fit": "contain" }, "title-jds-text": { "font-family": "{headingXxs}", "color": "{primaryGrey100}", "font-size": "{headingXxs}", "line-height": "{headingXxs}", "letter-spacing": "{headingXxs}", "font-weight": "{headingXxs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" } }, "api": { "data": { "assets-container": { "value": { "name": "assets", "type": "list", "object": { "image": "image" } } }, "image": { "value": { "type": "image", "name": "assets.image" } }, "title-jds-text": { "value": { "type": "string", "name": "title" } } } } };

const withLogic$1m = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$1o = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1j;
  const { custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...rest, componentTag },
    "JDSFooterMarketLinks",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const FooterMarketLinks = withLogic$1m(Component$1o);
FooterMarketLinks.displayName = "FooterMarketLinks";
FooterMarketLinks.slotName = "jds_footer_market_links";

const sdl$1i = { "metadata": { "version": "1.0.0", "id": "header-desktop-1.0.0", "name": "JDSHeaderDesktop", "layerName": "jds_header_desktop", "platform": "web" }, "hierarchy": { "container": [{ "header-container": [{ "left-container": [{ "prefix-container": ["prefix-jds_button", { "logo-container": ["logo-slot", "logo-jds-text"] }, "prefix-slot", "name-jds-text"] }, { "links-container": ["link-jds_link"] }] }, "jds_search_box", { "right-container": [{ "suffix-container": ["search-jds_action_button", { "icon-links-container": ["icon-links-slot"] }, "avatar-slot"] }, "suffix-jds_action_button", "suffix-slot"] }] }, "jds_mega_menu", "jds_search_results", "tabs-slot"] }, "base": { "container": { "min-width": "{h_0}", "flex-direction": "{h_1}" }, "prefix-container": { "flex-direction": "{h_2}", "justify-content": "{h_3}", "align-items": "{h_4}", "gap": "{h_5}" }, "header-container": { "min-width": "{h_6}", "background-color": "{h_7}", "flex-direction": "{h_8}", "justify-content": "{h_9}", "align-items": "{h_10}", "padding-left": "{h_11}", "padding-top": "{h_12}", "padding-right": "{h_13}", "padding-bottom": "{h_14}", "gap": "{h_15}", "height": "{h_16}" }, "left-container": { "flex-direction": "{h_17}", "justify-content": "{h_18}", "align-items": "{h_19}", "gap": "{h_20}" }, "logo-container": { "flex-direction": "{h_21}", "justify-content": "{h_22}", "align-items": "{h_23}", "gap": "{h_24}" }, "profile-container": { "hidden": true, "flex-direction": "{h_25}", "justify-content": "{h_26}", "align-items": "{h_27}", "gap": "{h_28}" }, "links-container": { "flex-direction": "{h_29}", "justify-content": "{h_30}", "align-items": "{h_31}", "gap": "{h_32}", "padding-left": "{h_33}", "flex": 1, "hidden": false }, "right-container": { "flex-direction": "{h_34}", "justify-content": "{h_35}", "align-items": "{h_36}", "gap": "{h_37}" }, "suffix-container": { "flex-direction": "{h_38}", "justify-content": "{h_39}", "align-items": "{h_40}", "gap": "{h_41}", "width": "{h_42}" }, "icon-links-container": { "flex-direction": "{h_43}", "justify-content": "{h_44}", "align-items": "{h_45}", "gap": "{h_46}", "hidden": false }, "prefix-jds_button": { "size": "medium", "fullWidth": false }, "search-jds_action_button": { "hidden": true, "icon": "ic_search", "size": "medium" }, "icon-links-jds_link": { "size": "medium" }, "suffix-jds_action_button": { "hidden": true, "icon": "ic_close", "size": "medium" }, "jds_search_box": { "prefix": "ic_search", "kind": "header", "max-width": "312", "width": "{h_47}" }, "link-jds_link": { "kind": "header" }, "jds_search_results": { "open": false, "hidden": false, "_maxWidth": 784 }, "logo-jds-text": { "font-family": "{headingXxs}", "color": "{primaryInverse}", "font-size": "{headingXxs}", "line-height": "{headingXxs}", "letter-spacing": "{headingXxs}", "font-weight": "{headingXxs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" }, "name-jds-text": { "font-family": "{bodyS}", "color": "{primaryInverse}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" }, "link-jds-text": { "font-family": "{bodySBold}", "color": "{primaryInverse}", "font-size": "{bodySBold}", "line-height": "{bodySBold}", "letter-spacing": "{bodySBold}", "font-weight": "{bodySBold}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" } }, "variant": { "_platform": { "mobile": { "links-container": { "hidden": true }, "profile-container": { "hidden": false }, "suffix-jds_action_button": { "hidden": true }, "jds_mega_menu": { "hidden": true }, "header-container": { "padding-left": "{h_49}", "padding-right": "{h_50}", "gap": "{h_51}", "height": "{h_48}" }, "left-container": { "gap": "{h_52}" }, "right-container": { "gap": "{h_53}" }, "suffix-container": { "gap": "{h_54}" } } }, "_variant": { "active_search": { "header-container": { "justify-content": "{h_56}" }, "profile-container": { "hidden": true }, "links-container": { "hidden": true }, "avatar-slot": { "hidden": true }, "prefix-slot": { "hidden": true }, "suffix-jds_action_button": { "hidden": false }, "icon-links-container": { "hidden": true }, "jds_search_box": { "max-width": "784", "width": "{h_57}" }, "suffix-slot": { "hidden": true }, "jds_search_results": { "open": true }, "prefix-jds_button": { "hidden": true }, "name-jds-text": { "hidden": true }, "logo-jds-text": { "hidden": true } } }, "search": { "false": { "jds_search_box": { "hidden": true }, "search-jds_action_button": { "hidden": true } } }, "fullWidth": { "false": { "container": { "width": "{h_58}" } } }, "_IsLinksEmpty": { "true": { "icon-links-container": { "hidden": true } } }, "_hasSearchResults": { "false": { "jds_search_results": { "hidden": true } } } }, "combination": [{ "true": { "false": { "jds_search_box": { "hidden": true }, "search-jds_action_button": { "hidden": false } } } }, { "mobile": { "active_search": { "suffix-jds_action_button": { "hidden": false } } }, "desktop": { "default": { "left-container": { "width": "{h_55}" } } } }, { "mobile": { "false": { "header-container": { "justify-content": "{h_59}" } } } }], "combination_config": [["search", "expandedSearch"], ["_platform", "_variant"], ["_platform", "search"]], "api": { "config": { "_variant": { "values": ["default", "active_search"] }, "_platform": { "values": ["desktop", "mobile"] }, "search": { "values": [true, false] }, "expandedSearch": { "values": [true, false] }, "searchActive": { "values": [false, true] }, "fullWidth": { "values": [true, false] }, "_IsLinksEmpty": { "values": [false, true] }, "_hasSearchResults": { "values": [true, false] } }, "data": { "prefix-jds_button": { "icon": { "name": "prefix", "type": "icon" } }, "links-container": { "value": { "type": "list", "name": "links", "object": { "newTab": "boolean", "href": "string", "title": "string", "routerLinkProps": "object", "onClick": "event", "subLinks": "list", "active": "boolean" } } }, "link-jds_link": { "title": { "type": "string", "name": "links.title" }, "href": { "type": "string", "name": "links.href" }, "newTab": { "type": "string", "name": "links.newTab", "platform": "web" }, "routerLinkProps": { "type": "string", "name": "links.routerLinkProps", "platform": "angular" }, "onClick": { "type": "string", "name": "links.onClick" }, "_active": { "type": "string", "name": "links.active" } }, "jds_search_box": { "label": { "type": "string", "name": "searchLabel" }, "suffix": { "type": "icon", "name": "searchSuffix" }, "value": { "type": "string", "name": "query" }, "showBack": { "type": "boolean", "name": "searchShowBack" } }, "header-container": { "elementRef": { "type": "ref", "name": "elementRef" } }, "container": { "value": { "type": "object", "name": "megaMenuProps", "object": { "subLinks": "list", "offsetX": "size", "offsetY": "size", "width": "size", "open": "boolean" } } }, "jds_search_results": { "offsetX": { "type": "size", "name": "megaMenuProps.offsetX" }, "offsetY": { "type": "size", "name": "megaMenuProps.offsetY" }, "_maxWidth": { "type": "size", "name": "megaMenuProps.width" }, "results": { "type": "list", "name": "searchResults" }, "header": { "type": "string", "name": "searchResultHeader" }, "query": { "type": "string", "name": "query" }, "headerAction": { "type": "string", "name": "searchResultHeaderAction" } }, "jds_mega_menu": { "items": { "type": "object", "name": "megaMenuProps.subLinks" }, "offsetX": { "type": "size", "name": "megaMenuProps.offsetX" }, "offsetY": { "type": "size", "name": "megaMenuProps.offsetY" }, "width": { "type": "size", "name": "megaMenuProps.width" }, "open": { "type": "boolean", "name": "megaMenuProps.open" } }, "search-jds_action_button": { "label": { "type": "string", "name": "dynamicButtonText" } }, "logo-jds-text": { "value": { "type": "string", "name": "brandLabel" } }, "name-jds-text": { "value": { "type": "string", "name": "pageTitle" } } }, "children": { "avatar-slot": { "name": "avatar", "accepts": ["jds_avatar", "jds_link"], "max": 1 }, "prefix-slot": { "name": "pageTitlePrefix", "accepts": ["jds_avatar", "jds_icon", "jds_image"], "max": 1 }, "tabs-slot": { "name": "tabs", "accepts": ["jds_tabs_desktop"], "max": 1 }, "suffix-slot": { "name": "suffix", "accepts": ["jds_text", "jds_button", "jds_link"], "max": 1 }, "logo-slot": { "name": "logo", "accepts": ["jds_icon", "jds_image", "jds_link"], "max": 1 }, "icon-links-slot": { "name": "iconLinks", "accepts": ["jds_link"] } }, "events": { "container": { "_searchActive.onSearchActiveChange": "onSearchActiveChange" }, "logo-container": { "onClick": "logoOnClick" }, "avatar-slot": { "onClick": "avatarOnClick" }, "prefix-jds_button": { "onClick": "prefixOnClick" }, "suffix-jds_action_button": { "onClick": "suffixOnClick" }, "link-jds_link": { "onHover": "onHover" }, "jds_mega_menu": { "onHoverEnd": "onMenuHoverEnd" }, "jds_search_box": { "onBlur": "onSearchBlur", "onFocus": "onSearchFocus", "onChange": "onSearchChange", "onSuffixClick": "onSearchBoxSuffixClick", "onKeydown": "onSearchKeydown" }, "search-jds_action_button": { "onClick": "onSearchIconClick" }, "jds_search_results": { "onHeaderActionClick": "onSearchResultHeaderActionClick", "onClick": "onSearchResultClick" } }, "a11y": { "container": { "name": "megaMenuProps", "repeating": { "ariaLabel": "menuItemAriaLabel", "ariaDescribedby": { "name": "menuItemAriaDescribedby", "platform": "web,ios" } }, "properties": { "role": { "name": "role" } } }, "links-container": { "name": "links", "repeating": { "ariaLabel": "linkAriaLabel", "ariaDescribedby": { "name": "linkAriaDescribedby", "platform": "web,ios" } } }, "link-jds_link": { "properties": { "ariaLabel": "links.linkAriaLabel", "ariaDescribedby": "links.linkAriaDescribedby" } }, "prefix-jds_button": { "properties": { "ariaLabel": "prefixAriaLabel", "ariaDescribedby": { "name": "prefixAriaDescribedby", "platform": "web,ios" } } }, "suffix-jds_action_button": { "properties": { "ariaLabel": "suffixAriaLabel", "ariaDescribedby": { "name": "suffixAriaDescribedby", "platform": "web,ios" } } }, "jds_search_box": { "properties": { "prefixAriaLabel": "searchBoxPrefixAriaLabel", "suffixAriaLabel": "searchBoxSuffixAriaLabel", "ariaLabel": "searchAriaLabel" } }, "search-jds_action_button": { "properties": { "ariaLabel": { "name": "searchButtonAriaLabel", "prop": "dynamicButtonText" }, "ariaDescribedby": { "name": "searchButtonAriaDescribedby", "platform": "web,ios" } } } } } };

const Jdstext = { "metadata": { "version": "1.0.0", "id": "text-1.0.0", "name": "JDSText", "layerName": "jds_text" }, "hierarchy": { "text": [] }, "base": { "text": { "font-family": "{text_1}", "color": "{text_2}", "font-size": "{text_3}", "line-height": "{text_4}", "letter-spacing": "{text_5}", "font-weight": "{text_6}", "text-decoration": "{text_7}", "text-transform": "{text_8}" } }, "variant": { "textAlign": { "center": { "text": { "text-align": "center" } }, "right": { "text": { "text-align": "right" } } }, "textDecoration": { "underline": { "text": { "text-decoration": "{text_9}" } }, "line-through": { "text": { "text-decoration": "{text_10}" } }, "overline": { "text": { "text-decoration": "{text_11}" } } }, "color": { "primary_80": { "text": { "color": "{text_12}" } }, "primary_70": { "text": { "color": "{text_13}" } }, "primary_60": { "text": { "color": "{text_14}" } }, "primary_50": { "text": { "color": "{text_15}" } }, "primary_40": { "text": { "color": "{text_16}" } }, "primary_30": { "text": { "color": "{text_17}" } }, "primary_20": { "text": { "color": "{text_18}" } }, "primary_inverse": { "text": { "color": "{text_19}" } }, "primary_background": { "text": { "color": "{text_20}" } }, "primary_grey_100": { "text": { "color": "{text_21}" } }, "primary_grey_80": { "text": { "color": "{text_22}" } }, "primary_grey_60": { "text": { "color": "{text_23}" } }, "primary_grey_40": { "text": { "color": "{text_24}" } }, "primary_grey_20": { "text": { "color": "{text_25}" } }, "secondary_80": { "text": { "color": "{text_26}" } }, "secondary_70": { "text": { "color": "{text_27}" } }, "secondary_60": { "text": { "color": "{text_28}" } }, "secondary_50": { "text": { "color": "{text_29}" } }, "secondary_40": { "text": { "color": "{text_30}" } }, "secondary_30": { "text": { "color": "{text_31}" } }, "secondary_20": { "text": { "color": "{text_32}" } }, "secondary_inverse": { "text": { "color": "{text_33}" } }, "secondary_background": { "text": { "color": "{text_34}" } }, "secondary_grey_100": { "text": { "color": "{text_35}" } }, "secondary_grey_80": { "text": { "color": "{text_36}" } }, "secondary_grey_60": { "text": { "color": "{text_37}" } }, "secondary_grey_40": { "text": { "color": "{text_38}" } }, "secondary_grey_20": { "text": { "color": "{text_39}" } }, "sparkle_80": { "text": { "color": "{text_40}" } }, "sparkle_70": { "text": { "color": "{text_41}" } }, "sparkle_60": { "text": { "color": "{text_42}" } }, "sparkle_50": { "text": { "color": "{text_43}" } }, "sparkle_40": { "text": { "color": "{text_44}" } }, "sparkle_30": { "text": { "color": "{text_45}" } }, "sparkle_20": { "text": { "color": "{text_46}" } }, "sparkle_inverse": { "text": { "color": "{text_47}" } }, "sparkle_background": { "text": { "color": "{text_48}" } }, "sparkle_grey_100": { "text": { "color": "{text_49}" } }, "sparkle_grey_80": { "text": { "color": "{text_50}" } }, "sparkle_grey_60": { "text": { "color": "{text_51}" } }, "sparkle_grey_40": { "text": { "color": "{text_52}" } }, "sparkle_grey_20": { "text": { "color": "{text_53}" } }, "feedback_error_80": { "text": { "color": "{text_54}" } }, "feedback_error_50": { "text": { "color": "{text_55}" } }, "feedback_error_20": { "text": { "color": "{text_56}" } }, "feedback_warning_80": { "text": { "color": "{text_57}" } }, "feedback_warning_50": { "text": { "color": "{text_58}" } }, "feedback_warning_20": { "text": { "color": "{text_59}" } }, "feedback_success_80": { "text": { "color": "{text_60}" } }, "feedback_success_50": { "text": { "color": "{text_61}" } }, "feedback_success_20": { "text": { "color": "{text_62}" } }, "white": { "text": { "color": "{text_63}" } }, "black": { "text": { "color": "{text_64}" } }, "transparent": { "text": { "color": "{text_65}" } } }, "appearance": { "heading_xl": { "text": { "font-size": "{text_66}", "line-height": "{text_68}", "letter-spacing": "{text_69}", "font-weight": "{text_70}", "font-family": "{text_67}" } }, "heading_l": { "text": { "font-size": "{text_71}", "line-height": "{text_73}", "letter-spacing": "{text_74}", "font-weight": "{text_75}", "font-family": "{text_72}" } }, "heading_m": { "text": { "font-size": "{text_76}", "line-height": "{text_78}", "letter-spacing": "{text_79}", "font-weight": "{text_80}", "font-family": "{text_77}" } }, "heading_s": { "text": { "font-size": "{text_81}", "font-family": "{text_82}", "line-height": "{text_83}", "letter-spacing": "{text_84}", "font-weight": "{text_85}" } }, "heading_xs": { "text": { "font-size": "{text_86}", "font-family": "{text_87}", "line-height": "{text_88}", "letter-spacing": "{text_89}", "font-weight": "{text_90}" } }, "heading_xxs": { "text": { "font-size": "{text_91}", "line-height": "{text_93}", "letter-spacing": "{text_94}", "font-weight": "{text_95}", "font-family": "{text_92}" } }, "overline": { "text": { "font-size": "{text_96}", "font-family": "{text_97}", "line-height": "{text_98}", "letter-spacing": "{text_99}", "font-weight": "{text_100}", "text-transform": "{text_101}" } }, "body_l": { "text": { "font-size": "{text_102}", "font-family": "{text_103}", "line-height": "{text_104}", "letter-spacing": "{text_105}", "font-weight": "{text_106}" } }, "body_l_bold": { "text": { "font-size": "{text_107}", "font-family": "{text_108}", "line-height": "{text_109}", "letter-spacing": "{text_110}", "font-weight": "{text_111}" } }, "body_l_link": { "text": { "font-size": "{text_112}", "font-family": "{text_113}", "line-height": "{text_114}", "letter-spacing": "{text_115}", "font-weight": "{text_116}", "color": "{text_0}" } }, "body_m": { "text": { "font-size": "{text_117}", "font-family": "{text_118}", "line-height": "{text_119}", "letter-spacing": "{text_120}", "font-weight": "{text_121}" } }, "body_m_bold": { "text": { "font-size": "{text_122}", "font-family": "{text_123}", "line-height": "{text_124}", "letter-spacing": "{text_125}", "font-weight": "{text_126}" } }, "body_m_link": { "text": { "font-size": "{text_127}", "font-family": "{text_128}", "line-height": "{text_129}", "letter-spacing": "{text_130}", "font-weight": "{text_131}", "color": "{text_0}" } }, "body_s": { "text": { "font-size": "{text_132}", "font-family": "{text_133}", "line-height": "{text_134}", "letter-spacing": "{text_135}", "font-weight": "{text_136}" } }, "body_s_bold": { "text": { "font-size": "{text_137}", "font-family": "{text_138}", "line-height": "{text_139}", "letter-spacing": "{text_140}", "font-weight": "{text_141}" } }, "body_s_link": { "text": { "font-size": "{text_142}", "font-family": "{text_143}", "line-height": "{text_144}", "letter-spacing": "{text_145}", "font-weight": "{text_146}", "color": "{text_0}" } }, "body_xs": { "text": { "font-size": "{text_147}", "font-family": "{text_148}", "line-height": "{text_149}", "letter-spacing": "{text_150}", "font-weight": "{text_151}" } }, "body_xs_bold": { "text": { "font-size": "{text_152}", "font-family": "{text_153}", "line-height": "{text_154}", "letter-spacing": "{text_155}", "font-weight": "{text_156}" } }, "body_xs_link": { "text": { "font-size": "{text_157}", "font-family": "{text_158}", "line-height": "{text_159}", "letter-spacing": "{text_160}", "font-weight": "{text_161}", "color": "{text_0}" } }, "body_xxs": { "text": { "font-size": "{text_167}", "font-family": "{text_168}", "line-height": "{text_169}", "letter-spacing": "{text_170}", "font-weight": "{text_171}" } }, "body_xxs_bold": { "text": { "font-size": "{text_172}", "font-family": "{text_173}", "line-height": "{text_174}", "letter-spacing": "{text_175}", "font-weight": "{text_176}" } }, "body_xxs_link": { "text": { "font-size": "{text_177}", "font-family": "{text_178}", "line-height": "{text_179}", "letter-spacing": "{text_180}", "font-weight": "{text_181}", "color": "{text_0}" } }, "body_3xs": { "text": { "font-size": "{text_182}", "font-family": "{text_183}", "line-height": "{text_184}", "letter-spacing": "{text_185}", "font-weight": "{text_186}" } }, "body_3xs_bold": { "text": { "font-size": "{text_187}", "font-family": "{text_188}", "line-height": "{text_189}", "letter-spacing": "{text_190}", "font-weight": "{text_191}" } }, "body_3xs_link": { "text": { "font-size": "{text_192}", "font-family": "{text_193}", "line-height": "{text_194}", "letter-spacing": "{text_195}", "font-weight": "{text_196}", "color": "{text_0}" } }, "list_title": { "text": { "font-size": "{text_197}", "font-family": "{text_198}", "line-height": "{text_199}", "letter-spacing": "{text_200}", "font-weight": "{text_201}" } }, "button": { "text": { "font-size": "{text_202}", "font-family": "{text_203}", "line-height": "{text_204}", "letter-spacing": "{text_205}", "font-weight": "{text_206}" } }, "code": { "text": { "font-size": "{text_207}", "font-family": "{text_208}", "line-height": "{text_209}", "letter-spacing": "{text_210}", "font-weight": "{text_211}" } }, "body_xs_caps": { "text": { "font-size": "{text_variant_appearance_body_xs_caps_text_font-size}", "line-height": "{text_163}", "letter-spacing": "{text_165}", "font-weight": "{text_166}", "text-transform": "{text_164}", "font-family": "{text_162}" } }, "body_s_regular_para": { "text": { "font-size": "{text_212}", "line-height": "{text_213}", "letter-spacing": "{text_214}", "font-weight": "{text_215}", "font-family": "{text_216}" } } } }, "api": { "config": { "color": { "values": ["primary_grey_100", "primary_80", "primary_70", "primary_60", "primary_50", "primary_40", "primary_30", "primary_20", "primary_inverse", "primary_background", "primary_grey_80", "primary_grey_60", "primary_grey_40", "primary_grey_20", "secondary_80", "secondary_70", "secondary_60", "secondary_50", "secondary_40", "secondary_30", "secondary_20", "secondary_inverse", "secondary_background", "secondary_grey_100", "secondary_grey_80", "secondary_grey_60", "secondary_grey_40", "secondary_grey_20", "sparkle_80", "sparkle_70", "sparkle_60", "sparkle_50", "sparkle_40", "sparkle_30", "sparkle_20", "sparkle_inverse", "sparkle_background", "sparkle_grey_100", "sparkle_grey_80", "sparkle_grey_60", "sparkle_grey_40", "sparkle_grey_20", "feedback_error_80", "feedback_error_50", "feedback_error_20", "feedback_warning_80", "feedback_warning_50", "feedback_warning_20", "feedback_success_80", "feedback_success_50", "feedback_success_20", "white", "black", "transparent"], "doc_description": "It can be used to add font-color to text.", "function": true }, "textAlign": { "values": ["left", "right", "center"], "doc_description": "It aligns text to left, center, right." }, "textDecoration": { "values": ["none", "underline", "line-through", "overline"], "doc_description": "It can be used to decorate text eg. 'underline', 'line-through', 'overline'." }, "appearance": { "values": ["body_s", "heading_xl", "heading_l", "heading_m", "heading_s", "heading_xs", "heading_xxs", "overline", "body_l", "body_l_bold", "body_l_link", "body_m", "body_m_bold", "body_m_link", "body_s_bold", "body_s_link", "body_xs", "body_xs_bold", "body_xs_link", "body_xxs", "body_xxs_bold", "body_xxs_link", "body_3xs", "body_3xs_bold", "body_3xs_link", "list_title", "button", "code", "body_xs_caps", "body_s_regular_para"], "doc_description": "It can be used to set a font appearance based on our typography rules." } }, "data": { "text": { "value": { "type": "string", "name": "text", "doc_description": "It the user input text." }, "max-lines": { "type": "number", "name": "maxLines", "function": true, "required": false, "doc_description": "It determines the maximum lines of text the user can pass as input." }, "min-lines": { "type": "number", "name": "minLines", "platform": "android", "required": false, "doc_description": "It determines the minimum lines of text the user can pass as input." }, "trim-line-padding": { "type": "string", "name": "trimLinePadding", "required": false, "platform": "android", "doc_description": "Defines whether the space that would be added to the top of first line, and bottom of the last line should be trimmed or not." }, "textType": { "type": "string", "name": "textType", "platform": "web" }, "custom-color": { "type": "color", "name": "customColor", "required": false, "platform": "android" } } }, "events": { "text": { "onTextLayout": { "name": "onTextLayout", "platform": "android" } } } } };

const legacyTextColors = [
  "primary-grey-100",
  "primary-80",
  "primary-70",
  "primary-60",
  "primary-50",
  "primary-40",
  "primary-30",
  "primary-20",
  "primary-inverse",
  "primary-background",
  "primary-grey-80",
  "primary-grey-60",
  "primary-grey-40",
  "primary-grey-20",
  "secondary-80",
  "secondary-70",
  "secondary-60",
  "secondary-50",
  "secondary-40",
  "secondary-30",
  "secondary-20",
  "secondary-inverse",
  "secondary-background",
  "secondary-grey-100",
  "secondary-grey-80",
  "secondary-grey-60",
  "secondary-grey-40",
  "secondary-grey-20",
  "sparkle-80",
  "sparkle-70",
  "sparkle-60",
  "sparkle-50",
  "sparkle-40",
  "sparkle-30",
  "sparkle-20",
  "sparkle-inverse",
  "sparkle-background",
  "sparkle-grey-100",
  "sparkle-grey-80",
  "sparkle-grey-60",
  "sparkle-grey-40",
  "sparkle-grey-20",
  "feedback-error-80",
  "feedback-error-50",
  "feedback-error-20",
  "feedback-warning-80",
  "feedback-warning-50",
  "feedback-warning-20",
  "feedback-success-80",
  "feedback-success-50",
  "feedback-success-20"
];
const legacyAppearance = [
  "body-s",
  "heading-xl",
  "heading-l",
  "heading-m",
  "heading-s",
  "heading-xs",
  "heading-xxs",
  "overline",
  "body-l",
  "body-l-bold",
  "body-l-link",
  "body-m",
  "body-m-bold",
  "body-m-link",
  "body-s-bold",
  "body-s-link",
  "body-xs",
  "body-xs-bold",
  "body-xs-link",
  "body-xxs",
  "body-xxs-bold",
  "body-xxs-link",
  "list-title",
  "body_xs_caps"
];
const PROP_MAP$n = (props) => {
  if (legacyAppearance.includes(props.appearance)) {
    console.warn(
      "these values for appearance prop are deprecated",
      legacyAppearance
    );
  }
  if (legacyTextColors.includes(props.color)) {
    console.warn("these values for color are deprecated", legacyTextColors);
  }
  return {
    color: {
      properties: {},
      variations: {
        "primary-grey-100": {
          color: "primary_grey_100"
        },
        "primary-80": {
          color: "primary_80"
        },
        "primary-70": {
          color: "primary_70"
        },
        "primary-60": {
          color: "primary_60"
        },
        "primary-50": {
          color: "primary_50"
        },
        "primary-40": {
          color: "primary_40"
        },
        "primary-30": {
          color: "primary_30"
        },
        "primary-20": {
          color: "primary_20"
        },
        "primary-inverse": {
          color: "primary_inverse"
        },
        "primary-background": {
          color: "primary_background"
        },
        "primary-grey-80": {
          color: "primary_grey_80"
        },
        "primary-grey-60": {
          color: "primary_grey_60"
        },
        "primary-grey-40": {
          color: "primary_grey_40"
        },
        "primary-grey-20": {
          color: "primary_grey_20"
        },
        "secondary-80": {
          color: "secondary_80"
        },
        "secondary-70": {
          color: "secondary_70"
        },
        "secondary-60": {
          color: "secondary_60"
        },
        "secondary-50": {
          color: "secondary_50"
        },
        "secondary-40": {
          color: "secondary_40"
        },
        "secondary-30": {
          color: "secondary_30"
        },
        "secondary-20": {
          color: "secondary_20"
        },
        "secondary-inverse": {
          color: "secondary_inverse"
        },
        "secondary-background": {
          color: "secondary_background"
        },
        "secondary-grey-100": {
          color: "secondary_grey_100"
        },
        "secondary-grey-80": {
          color: "secondary_grey_80"
        },
        "secondary-grey-60": {
          color: "secondary_grey_60"
        },
        "secondary-grey-40": {
          color: "secondary_grey_40"
        },
        "secondary-grey-20": {
          color: "secondary_grey_20"
        },
        "sparkle-80": {
          color: "sparkle_80"
        },
        "sparkle-70": {
          color: "sparkle_70"
        },
        "sparkle-60": {
          color: "sparkle_60"
        },
        "sparkle-50": {
          color: "sparkle_50"
        },
        "sparkle-40": {
          color: "sparkle_40"
        },
        "sparkle-30": {
          color: "sparkle_30"
        },
        "sparkle-20": {
          color: "sparkle_20"
        },
        "sparkle-inverse": {
          color: "sparkle_inverse"
        },
        "sparkle-background": {
          color: "sparkle_background"
        },
        "sparkle-grey-100": {
          color: "sparkle_grey_100"
        },
        "sparkle-grey-80": {
          color: "sparkle_grey_80"
        },
        "SPARKLE-GREY-60": {
          color: "sparkle_grey_60"
        },
        "sparkle-grey-40": {
          color: "sparkle_grey_40"
        },
        "sparkle-grey-20": {
          color: "sparkle_grey_20"
        },
        "feedback-error-80": {
          color: "feedback_error_80"
        },
        "feedback-error-50": {
          color: "feedback_error_50"
        },
        "feedback-error-20": {
          color: "feedback_error_20"
        },
        "feedback-warning-80": {
          color: "feedback_warning_80"
        },
        "feedback-warning-50": {
          color: "feedback_warning_50"
        },
        "feedback-warning-20": {
          color: "feedback_warning_20"
        },
        "feedback-success-80": {
          color: "feedback_success_80"
        },
        "feedback-success-50": {
          color: "feedback_success_50"
        },
        "feedback-success-20": {
          color: "feedback_success_20"
        },
        white: { color: "white" },
        black: { color: "black" },
        transparent: { color: "transparent" }
      }
    },
    children: {
      properties: {
        text: props.text || props.children
      }
    },
    text: {
      properties: {
        text: props.text || props.children
      }
    },
    as: {
      properties: {
        textType: props.as
      }
    },
    appearance: {
      properties: {},
      variations: {
        "body-s": { appearance: "body-s" },
        "heading-xl": { appearance: "heading_xl" },
        "heading-l": { appearance: "heading_l" },
        "heading-m": { appearance: "heading_m" },
        "heading-s": { appearance: "heading_s" },
        "heading-xs": { appearance: "heading_xs" },
        "heading-xxs": { appearance: "heading_xxs" },
        overline: { appearance: "overline" },
        "body-l": { appearance: "body_l" },
        "body-l-bold": { appearance: "body_l_bold" },
        "body-l-link": { appearance: "body_l_link" },
        "body-m": { appearance: "body_m" },
        "body-m-bold": { appearance: "body_m_bold" },
        "body-m-link": { appearance: "body_m_link" },
        "body-s-bold": { appearance: "body_s_bold" },
        "body-s-link": { appearance: "body_s_link" },
        "body-xs": { appearance: "body_xs" },
        "body-xs-bold": { appearance: "body_xs_bold" },
        "body-xs-link": { appearance: "body_xs_link" },
        "body-xxs": { appearance: "body_xxs" },
        "body-xxs-bold": { appearance: "body_xxs-bold" },
        "body-xxs-link": { appearance: "body_xxs_link" },
        "list-title": { appearance: "list_title" },
        button: { appearance: "button" },
        code: { appearance: "code" }
      }
    }
  };
};
const withLogic$1l = (Component) => (userProps) => {
  const props = modifyProps(userProps, PROP_MAP$n);
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props
      }
    }
  );
};

const Component$1n = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = Jdstext;
  const { color = "primary_grey_100", textAlign = "left", textDecoration = "none", appearance = "body_s", onTextLayout = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ color, textAlign, textDecoration, appearance, onTextLayout, ...rest }, componentTag },
    "JDSText",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const Text = withLogic$1l(Component$1n);
Text.displayName = "Text";
Text.slotName = "jds_text";

const PROP_MAP$m = (props) => ({
  searchConfig: {
    properties: {
      searchResults: props.searchConfig?.searchResults?.sections?.[0].results?.map((c) => ({
        ...c,
        label: c.title
      })),
      searchResultHeader: props.searchConfig?.searchResults?.sections?.[0].header,
      searchLabel: props.searchConfig?.searchInput?.label,
      searchSuffix: props.searchConfig?.searchInput?.suffix,
      searchShowBack: props.searchConfig?.searchInput?.showBack,
      query: props.searchConfig?.searchInput?.value,
      searchResultHeaderAction: props.searchConfig?.searchResults?.sections?.[0]?.headerAction?.title,
      onSearchResultClick: props.searchConfig?.searchResults?.onResultsItemClick,
      onSearchResultHeaderActionClick: props.searchConfig?.searchResults?.sections?.[0]?.headerAction?.onClick
    }
  },
  suffix: {
    properties: {
      suffix: typeof props.suffix === "string" ? /* @__PURE__ */ jsx(Text, { children: props.suffix }) : props.suffix
    }
  }
});

const sdl$1h = { "metadata": { "version": "1.0.0", "id": "link-1.0.0", "name": "JDSLink", "layerName": "jds_link" }, "hierarchy": { "container": ["jds-text", "children-slot"] }, "base": { "container": { "hidden": false, "background-color": "{l_0}", "flex-direction": "{l_1}", "justify-content": "{l_2}", "align-items": "{l_3}", "behavior": { "hover": {}, "visited": {}, "active": {}, "focus": { "border-radius": "{l_4}", "border-width": "{l_5}", "border-color": "{l_6}" } } }, "jds-text": { "font-family": "{bodySBold}", "color": "{primary60}", "font-size": "{bodySBold}", "line-height": "{bodySBold}", "letter-spacing": "{bodySBold}", "font-weight": "{bodySBold}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "text-color": "primary_grey_60" } }, "variant": { "_hasText": { "false": { "jds-text": { "hidden": true } } }, "_hasChildren": { "false": { "children-slot": { "hidden": true } }, "true": { "jds-text": { "hidden": true } } }, "textAppearance": { "body_s": { "jds-text": { "font-family": "{bodyS}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}" } }, "body_s_bold": { "jds-text": {} }, "body_m": { "jds-text": { "font-family": "{bodyM}", "font-size": "{bodyM}", "line-height": "{bodyM}", "letter-spacing": "{bodyM}", "font-weight": "{bodyM}" } }, "body_m_bold": { "jds-text": { "font-family": "{bodyMBold}", "font-size": "{bodyMBold}", "line-height": "{bodyMBold}", "letter-spacing": "{bodyMBold}", "font-weight": "{bodyMBold}" } }, "body_l": { "jds-text": { "font-family": "{bodyL}", "font-size": "{bodyL}", "line-height": "{bodyL}", "letter-spacing": "{bodyL}", "font-weight": "{bodyL}" } }, "body_l_bold": { "jds-text": { "font-family": "{bodyLBold}", "font-size": "{bodyLBold}", "line-height": "{bodyLBold}", "letter-spacing": "{bodyLBold}", "font-weight": "{bodyLBold}" } }, "body_l_link": { "jds-text": { "font-family": "{bodyLLink}", "font-size": "{bodyLLink}", "line-height": "{bodyLLink}", "letter-spacing": "{bodyLLink}", "font-weight": "{bodyLLink}" } }, "body_xs": { "jds-text": { "font-family": "{bodyXs}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}" } }, "body_xxs": { "jds-text": { "font-family": "{bodyXxs}", "font-size": "{bodyXxs}", "line-height": "{bodyXxs}", "letter-spacing": "{bodyXxs}", "font-weight": "{bodyXxs}" } }, "body_s_link": { "jds-text": { "font-family": "{bodySLink}", "font-size": "{bodySLink}", "line-height": "{bodySLink}", "letter-spacing": "{bodySLink}", "font-weight": "{bodySLink}" } }, "body_m_link": { "jds-text": { "font-family": "{bodyMLink}", "font-size": "{bodyMLink}", "line-height": "{bodyMLink}", "letter-spacing": "{bodyMLink}", "font-weight": "{bodyMLink}" } }, "body_xxs_link": { "jds-text": { "font-family": "{bodyXxsLink}", "font-size": "{bodyXxsLink}", "line-height": "{bodyXxsLink}", "letter-spacing": "{bodyXxsLink}", "font-weight": "{bodyXxsLink}" } }, "body_xs_link": { "jds-text": { "font-family": "{bodyXsLink}", "font-size": "{bodyXsLink}", "line-height": "{bodyXsLink}", "letter-spacing": "{bodyXsLink}", "font-weight": "{bodyXsLink}" } }, "body_xs_bold": { "jds-text": { "font-family": "{bodyXsBold}", "font-size": "{bodyXsBold}", "line-height": "{bodyXsBold}", "letter-spacing": "{bodyXsBold}", "font-weight": "{bodyXsBold}" } }, "body_xxs_bold": { "jds-text": { "font-family": "{bodyXxsBold}", "font-size": "{bodyXxsBold}", "line-height": "{bodyXxsBold}", "letter-spacing": "{bodyXxsBold}", "font-weight": "{bodyXxsBold}" } }, "heading_s": { "jds-text": { "font-family": "{headingS}", "font-size": "{headingS}", "line-height": "{headingS}", "letter-spacing": "{headingS}", "font-weight": "{headingS}" } }, "overline": { "jds-text": { "font-family": "{overline}", "font-size": "{overline}", "line-height": "{overline}", "letter-spacing": "{overline}", "font-weight": "{overline}", "text-transform": "{overline}" } }, "heading_xs": { "jds-text": { "font-family": "{headingXs}", "font-size": "{headingXs}", "line-height": "{headingXs}", "letter-spacing": "{headingXs}", "font-weight": "{headingXs}" } }, "heading_xxs": { "jds-text": { "font-family": "{headingXxs}", "font-size": "{headingXxs}", "line-height": "{headingXxs}", "letter-spacing": "{headingXxs}", "font-weight": "{headingXxs}" } }, "heading_l": { "jds-text": { "font-family": "{headingL}", "font-size": "{headingL}", "line-height": "{headingL}", "letter-spacing": "{headingL}", "font-weight": "{headingL}" } }, "heading_m": { "jds-text": { "font-family": "{headingM}", "font-size": "{headingM}", "line-height": "{headingM}", "letter-spacing": "{headingM}", "font-weight": "{headingM}" } }, "heading_xl": { "jds-text": { "font-family": "{headingXl}", "font-size": "{headingXl}", "line-height": "{headingXl}", "letter-spacing": "{headingXl}", "font-weight": "{headingXl}" } }, "list_title": { "jds-text": { "font-family": "{listTitle}", "font-size": "{listTitle}", "line-height": "{listTitle}", "letter-spacing": "{listTitle}", "font-weight": "{listTitle}" } }, "button": { "jds-text": { "font-family": "{button}", "font-size": "{button}", "line-height": "{button}", "letter-spacing": "{button}", "font-weight": "{button}" } }, "code": { "jds-text": { "font-family": "{code}", "font-size": "{code}", "line-height": "{code}", "letter-spacing": "{code}", "font-weight": "{code}" } } }, "kind": { "default": { "jds-text": { "behavior": { "hover": { "color": "{primary50}" }, "visited": { "color": "{primaryGrey80}" } } } }, "header": { "container": { "behavior": { "focus": { "border-color": "{l_7}" } } }, "jds-text": { "color": "{primaryInverse}", "behavior": { "hover": { "text-decoration": "{text-decoration.underline}" } } } }, "submenu": { "jds-text": { "color": "{primaryGrey80}", "behavior": { "hover": { "color": "{primaryGrey100}", "text-decoration": "{text-decoration.underline}" } } } }, "rich_text": { "jds-text": { "color": "{primaryGrey100}", "text-decoration": "{text-decoration.underline}", "behavior": { "hover": { "text-decoration": "{text-decoration.none}" } } } } } }, "combination": [{ "true": { "header": { "jds-text": { "text-decoration": "{text-decoration.underline}" } } } }, { "header": { "none": { "jds-text": { "color": "{primaryInverse}", "behavior": { "hover": { "font-family": "{bodySLink}", "color": "{primary60}", "font-size": "{bodySLink}", "line-height": "{bodySLink}", "letter-spacing": "{bodySLink}", "font-weight": "{bodySLink}" }, "active": { "font-family": "{bodySLink}", "color": "{primary60}", "font-size": "{bodySLink}", "line-height": "{bodySLink}", "letter-spacing": "{bodySLink}", "font-weight": "{bodySLink}" } } } } }, "submenu": { "none": { "jds-text": {} } }, "rich_text": { "none": { "jds-text": { "font-family": "{bodySLink}", "font-size": "{bodySLink}", "line-height": "{bodySLink}", "letter-spacing": "{bodySLink}", "font-weight": "{bodySLink}", "behavior": { "hover": { "font-family": "{bodySBold}", "color": "{primaryGrey100}", "font-size": "{bodySBold}", "line-height": "{bodySBold}", "letter-spacing": "{bodySBold}", "font-weight": "{bodySBold}", "text-decoration": "{text-decoration.underline}" } } } } }, "default": { "none": { "jds-text": { "behavior": { "hover": { "font-family": "{bodySLink}", "font-size": "{bodySLink}", "line-height": "{bodySLink}", "letter-spacing": "{bodySLink}", "font-weight": "{bodySLink}" } } } } } }], "combination_config": [["_active", "kind"], ["kind", "textAppearance"]], "api": { "data": { "container": { "href": { "type": "string", "name": "href", "doc_description": "User provided href of the Link." }, "target": { "type": "boolean", "name": "newTab", "platform": "web" } }, "jds-text": { "value": { "type": "string", "name": "title", "doc_description": "It displayes the title of Link." } } }, "config": { "_hasText": { "values": [true, false] }, "_active": { "values": [false, true] }, "_hasChildren": { "values": [true, false] }, "textAppearance": { "type": "JDSText.appearance", "doc_description": "It can be used to apply certain style to the title of the link.", "values": ["body_s", "heading_xl", "heading_l", "heading_m", "heading_s", "heading_xs", "heading_xxs", "overline", "body_l", "body_l_bold", "body_l_link", "body_m", "body_m_bold", "body_m_link", "body_s_bold", "body_s_link", "body_xs", "body_xs_bold", "body_xs_link", "body_xxs", "body_xxs_bold", "body_xxs_link", "body_3xs", "body_3xs_bold", "body_3xs_link", "list_title", "button", "code", "body_xs_caps", "body_s_regular_para"] }, "kind": { "values": ["default", "header", "submenu", "rich_text"], "doc_description": "It can be used to switch between 4 variants of Link." } }, "events": { "container": { "onClick": "onClick", "onHover": { "name": "onHover", "platform": "web" }, "onHoverEnd": { "name": "onHoverEnd", "platform": "web" } } }, "children": { "children-slot": { "name": "children", "accepts": ["any"] } }, "a11y": { "container": { "properties": { "role": { "value": "link" }, "aria-label": { "name": "ariaLabel", "prop": "title" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" }, "aria-haspopup": { "name": "ariaHaspopup", "platform": "web" }, "aria-expanded": { "name": "ariaExpanded", "platform": "web" } } } } } };

const withProviderProps = (Component) => ({ provider = /* @__PURE__ */ jsx("a", {}), ...rest }) => {
  const currentProvider = provider || rest?.href ? /* @__PURE__ */ jsx("a", { href: rest?.href }) : /* @__PURE__ */ jsx("div", {});
  if (!Component)
    return null;
  return cloneElement(currentProvider, {
    ...{
      ...provider?.props,
      target: rest.newTab ? "_blank" : void 0,
      tabIndex: -1,
      style: { ...provider?.props?.style || {}, display: "inline-flex" }
    },
    children: /* @__PURE__ */ jsx(Component, { ...rest })
  });
};

const PROP_MAP$l = (props) => {
  if (props.kind === "rich-text") {
    console.warn("rich-text is deprecated, use rich_text instead");
  }
  return {
    newTab: {
      properties: {
        newTab: props.newTab ? "_blank" : void 0
      }
    },
    kind: {
      variations: {
        default: {
          kind: "default"
        },
        "rich-text": {
          kind: "rich_text"
        }
      }
    },
    textAppearance: {
      properties: {},
      variations: {
        "body-s": { textAppearance: "body-s" },
        "heading-xl": { textAppearance: "heading_xl" },
        "heading-l": { textAppearance: "heading_l" },
        "heading-m": { textAppearance: "heading_m" },
        "heading-s": { textAppearance: "heading_s" },
        "heading-xs": { textAppearance: "heading_xs" },
        "heading-xxs": { textAppearance: "heading_xxs" },
        overline: { textAppearance: "overline" },
        "body-l": { textAppearance: "body_l" },
        "body-l-bold": { textAppearance: "body_l_bold" },
        "body-l-link": { textAppearance: "body_l_link" },
        "body-m": { textAppearance: "body_m" },
        "body-m-bold": { textAppearance: "body_m_bold" },
        "body-m-link": { textAppearance: "body_m_link" },
        "body-s-bold": { textAppearance: "body_s_bold" },
        "body-s-link": { textAppearance: "body_s_link" },
        "body-xs": { textAppearance: "body_xs" },
        "body-xs-bold": { textAppearance: "body_xs_bold" },
        "body-xs-link": { textAppearance: "body_xs_link" },
        "body-xxs": { textAppearance: "body_xxs" },
        "body-xxs-bold": { textAppearance: "body_xxs-bold" },
        "body-xxs-link": { textAppearance: "body_xxs_link" },
        "list-title": { textAppearance: "list_title" },
        button: { textAppearance: "button" },
        code: { textAppearance: "code" }
      }
    }
  };
};
const withLogic$1k = (Component) => forwardRef((userProps, ref) => {
  const props = modifyProps(userProps, PROP_MAP$l);
  const ComponentWithProvider = useMemo(
    () => withProviderProps(Component),
    []
  );
  return /* @__PURE__ */ jsx(
    ComponentWithProvider,
    {
      ...{
        ...props,
        rootRef: ref,
        textAppearance: props.textAppearance || "body_s",
        _hasText: Boolean(props.title),
        _hasChildren: Boolean(props.children) && !props.title,
        children: convertTextToComponent(props.children)
      }
    }
  );
});

const Component$1m = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1h;
  const { textAppearance = "undefined", kind = "default", onClick = noop, onHover = noop, onHoverEnd = noop, ariaLabel = props.title?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ textAppearance, kind, onClick, onHover, onHoverEnd, ariaLabel, ...rest }, componentTag },
    "JDSLink",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const Link = withLogic$1k(Component$1m);
Link.displayName = "Link";
Link.slotName = "jds_link";

const sdl$1g = { "metadata": { "version": "1.0.0", "id": "side-panel-1.0.0", "name": "JDSSidePanel", "description": "", "layerName": "jds_side_panel" }, "hierarchy": { "popup": [{ "popup-container": ["jds_side_panel_internal"] }] }, "base": { "popup": { "priority": 40, "passive": true, "show": true }, "popup-container": { "background-color": "#141414D9", "height": "{s_0}", "width": "{s_1}", "flex-direction": "{s_2}", "justify-content": "{s_3}", "align-items": "{s_4}", "enter-animation-name": "fadeIn", "exit-animation-name": "fadeOut", "enter-animation-curve": "entrance_ease", "exit-animation-curve": "exit_ease", "enter-animation-duration": 500, "exit-animation-duration": 500, "opacity": "{opacity.invisible}", "transition": { "property": ["opacity"], "duration": "{medium}", "timing-function": "{easeRapid}" } }, "jds_side_panel_internal": { "open": false, "maxWidth": false } }, "variant": { "open": { "true": { "popup": { "passive": false }, "popup-container": { "opacity": "{opacity.enabled}" }, "jds_side_panel_internal": { "open": true } } }, "direction": { "right": { "popup-container": { "justify-content": "{s_27}" }, "jds_side_panel_internal": { "direction": "right" } } }, "maxWidth": { "true": { "jds_side_panel_internal": { "maxWidth": true } } }, "showClose": { "false": { "jds_side_panel_internal": { "showClose": false } } } }, "combination": [{}], "combination_config": [], "api": { "config": { "direction": { "values": ["left", "right"], "doc_description": "Determines whether open/close should happen from left or right." }, "showClose": { "values": [true, false], "doc_description": "Whether a close on the right should be shown." }, "open": { "values": [false, true], "doc_description": "Can be used to programatically open/close the drawer with animation and selected direction." }, "maxWidth": { "values": [false, true], "doc_description": "If set it will limit max width of the panel to 412px.", "function": true }, "disableTransition": { "values": [false, true], "platform": "web" } }, "data": { "jds_side_panel_internal": { "items": { "type": "list", "name": "items", "object": { "title": "string", "prefix": "icon", "showSuffix": "boolean", "type": "JDSSidePanelItem.type" } }, "items.prefix": { "type": "string", "name": "items.prefix" }, "items.title": { "type": "string", "name": "items.title" }, "links.showSuffix": { "type": "boolean", "name": "links.showSuffix" }, "items.type": { "type": "string", "name": "items.type" }, "prefix": { "name": "prefix", "type": "slot", "accepts": ["jds_avatar", "jds_icon", "jds_button"], "max": 1 }, "header": { "name": "header", "type": "slot", "doc_description": "Has pre-defined suffix as close button.", "accepts": ["jds_text"], "max": 1 }, "children": { "name": "children", "type": "slot", "doc_description": "Any group of children can be added. When used for BurgerMenu, show a list of ListBlocks.", "accepts": ["any"] } } }, "events": { "jds_side_panel_internal": { "onClose": "onClose", "onContainerClick": "_onContainerClick", "onSwipeLeft": "onClose", "onSidePanelSuffixClick": "onSidePanelSuffixClick" }, "popup": { "onClick": "onClose" } }, "a11y": { "jds_side_panel_internal": { "name": "items", "repeating": { "itemAriaLabel": "itemAriaLabel", "itemSuffixAriaLabel": "itemSuffixAriaLabel", "itemAriaDescribedby": { "name": "itemAriaDescribedby", "platform": "web,ios" } } } } } };

const PROP_MAP$k = (props) => {
  if (props.header?.title) {
    console.warn("passing listblock props to header is deprecated");
  }
  return {
    header: {
      properties: {
        prefix: props.header?.prefix,
        header: props.header?.titleBlock?.text || (props.header?.title ? /* @__PURE__ */ jsx(Text, { children: props.header?.title }) : props.header)
      }
    },
    maxWidth: {
      properties: {
        maxWidth: !props.maxWidth
      }
    }
  };
};
const SIDEPANEL_SELECTOR = "div.j-JDSSidePanelInternal-container";
const withLogic$1j = (Component) => (userProps) => {
  const props = modifyProps(userProps, PROP_MAP$k);
  const { className, open, close } = useTransition(
    Boolean(props.open),
    props.onClose,
    500
  );
  const { element, rootRef } = useRootRef();
  const sidepanelRef = element?.querySelector(SIDEPANEL_SELECTOR);
  useEffect(() => {
    if (props.open && sidepanelRef) {
      sidepanelRef.focus();
    }
  }, [props.open]);
  const directionClass = props.direction === "right" ? "right" : "";
  const classes = [
    directionClass,
    className,
    !props.disableTransition ? "enable-transition" : ""
  ];
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        open,
        rootRef,
        maxWidth: props.maxWidth || props.maxWidth === void 0,
        platform: getPlatform(),
        children: convertTextToComponent(props.children),
        className: classes.join(" "),
        _onContainerClick: (ev) => {
          ev.stopPropagation();
        },
        onClose: close
      }
    }
  );
};

const Component$1l = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1g;
  const { direction = "left", showClose = true, open = false, maxWidth = false, disableTransition = false, onClose = noop, onSidePanelSuffixClick = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ direction, showClose, open, maxWidth, disableTransition, onClose, onSidePanelSuffixClick, ...rest }, componentTag },
    "JDSSidePanel",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const SidePanel = withLogic$1j(Component$1l);
SidePanel.displayName = "SidePanel";
SidePanel.slotName = "jds_side_panel";

const sdl$1f = { "metadata": { "version": "1.0.0", "id": "side-panel-item-1.0.0", "name": "JDSSidePanelItem", "layerName": "jds_side_panel_item", "internal": true }, "hierarchy": { "container": [{ "inner-container": [{ "prefix-jds-icon-container": ["prefix-jds-icon"] }, "title-jds_link"] }, "suffix-jds_action_button", "heading-jds-text", "jds_divider"] }, "base": { "jds_divider": { "hidden": true, "pad": "none", "orientation": "horizontal" }, "container": { "flex-direction": "{s_2}", "justify-content": "{s_3}", "align-items": "{s_4}", "width": "{s_5}" }, "inner-container": { "flex-direction": "{s_6}", "justify-content": "{s_7}", "align-items": "{s_8}", "gap": "{s_9}", "padding-top": "{s_10}", "padding-bottom": "{s_11}", "flex": 1 }, "title-jds_link": { "kind": "submenu", "textAppearance": "body_s" }, "suffix-jds_action_button": { "hidden": false, "icon": "ic_next", "size": "medium", "kind": "tertiary" }, "heading-jds-text": { "font-family": "{bodyXsBold}", "color": "{primaryGrey100}", "font-size": "{bodyXsBold}", "line-height": "{bodyXsBold}", "letter-spacing": "{bodyXsBold}", "font-weight": "{bodyXsBold}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": true, "padding-top": "{s_0}", "padding-bottom": "{s_1}" }, "prefix-jds-icon": { "size": "{m}", "color": "{primary50}" }, "prefix-jds-icon-container": { "background-color": "{primary20}", "border-radius": "{pill}", "size": "{l}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}" } }, "variant": { "showSuffix": { "false": { "suffix-jds_action_button": { "hidden": true } } }, "type": { "divider": { "container": { "padding-top": "0", "padding-bottom": "0" }, "inner-container": { "hidden": true }, "suffix-jds_action_button": { "hidden": true }, "jds_divider": { "hidden": false } }, "heading": { "container": { "padding-top": "0", "padding-bottom": "0" }, "inner-container": { "hidden": true }, "suffix-jds_action_button": { "hidden": true }, "heading-jds-text": { "hidden": false } } } }, "combination": [{}], "combination_config": [[]], "api": { "config": { "type": { "values": ["entry", "divider", "heading"] }, "showSuffix": { "values": [true, false] } }, "data": { "title-jds_link": { "title": { "type": "string", "name": "title" }, "href": { "type": "string", "name": "href" }, "newTab": { "type": "boolean", "name": "newTab" } }, "prefix-jds-icon": { "value": { "type": "icon", "name": "prefix" }, "ic": { "type": "icon", "name": "prefix" } }, "heading-jds-text": { "value": { "type": "string", "name": "title" } } }, "events": { "suffix-jds_action_button": { "onClick": "onSuffixClick" } }, "a11y": { "container": { "properties": { "role": { "value": "listitem" }, "aria-label": { "name": "ariaLabel", "prop": "title" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" } } }, "suffix-jds_action_button": { "properties": { "ariaLabel": "itemSuffixAriaLabel" } } } } };

const withLogic$1i = (Component) => (props) => {
  const { prefix, ...rest } = props;
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...rest,
        onSuffixClick: () => {
          rest.onSuffixClick?.(rest.internalIndex);
        }
      }
    }
  );
};

const Component$1k = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1f;
  const { type = "entry", showSuffix = true, onSuffixClick = noop, ariaLabel = props.title?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ type, showSuffix, onSuffixClick, ariaLabel, ...rest }, componentTag },
    "JDSSidePanelItem",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const SidePanelItem = withLogic$1i(Component$1k);
SidePanelItem.displayName = "SidePanelItem";
SidePanelItem.slotName = "jds_side_panel_item";

const createIconLinks = (iconLinks) => {
  return iconLinks?.map((iconLink, i) => {
    const { icon, ...rest } = iconLink;
    return /* @__PURE__ */ createElement(Link, { ...rest, key: iconLink.href || i }, /* @__PURE__ */ jsx(Button, { icon }));
  });
};
const useResponsiveDevice = () => {
  const [isDesktop, setIsDesktop] = useState(true);
  const handleResize = useCallback(() => {
    setIsDesktop(Devices.isDesktop());
  }, []);
  useEffect(() => {
    setIsDesktop(Devices.isDesktop());
    window.addEventListener("resize", handleResize);
    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, [handleResize]);
  return isDesktop;
};
const withLogic$1h = (Component) => (userProps) => {
  const props = modifyProps(userProps, PROP_MAP$m);
  const isDesktop = useResponsiveDevice();
  const links = props.links?.map((link, i) => ({
    ...link,
    active: props.activeLink === i,
    showSuffix: link.subLinks?.length,
    onHover: () => {
      if (isDesktop) {
        setSelectedLink(i);
        setOpen(true);
      }
    }
  }));
  const [distance, setDistance] = useState({ x: 0, y: 0, width: 0 });
  const [selectedLink, setSelectedLink] = useState();
  const [open, setOpen] = useState(false);
  const [internalSearchActive, setInternalSearchActive] = useState(
    props.variant === "active_search"
  );
  const [element, setElement] = useState(null);
  const [searchValue, setSearchValue] = useState(
    props.searchConfig?.searchInput?.value
  );
  const [currentLinks, setCurrentLinks] = useState(links || []);
  const [sidePanelLinkIndex, setSidePanelLinkIndex] = useState(0);
  const [lastSidePanelItems, setLastSidePanelItems] = useState([links || []]);
  const [sidePanelOpen, setSidePanelOpen] = useState(false);
  const [sidePanelTitle, setSidePanelTitle] = useState("");
  const updatePosition = useCallback(
    debounce((element2) => {
      if (element2) {
        const { x, y, width, height } = element2.getBoundingClientRect();
        setDistance({ x, y: y + height, width });
      }
    }, 100),
    []
  );
  const ref = useCallback(
    (ref2) => {
      if (ref2 && (open || internalSearchActive)) {
        setElement(ref2);
        updatePosition(ref2);
      }
    },
    [updatePosition, open, internalSearchActive]
  );
  const currentSelectedLinkIndex = typeof selectedLink === "number" ? selectedLink : -1;
  const megaMenuLinks = links?.[currentSelectedLinkIndex]?.subLinks?.map(
    (t) => ({
      ...t,
      links: t.subLinks
    })
  );
  const handleSearchActiveChange = (val) => {
    props?.onSearchStateChange?.(val ? "open" : "closed");
    setInternalSearchActive(val);
  };
  const listener = () => {
    setOpen(false);
    handleSearchActiveChange(false);
  };
  useEffect(() => {
    setInternalSearchActive(props.variant === "active_search");
  }, [props.variant]);
  useEffect(() => {
    window.addEventListener("scroll", listener);
    return () => {
      window.removeEventListener("scroll", listener);
    };
  }, []);
  useEffect(() => {
    const targetLogo = document.querySelector(
      'div[data-testid="JDSHeaderDesktop-logo-container"] > a > div[data-testid="JDSLink-container"] > div[data-testid="JDSIcon-container"]'
    );
    const targetAvatar = document.querySelector(
      'div[data-testid="JDSHeaderDesktop-suffix-container"] > a > div[data-testid="JDSLink-container"] > div[data-testid="JDSAvatar-container"]'
    );
    const targetIconLinks = document.querySelectorAll(
      ' a > div[data-testid="JDSLink-container"] > button[data-testid="JDSButton-container"]'
    );
    if (targetLogo) {
      targetLogo.setAttribute("tabindex", "-1");
    }
    if (targetAvatar) {
      targetAvatar.setAttribute("tabindex", "-1");
    }
    if (targetIconLinks) {
      targetIconLinks.forEach((el) => el.setAttribute("tabindex", "-1"));
    }
  }, []);
  const LogoItem = props.logo === null ? void 0 : props.logo?.props?.src || props.logo?.props?.ic ? props.logo : /* @__PURE__ */ jsx(Icon, { ic: "IcJioDot", size: "xtra-large", color: "secondary_50" });
  const logoSlot = props.logoLink === null || props.logoLink === void 0 ? LogoItem : /* @__PURE__ */ jsx(Link, { ...props.logoLink, children: LogoItem });
  const AvatarItem = props.avatar ? /* @__PURE__ */ jsx(Avatar, { ...props.avatar }) : void 0;
  const avatarSlot = props.avatarLink === null || props.avatarLink === void 0 ? AvatarItem : /* @__PURE__ */ jsx(Link, { ...props.avatarLink, children: AvatarItem });
  const suffixSlot = props.suffixLink === null || props.suffixLink === void 0 ? props.suffix : /* @__PURE__ */ jsx(Link, { ...props.suffixLink, children: props.suffix });
  const { onFocus, onSuffixClick, onChange, onKeyDown, ...rest } = (props.searchConfig || {}).searchInput || {};
  useEffect(() => {
    if (open) {
      updatePosition(element);
    }
  }, [open, element]);
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(
      Component,
      {
        ...{
          ...props,
          ...rest,
          onSearchBoxSuffixClick: onSuffixClick,
          onSearchKeydown: onKeyDown || props.searchConfig?.onSearchKeyDown,
          _hasSearchResults: Boolean(props.searchConfig?.searchResults),
          suffix: suffixSlot,
          prefixOnClick: () => {
            if (!isDesktop && props.links?.length) {
              setSidePanelOpen(true);
            }
          },
          prefix: isDesktop || !props.links?.length ? props.prefix : "ic_burger_menu",
          logo: logoSlot,
          avatar: avatarSlot,
          avatarOnClick: props.avatarOnClick || props.avatarLink,
          onSearchIconClick: () => handleSearchActiveChange(true),
          expandedSearch: internalSearchActive || props.expandedSearch,
          onSearchResultContainerClick: (ev) => ev.stopPropagation(),
          tabs: props.tabs ? cloneElement(props.tabs, {
            appearance: "tab-bar"
          }) : null,
          onSearchResultClick: (ev) => {
            setSearchValue(ev.label);
            handleSearchActiveChange(false);
            props.searchConfig?.onSearchResultClick?.(ev);
            props.searchConfig?.searchResults?.onResultsItemClick?.(ev);
          },
          _platform: isDesktop ? "desktop" : "mobile",
          links: isDesktop ? links : void 0,
          query: searchValue,
          onSearchChange: (ev) => {
            setSearchValue(ev.target.value);
            props.searchConfig?.onSearchChange?.(ev.target.value);
            onChange?.(ev);
          },
          iconLinks: createIconLinks(props.iconLinks),
          _variant: internalSearchActive ? "active_search" : "default",
          onSearchFocus: (ev) => {
            handleSearchActiveChange(true);
            props.searchConfig?.onSearchFocus?.();
            onFocus?.(ev);
          },
          suffixOnClick: () => handleSearchActiveChange(false),
          megaMenuProps: {
            subLinks: megaMenuLinks,
            offsetX: distance.x,
            offsetY: distance.y,
            width: distance.width + distance.x,
            open
          },
          onMenuHoverEnd: () => setOpen(false),
          onSearchClose: () => handleSearchActiveChange(false),
          elementRef: ref
        }
      }
    ),
    /* @__PURE__ */ jsx(
      SidePanel,
      {
        open: sidePanelOpen,
        onClose: () => setSidePanelOpen(false),
        header: {
          titleBlock: {
            text: /* @__PURE__ */ jsx(Text, { color: "primary_inverse", children: sidePanelTitle })
          },
          prefix: /* @__PURE__ */ jsx(
            Button,
            {
              icon: "ic_back",
              onClick: () => {
                const currentIndex = sidePanelLinkIndex;
                const actualIndex = currentIndex < 0 ? 0 : currentIndex;
                const currentItems = [...lastSidePanelItems];
                const lastItems = currentItems.splice(actualIndex, 1);
                setSidePanelLinkIndex(actualIndex - 1);
                if (lastItems?.[0]) {
                  setCurrentLinks(lastItems[0]);
                }
                setLastSidePanelItems(currentItems);
              }
            }
          )
        },
        maxWidth: true,
        children: currentLinks?.map(
          (item, index) => /* @__PURE__ */ jsx(
            SidePanelItem,
            {
              type: item.type,
              showSuffix: !!item.showSuffix,
              prefix: item.prefix,
              title: item.title,
              ariaLabel: item.ariaLabel,
              ariaDescribedby: item.ariaDescribedby,
              itemSuffixAriaLabel: item.itemSuffixAriaLabel,
              onSuffixClick: () => {
                const subLinks = item.subLinks?.map((l) => ({
                  ...l,
                  showSuffix: Boolean(l.subLinks?.length)
                }));
                if (subLinks) {
                  setCurrentLinks(subLinks);
                  setSidePanelLinkIndex(sidePanelLinkIndex + 1);
                  setLastSidePanelItems((link) => [...link, currentLinks]);
                  setSidePanelTitle(item.title || "");
                }
                item.onSuffixClick?.();
              },
              custom: item.custom,
              href: item.href,
              newTab: true
            },
            index
          )
        )
      }
    )
  ] });
};

const Component$1j = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1i;
  const { search = true, expandedSearch = true, searchActive = false, fullWidth = true, onSearchActiveChange = noop, logoOnClick = noop, avatarOnClick = noop, prefixOnClick = noop, suffixOnClick = noop, onHover = noop, onMenuHoverEnd = noop, onSearchBlur = noop, onSearchFocus = noop, onSearchChange = noop, onSearchBoxSuffixClick = noop, onSearchKeydown = noop, onSearchIconClick = noop, onSearchResultHeaderActionClick = noop, onSearchResultClick = noop, searchButtonAriaLabel = props.dynamicButtonText?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ search, expandedSearch, searchActive, fullWidth, onSearchActiveChange, logoOnClick, avatarOnClick, prefixOnClick, suffixOnClick, onHover, onMenuHoverEnd, onSearchBlur, onSearchFocus, onSearchChange, onSearchBoxSuffixClick, onSearchKeydown, onSearchIconClick, onSearchResultHeaderActionClick, onSearchResultClick, searchButtonAriaLabel, ...rest }, componentTag },
    "JDSHeaderDesktop",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const Header = withLogic$1h(Component$1j);
Header.displayName = "Header";
Header.slotName = "jds_header_desktop";

const sdl$1e = { "metadata": { "version": "1.0.0", "id": "stepper-dot-1.0.0", "name": "JDSHorizontalStepItem", "layerName": "jds_horizontal_step_item", "internal": true }, "hierarchy": { "stepper-outer-container": [{ "stepper-inner-container": ["start-jds_divider", "jds_stepper_dot", "end-jds_divider"] }, "label-jds-text"] }, "base": { "stepper-outer-container": { "flex-direction": "{h_0}", "align-items": "{h_1}", "justify-content": "{h_2}", "size": "{h_3}", "gap": "{h_4}" }, "stepper-inner-container": { "flex-direction": "{h_5}", "width": "{h_6}", "align-items": "{h_7}", "gap": "{h_8}" }, "start-jds_divider": { "pad": "none", "flex": 1, "withLabel": false, "hidden": false, "opacity": "{h_11}" }, "end-jds_divider": { "pad": "none", "withLabel": false, "hidden": false, "flex": 1, "opacity": "{h_12}" }, "label-jds-text": { "font-family": "{headingXxs}", "color": "{primaryGrey100}", "font-size": "{headingXxs}", "line-height": "{headingXxs}", "letter-spacing": "{headingXxs}", "font-weight": "{headingXxs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "padding-right": "{h_9}", "padding-left": "{h_10}" } }, "variant": { "state": { "complete": { "end-jds_divider": { "variant": "stepper" }, "start-jds_divider": { "variant": "stepper" } }, "active": { "start-jds_divider": { "variant": "stepper" } }, "disabled": { "stepper-outer-container": { "disabled": true }, "jds_stepper_dot": { "state": "disabled" } } }, "direction": { "start": { "end-jds_divider": { "opacity": "{h_13}" } }, "end": { "start-jds_divider": { "opacity": "{h_14}" } } } }, "combination": [{}], "combination_config": [[]], "api": { "config": { "state": { "type": "JDSStepperDot.state", "values": ["inactive", "active", "complete", "disabled"] }, "itemsType": { "type": "JDSStepperDot.itemsType", "values": ["numbered", "icon", "dot"] }, "direction": { "values": ["both", "start", "end"] } }, "data": { "jds_stepper_dot": { "index": { "type": "string", "name": "index" }, "icon": { "type": "icon", "name": "icon" }, "state": { "type": "JDSStepperDot.state", "name": "state" }, "itemsType": { "type": "JDSStepperDot.itemsType", "name": "itemsType" }, "activeState": { "type": "JDSStepperDot.activeState", "name": "activeState" } }, "label-jds-text": { "value": { "type": "string", "name": "label" } } }, "a11y": { "stepper-outer-container": { "properties": { "role": { "value": "listitem" }, "aria-label": { "name": "ariaLabel", "prop": "label" }, "aria-current": { "name": "ariaCurrent" } } } } } };

const withLogic$1g = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$1i = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1e;
  const { state = "undefined", itemsType = "undefined", direction = "both", ariaLabel = props.label?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ state, itemsType, direction, ariaLabel, ...rest }, componentTag },
    "JDSHorizontalStepItem",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const HorizontalStepItem = withLogic$1g(Component$1i);
HorizontalStepItem.displayName = "HorizontalStepItem";
HorizontalStepItem.slotName = "jds_horizontal_step_item";

const sdl$1d = { "metadata": { "version": "1.0.0", "id": "image-1.0.0", "name": "JDSImage", "layerName": "jds_image" }, "hierarchy": { "container": ["image", "lottie", "icon", "provider-slot", { "skeleton-container": ["skeleton-slot"] }] }, "base": { "container": { "background-color": "{i_0}", "flex-direction": "{i_1}", "justify-content": "{i_2}", "align-items": "{i_3}", "width": "{i_4}", "height": "{i_5}", "border-radius": "{i_6}", "overflow": "hidden" }, "image": { "hidden": false, "width": "{i_9}", "object-position": "center", "object-fit": "cover", "aspect-ratio": "{i_7}", "border-radius": "{i_8}", "z-index": 0 }, "lottie": { "hidden": true, "size": "{i_10}", "repeat": true }, "icon": { "hidden": true, "value": "ic_broken_image", "size": "{i_11}", "color": "{i_12}", "z-index": 1 }, "provider-slot": { "hidden": true, "width": "{i_13}" }, "skeleton-container": { "hidden": true, "z-index": 1, "aspect-ratio": "{i_14}", "width": "{i_15}" }, "skeleton-slot": { "size": "{i_16}" } }, "variant": { "contentScale": { "contain": { "image": { "object-fit": "contain" } }, "fill": { "image": { "object-fit": "fill" } }, "fit": { "image": { "object-fit": "fit" } }, "fill_height": { "image": { "object-fit": "fill_height" } }, "fill_width": { "image": { "object-fit": "fill_width" } }, "none": { "image": { "object-fit": "none" } } }, "imageFocus": { "left": { "image": { "object-position": "left" } }, "right": { "image": { "object-position": "right" } }, "top": { "image": { "object-position": "top" } }, "bottom": { "image": { "object-position": "bottom" } } }, "_state": { "loading": { "container": { "background-color": "{i_17}" }, "image": { "opacity": "{i_18}" }, "skeleton-container": { "hidden": false } }, "empty": { "container": { "background-color": "{i_19}" }, "image": { "opacity": "{i_20}" }, "icon": { "hidden": false, "value": "ic_image" } }, "error": { "container": { "background-color": "{i_21}" }, "image": { "opacity": "{i_22}" }, "icon": { "hidden": false } } }, "_isLottieVisible": { "true": { "lottie": { "hidden": false }, "image": { "hidden": true }, "icon": { "hidden": true }, "skeleton-container": { "hidden": true } } } }, "combination": [{ "round": { "true": { "container": { "border-radius": "1000" }, "image": { "border-radius": "1000" } }, "false": { "container": { "border-radius": "1000" }, "image": { "border-radius": "1000" } } }, "square": { "false": { "container": { "border-radius": "0" }, "image": { "border-radius": "0" } } }, "horizontal_4_3": { "true": { "image": { "aspect-ratio": "{i_23}" }, "skeleton-container": { "aspect-ratio": "{i_24}" } }, "false": { "container": { "border-radius": "0" }, "image": { "border-radius": "0", "aspect-ratio": "{i_25}" }, "skeleton-container": { "aspect-ratio": "{i_26}" } } }, "horizontal_5_4": { "true": { "image": { "aspect-ratio": "{i_27}" }, "skeleton-container": { "aspect-ratio": "{i_28}" } }, "false": { "container": { "border-radius": "0" }, "image": { "border-radius": "0", "aspect-ratio": "{i_29}" }, "skeleton-container": { "aspect-ratio": "{i_30}" } } }, "horizontal_16_9": { "true": { "image": { "aspect-ratio": "{i_31}" }, "skeleton-container": { "aspect-ratio": "{i_32}" } }, "false": { "container": { "border-radius": "0" }, "image": { "border-radius": "0", "aspect-ratio": "{i_33}" }, "skeleton-container": { "aspect-ratio": "{i_34}" } } }, "vertical_4_5": { "true": { "image": { "aspect-ratio": "{i_35}" }, "skeleton-container": { "aspect-ratio": "{i_36}" } }, "false": { "container": { "border-radius": "0" }, "image": { "border-radius": "0", "aspect-ratio": "{i_37}" }, "skeleton-container": { "aspect-ratio": "{i_38}" } } }, "vertical_3_4": { "true": { "image": { "aspect-ratio": "{i_39}" }, "skeleton-container": { "aspect-ratio": "{i_40}" } }, "false": { "container": { "border-radius": "0" }, "image": { "border-radius": "0", "aspect-ratio": "{i_41}" }, "skeleton-container": { "aspect-ratio": "{i_42}" } } }, "vertical_9_16": { "true": { "image": { "aspect-ratio": "{i_43}" }, "skeleton-container": { "aspect-ratio": "{i_44}" } }, "false": { "container": { "border-radius": "0" }, "image": { "border-radius": "0", "aspect-ratio": "{i_45}" }, "skeleton-container": { "aspect-ratio": "{i_46}" } } }, "horizontal_2_75__1": { "true": { "container": { "border-radius": "0" }, "image": { "border-radius": "0", "aspect-ratio": "{i_47}" }, "skeleton-container": { "aspect-ratio": "{i_48}" } }, "false": { "container": { "border-radius": "0" }, "image": { "border-radius": "0", "aspect-ratio": "{i_49}" }, "skeleton-container": { "aspect-ratio": "{i_50}" } } }, "none": { "true": { "image": { "aspect-ratio": "" }, "skeleton-container": { "aspect-ratio": "" } }, "false": { "container": { "border-radius": "0" }, "image": { "border-radius": "0", "aspect-ratio": "" }, "skeleton-container": { "aspect-ratio": "" } } } }], "combination_config": [["aspectRatio", "roundedCorner"]], "api": { "config": { "aspectRatio": { "values": ["square", "round", "horizontal_4_3", "horizontal_5_4", "horizontal_16_9", "vertical_4_5", "vertical_3_4", "vertical_9_16", "horizontal_2_75__1", "none"], "doc_description": "It can be used to change the aspect ratio of Image. 'round' takes the '1:1' aspect ratio as default." }, "roundedCorner": { "values": [true, false], "doc_description": "Border radius on image. This is `True` by default for all aspect ratios except `aspectRatio='horizontal_2_75__1'`. `horizontal_2_75__1` doesn't accept rounded corner." }, "contentScale": { "values": ["cover", "contain", "fit", "fill", "fill_height", "fill_width", "none"] }, "imageFocus": { "values": ["center", "left", "right", "top", "bottom"], "doc_description": "It can be used for reposition of the Image." }, "_state": { "values": ["loaded", "loading", "empty", "error"] }, "_isLottieVisible": { "values": [false, true] } }, "data": { "container": { "_image.alt": { "type": "string", "name": "alt", "platform": "web", "function": true }, "width": { "type": "size", "name": "width", "platform": "ios" }, "height": { "type": "size", "name": "height", "platform": "ios" }, "border-radius": { "type": "size", "name": "borderRadius", "function": true, "required": false } }, "image": { "value": { "type": "image", "name": "src", "function": true }, "border-radius": { "type": "size", "name": "borderRadius", "function": true, "required": false }, "semantics": { "type": "string", "name": "semantics", "platform": "android", "required": false }, "coil_image_loader": { "type": "imageLoader", "name": "imageLoader", "required": false, "platform": "android" }, "title": { "type": "string", "name": "title", "platform": "web" } }, "lottie": { "value": { "type": "image", "name": "src", "function": true }, "attributes": { "type": "object", "name": "lottieAttributes", "platform": "android, ios", "required": false, "object": { "repeatCount": "number", "maxRetryCount": "number", "speed": "float", "isPlaying": "boolean", "reverseOnRepeat": "boolean", "clipSpec": "LottieClipSpec" } } } }, "events": { "image": { "onClick": "onClick", "onHover": { "name": "onHover", "platform": "web" }, "onError": "onError", "onLoad": "onLoad", "onEmpty": "onEmpty", "onLoading": "onLoading" } }, "children": { "provider-slot": { "name": "provider", "accepts": ["any"], "max": 1 }, "skeleton-slot": { "name": "skeleton", "accepts": ["jds_skeleton"], "max": 1 } }, "a11y": { "image": { "properties": { "role": { "value": "img" }, "aria-label": { "name": "ariaLabel" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" } } } } } };

const sdl$1c = { "metadata": { "version": "1.0.0", "id": "skeleton-1.0.0", "name": "JDSSkeleton", "layerName": "jds_skeleton" }, "hierarchy": { "container": ["skeletonLoader"] }, "base": { "container": { "hidden": false, "background-color": "{s_0}", "show": true, "overflow": "hidden" }, "skeletonLoader": { "primary-color": "{s_1}", "secondary-color": "{s_2}", "hidden": true } }, "variant": { "shape": { "circle": { "container": { "aspect-ratio": "1", "border-radius": "{s_3}" } }, "heading": { "container": { "height": "{s_4}", "border-radius": "{s_5}" } }, "paragraph": { "container": { "border-radius": "{s_6}", "height": "{s_7}" } }, "rectangle": { "container": { "border-radius": "{s_8}", "aspect-ratio": "1.77" } }, "square": { "container": { "border-radius": "{s_9}", "aspect-ratio": "1" } }, "custom": { "container": { "width": "{s_10}", "height": "{s_11}" } } }, "animated": { "true": { "skeletonLoader": { "hidden": false } } } }, "combination": [{}], "combination_config": [[]], "api": { "data": { "container": { "width": { "type": "size", "name": "width", "function": true, "doc_description": "It can be used to determine width of all shapes od Skeleton." } } }, "config": { "shape": { "values": ["circle", "heading", "paragraph", "rectangle", "square", "custom"], "doc_description": "It is used to determine the shape of Skeleton." }, "animated": { "values": [false, true], "doc_description": "It can be used to add animantionto Skeleton." } }, "a11y": { "container": { "name": "skeleton", "properties": { "aria-busy": { "name": "_ariaBusy", "prop": "animated" }, "aria-label": { "name": "_ariaLabel", "platform": "android" } } } } } };

const withLogic$1f = (Component) => (props) => {
  if (props.shape === "custom" && !props.__noCustomWarn__) {
    console.warn("shape=custom is an internal variant. Please do not use it");
  }
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props
      },
      width: props.width
    }
  );
};

const Component$1h = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1c;
  const { shape = "circle", animated = false, _ariaBusy = props.animated?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ shape, animated, _ariaBusy, ...rest }, componentTag },
    "JDSSkeleton",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const Skeleton = withLogic$1f(Component$1h);
Skeleton.displayName = "Skeleton";
Skeleton.slotName = "jds_skeleton";

const legacyAspectRatios = [
  "1:1",
  "round",
  "4:3",
  "5:4",
  "16:9",
  "4:5",
  "3:4",
  "9:16",
  "2.75:1"
];
const PROP_MAP$j = (props) => {
  if (legacyAspectRatios.includes(props.aspectRatio)) {
    console.warn(
      "these values for aspect ratios are deprectaed",
      legacyAspectRatios
    );
  }
  return {
    aspectRatio: {
      variations: {
        "1:1": {
          aspectRatio: "square"
        },
        "4:3": {
          aspectRatio: "horizontal_4_3"
        },
        "5:4": {
          aspectRatio: "horizontal_5_4"
        },
        "16:9": {
          aspectRatio: "horizontal_16_9"
        },
        "4:5": {
          aspectRatio: "vertical_4_5"
        },
        "3:4": {
          aspectRatio: "vertical_3_4"
        },
        "9:16": {
          aspectRatio: "vertical_9_16"
        },
        "2.75:1": {
          aspectRatio: "horizontal_2_75__1"
        }
      }
    },
    src: {
      properties: {
        src: props.src
      }
    },
    alt: {
      properties: {
        semantics: props.alt
      }
    }
  };
};
const withLogic$1e = (Component) => (userProps) => {
  const props = modifyProps(userProps, PROP_MAP$j);
  const { src, onLoad, onError, ...rest } = props;
  const [imageStates, setImageStates] = useState({
    error: false,
    loaded: false
  });
  const { error, loaded } = imageStates;
  const hasSrc = Boolean(src);
  const isBroken = hasSrc && loaded && error;
  const handleLoad = (e) => {
    setImageStates({ error: false, loaded: true });
    onLoad?.(e);
  };
  const handleError = (e) => {
    if (!imageStates.error) {
      setImageStates({ error: true, loaded: true });
      onError?.(e);
    }
  };
  const provider = () => {
    if (rest.provider) {
      const provider2 = rest.provider;
      return cloneElement(rest?.provider, {
        onLoad: (e) => {
          handleLoad(e);
          provider2?.onLoad?.(e);
        },
        onError: (e) => {
          handleError(e);
          provider2?.onError?.(e);
        },
        src: rest.provider?.props?.src || src
      });
    }
    return null;
  };
  const currentState = !hasSrc ? "empty" : isBroken ? "error" : loaded ? "loaded" : "loading";
  const formatImageName = (imagePath = props.src || "") => {
    const parts = imagePath.split("/");
    const imageName = parts.length > 0 ? parts[parts.length - 1] : "";
    if (imageName) {
      const formattedName = imageName.replace(/\..*$/, "").replace(/([A-Z])/g, " $1").toLowerCase() + " image";
      return formattedName;
    }
    return "Image name not found";
  };
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...rest,
        skeleton: /* @__PURE__ */ jsx(
          Skeleton,
          {
            shape: "custom",
            animated: true,
            width: "100%",
            __noCustomWarn__: true
          }
        ),
        _state: currentState,
        _loaderWidth: "100%",
        title: props.title || formatImageName(props.src),
        onLoad: handleLoad,
        onError: handleError,
        provider: provider() ?? void 0,
        _hasProvider: Boolean(rest.provider && currentState === "loaded"),
        src: rest?.provider?.props?.src || src || {},
        ariaLabel: props.ariaLabel || formatImageName(props.src)
      }
    }
  );
};

const Component$1g = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1d;
  const { aspectRatio = "square", roundedCorner = true, contentScale = "cover", imageFocus = "center", onClick = noop, onHover = noop, onError = noop, onLoad = noop, onEmpty = noop, onLoading = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ aspectRatio, roundedCorner, contentScale, imageFocus, onClick, onHover, onError, onLoad, onEmpty, onLoading, ...rest }, componentTag },
    "JDSImage",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const Image = withLogic$1e(Component$1g);
Image.displayName = "Image";
Image.slotName = "jds_image";

const sdl$1b = { "metadata": { "version": "1.0.0", "id": "input-1.0.0", "name": "JDSInput", "layerName": "jds_input" }, "hierarchy": { "input": [] }, "base": { "input": { "type": "text", "text-align": "{i_0}", "placeholder-color": "{i_1}", "placeholder-font-family": "{i_2}", "placeholder-font-size": "{i_3}", "placeholder-line-height": "{i_5}", "placeholder-font-weight": "{i_4}", "input-color": "{i_7}", "input-font-family": "{i_8}", "input-font-size": "{i_9}", "input-line-height": "{i_11}", "input-font-weight": "{i_10}", "cursor-color": "{i_13}", "disabled": false, "width": "{i_14}" } }, "variant": { "disabled": { "true": { "input": { "opacity": "{i_15}", "disabled": true } } }, "type": { "email": { "input": { "type": "email" } }, "number": { "input": { "type": "number" } }, "password": { "input": { "type": "password" } }, "textarea": { "input": { "type": "textarea" } }, "pin": { "input": { "type": "pin" } }, "phone": { "input": { "type": "phone" } } }, "color": { "primary_80": { "input": { "input-color": "{i_27}" } }, "primary_70": { "input": { "input-color": "{i_28}" } }, "primary_60": { "input": { "input-color": "{i_29}" } }, "primary_50": { "input": { "input-color": "{i_30}" } }, "primary_40": { "input": { "input-color": "{i_31}" } }, "primary_30": { "input": { "input-color": "{i_32}" } }, "primary_20": { "input": { "input-color": "{i_33}" } }, "primary_inverse": { "input": { "input-color": "{i_34}" } }, "primary_background": { "input": { "input-color": "{i_35}" } }, "primary_grey_100": { "input": { "input-color": "{i_36}" } }, "primary_grey_80": { "input": { "input-color": "{i_37}" } }, "primary_grey_60": { "input": { "input-color": "{i_38}" } }, "primary_grey_40": { "input": { "input-color": "{i_39}" } }, "primary_grey_20": { "input": { "input-color": "{i_40}" } }, "secondary_80": { "input": { "input-color": "{i_41}" } }, "secondary_70": { "input": { "input-color": "{i_42}" } }, "secondary_60": { "input": { "input-color": "{i_43}" } }, "secondary_50": { "input": { "input-color": "{i_44}" } }, "secondary_40": { "input": { "input-color": "{i_45}" } }, "secondary_30": { "input": { "input-color": "{i_46}" } }, "secondary_20": { "input": { "input-color": "{i_47}" } }, "secondary_inverse": { "input": { "input-color": "{i_48}" } }, "secondary_background": { "input": { "input-color": "{i_49}" } }, "secondary_grey_100": { "input": { "input-color": "{i_50}" } }, "secondary_grey_80": { "input": { "input-color": "{i_51}" } }, "secondary_grey_60": { "input": { "input-color": "{i_52}" } }, "secondary_grey_40": { "input": { "input-color": "{i_53}" } }, "secondary_grey_20": { "input": { "input-color": "{i_54}" } }, "sparkle_80": { "input": { "input-color": "{i_55}" } }, "sparkle_70": { "input": { "input-color": "{i_56}" } }, "sparkle_60": { "input": { "input-color": "{i_57}" } }, "sparkle_50": { "input": { "input-color": "{i_58}" } }, "sparkle_40": { "input": { "input-color": "{i_59}" } }, "sparkle_30": { "input": { "input-color": "{i_60}" } }, "sparkle_20": { "input": { "input-color": "{i_61}" } }, "sparkle_inverse": { "input": { "input-color": "{i_62}" } }, "sparkle_background": { "input": { "input-color": "{i_63}" } }, "sparkle_grey_100": { "input": { "input-color": "{i_64}" } }, "sparkle_grey_80": { "input": { "input-color": "{i_65}" } }, "sparkle_grey_60": { "input": { "input-color": "{i_66}" } }, "sparkle_grey_40": { "input": { "input-color": "{i_67}" } }, "sparkle_grey_20": { "input": { "input-color": "{i_68}" } }, "feedback_error_80": { "input": { "input-color": "{i_69}" } }, "feedback_error_50": { "input": { "input-color": "{i_70}" } }, "feedback_error_20": { "input": { "input-color": "{i_71}" } }, "feedback_warning_80": { "input": { "input-color": "{i_72}" } }, "feedback_warning_50": { "input": { "input-color": "{i_73}" } }, "feedback_warning_20": { "input": { "input-color": "{i_74}" } }, "feedback_success_80": { "input": { "input-color": "{i_75}" } }, "feedback_success_50": { "input": { "input-color": "{i_76}" } }, "feedback_success_20": { "input": { "input-color": "{i_77}" } }, "white": { "input": { "input-color": "{i_78}" } }, "black": { "input": { "input-color": "{i_79}" } }, "transparent": { "input": { "input-color": "{i_80}" } } }, "textAlign": { "center": { "input": { "text-align": "{i_16}" } }, "end": { "input": { "text-align": "{i_17}" } }, "justify": { "input": { "text-align": "{i_18}" } } }, "textSize": { "large": { "input": { "placeholder-font-family": "{i_19}", "placeholder-font-size": "{i_20}", "placeholder-line-height": "{i_21}", "placeholder-font-weight": "{i_22}", "input-font-family": "{i_23}", "input-font-size": "{i_24}", "input-line-height": "{i_25}", "input-font-weight": "{i_26}" } } }, "readOnly": { "true": { "container": { "disabled": true }, "input": { "disabled": true } } } }, "api": { "config": { "disabled": { "values": [false, true], "doc_description": "It can be used to enable or disable Input." }, "color": { "values": ["primary_grey_100", "primary_80", "primary_70", "primary_60", "primary_50", "primary_40", "primary_30", "primary_20", "primary_inverse", "primary_background", "primary_grey_80", "primary_grey_60", "primary_grey_40", "primary_grey_20", "secondary_80", "secondary_70", "secondary_60", "secondary_50", "secondary_40", "secondary_30", "secondary_20", "secondary_inverse", "secondary_background", "secondary_grey_100", "secondary_grey_80", "secondary_grey_60", "secondary_grey_40", "secondary_grey_20", "sparkle_80", "sparkle_70", "sparkle_60", "sparkle_50", "sparkle_40", "sparkle_30", "sparkle_20", "sparkle_inverse", "sparkle_background", "sparkle_grey_100", "sparkle_grey_80", "sparkle_grey_60", "sparkle_grey_40", "sparkle_grey_20", "feedback_error_80", "feedback_error_50", "feedback_error_20", "feedback_warning_80", "feedback_warning_50", "feedback_warning_20", "feedback_success_80", "feedback_success_50", "feedback_success_20", "white", "black", "transparent"], "doc_description": "It can be used to add font-color to Input text." }, "type": { "values": ["text", "email", "number", "password", "textarea", "pin", "phone"], "doc_description": "This is used to specify the type of input." }, "textAlign": { "values": ["start", "center", "end", "justify"], "doc_description": "It can be used to align text of the Input." }, "textSize": { "values": ["small", "large"] }, "readOnly": { "values": [false, true] } }, "data": { "input": { "id": { "type": "string", "name": "id", "platform": "web" }, "autocomplete": { "type": "string", "name": "autocomplete", "platform": "web" }, "value": { "type": "string", "name": "value" }, "placeholder": { "type": "string", "name": "placeholder" }, "max-length": { "type": "number", "name": "maxLength" }, "pattern": { "type": "string", "name": "pattern" }, "rows": { "type": "number", "name": "rows" }, "name": { "type": "string", "name": "name" }, "min": { "type": "number", "name": "min" }, "placeholder-letter-spacing": { "type": "double", "name": "letterSpacing", "default": -0.5 }, "input-letter-spacing": { "type": "double", "name": "letterSpacing", "default": -0.5 }, "autoFocus": { "type": "boolean", "name": "autoFocus", "platform": "web,ios" }, "max": { "type": "number", "name": "max" }, "required": { "type": "boolean", "name": "required" }, "focusRequester": { "type": "focusRequester", "name": "focusRequester", "platform": "android" }, "imeAction": { "type": "imeAction", "name": "imeAction", "platform": "android" }, "capitalization": { "type": "keyboardCapitalization", "name": "capitalization", "platform": "android" }, "semantics": { "type": "string", "name": "semantics", "platform": "android" } } }, "events": { "input": { "onFocus": "onFocus", "onBlur": "onBlur", "onChange": "onChange", "onSubmit": "onSubmit", "onKeyup": { "name": "onKeyup", "platform": "web" }, "onKeydown": { "name": "onKeydown", "platform": "web" }, "onPaste": "onPaste", "onInvalid": "onInvalid" } }, "a11y": { "input": { "properties": { "aria-label": { "name": "ariaLabel" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" }, "aria-invalid": { "name": "ariaInvalid" }, "aria-placeholder": { "name": "ariaPlaceholder", "prop": "placeholder" }, "aria-required": { "name": "ariaRequired", "prop": "required" } } } } } };

const withLogic$1d = (Component) => (props) => {
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props
      }
    }
  );
};

const Component$1f = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1b;
  const { disabled = false, color = "primary_grey_100", type = "text", textAlign = "start", textSize = "small", readOnly = false, onFocus = noop, onBlur = noop, onChange = noop, onSubmit = noop, onKeyup = noop, onPaste = noop, onInvalid = noop, ariaPlaceholder = props.placeholder?.toString(), ariaRequired = props.required?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ disabled, color, type, textAlign, textSize, readOnly, onFocus, onBlur, onChange, onSubmit, onKeyup, onPaste, onInvalid, ariaPlaceholder, ariaRequired, ...rest }, componentTag },
    "JDSInput",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const Input = withLogic$1d(Component$1f);
Input.displayName = "Input";
Input.slotName = "jds_input";

const sdl$1a = { "metadata": { "version": "1.0.0", "id": "checkbox-1.0.0", "name": "JDSCheckbox", "layerName": "jds_checkbox", "description": "Checkboxes are used within an interface to allow the user to select between one or more options." }, "hierarchy": { "vertical-container": [{ "horizontal-container": [{ "control-container": ["control-icon"] }, "label-jds-text"] }, "jds_feedback_block", "helper-jds-text"] }, "base": { "vertical-container": { "hidden": false, "flex-direction": "{c_0}", "justify-content": "{c_1}", "align-items": "{c_2}", "gap": "{c_3}", "opacity": "{c_38}" }, "horizontal-container": { "hidden": false, "flex-direction": "{c_4}", "justify-content": "{c_5}", "align-items": "{c_6}", "gap": "{c_7}", "behavior": { "hover": {}, "active": {}, "focus": {} } }, "control-container": { "hidden": false, "min-width": "{c_8}", "min-height": "{c_9}", "flex-direction": "{c_10}", "justify-content": "{c_11}", "align-items": "{c_12}", "background-color": "{c_13}", "border-radius": "{c_14}", "border-width": "{c_15}", "border-color": "{c_16}", "show": true, "behavior": { "hover": { "border-color": "{c_17}" }, "active": { "border-color": "{c_18}" }, "focus": { "border-width": "{c_19}", "box-sizing": "content-box", "border-color": "{c_20}" } } }, "control-icon": { "hidden": true, "size": "{c_21}" }, "jds_feedback_block": { "hidden": true, "state": "none", "size": "l" }, "label-jds-text": { "font-family": "{bodyS}", "color": "{primaryGrey80}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": false, "text-align": "{c_22}", "behavior": { "hover": { "color": "{primaryGrey100}" }, "focus": { "color": "{primaryGrey100}" } } }, "helper-jds-text": { "font-family": "{bodyS}", "color": "{primaryGrey80}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": false } }, "variant": { "size": { "small": { "control-container": { "min-width": "{c_23}", "min-height": "{c_24}" }, "vertical-container": { "gap": "{c_25}" }, "control-icon": { "size": "{c_26}" }, "jds_feedback_block": { "size": "s" }, "label-jds-text": { "font-family": "{bodyXs}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}" }, "helper-jds-text": { "font-family": "{bodyXs}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}" } } }, "checked": { "true": { "control-container": { "background-color": "{c_28}", "border-width": 0, "behavior": { "hover": { "background-color": "{c_29}" }, "active": { "background-color": "{c_30}" } } }, "control-icon": { "hidden": false, "value": "{c_27}", "color": "{c_31}" }, "label-jds-text": { "color": "{primaryGrey100}" } } }, "indeterminate": { "true": { "control-container": { "background-color": "{c_33}", "border-width": 0, "behavior": { "hover": { "background-color": "{c_34}" }, "focus": { "background-color": "{c_35}" } } }, "control-icon": { "hidden": false, "value": "{c_32}", "color": "{c_36}" }, "label-jds-text": { "color": "{primaryGrey100}" } } }, "disabled": { "true": { "vertical-container": { "opacity": "{c_37}" }, "horizontal-container": { "disabled": true } } }, "state": { "success": { "jds_feedback_block": { "hidden": false } }, "error": { "jds_feedback_block": { "hidden": false } }, "warning": { "jds_feedback_block": { "hidden": false } } } }, "api": { "config": { "checked": { "values": [false, true], "doc_description": "It can be used to programmatically make input active/inactive." }, "indeterminate": { "values": [false, true] }, "size": { "values": ["medium", "small"], "doc_description": "It can be used control the size of Checkbox." }, "disabled": { "values": [false, true], "doc_description": "It can be used to enable or disable Checkbox." } }, "data": { "jds_feedback_block": { "stateText": { "type": "string", "name": "stateText", "doc_description": "It displays message with respect to its [state] selected." }, "state": { "type": "JDSFeedbackBlock.state", "name": "state", "doc_description": "It can be used to choose between states i.e. 'success','warning','error','none'." } }, "label-jds-text": { "value": { "type": "string", "name": "label", "doc_description": "It displays label of Checkbox." } }, "helper-jds-text": { "value": { "type": "string", "name": "helperText", "doc_description": "It displays helper text of Checkbox." } } }, "events": { "horizontal-container": { "onClick": "onClick" } }, "a11y": { "horizontal-container": { "properties": { "role": { "value": "checkbox" }, "aria-label": { "name": "ariaLabel", "prop": "label" }, "aria-checked": { "name": "_ariaChecked" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" } } } } } };

function checkInputMask(event, value, textMask, readonly, pattern) {
  if (readonly || !textMask) {
    return "noop";
  }
  if (!textMask && !pattern) {
    return "noop";
  }
  if (["Tab", "Enter", "ArrowLeft", "ArrowRight"].indexOf(event.key) > -1)
    return "noop";
  const prevValue = value || "";
  if (textMask && typeof prevValue === "string" || pattern) {
    if (event.code === "Backspace") {
      return "back";
    }
    const regex = textMask ? new RegExp(getTextMaskValue(textMask)) : pattern ? new RegExp(pattern) : void 0;
    if (!regex?.test(event.key) || textMask && (event.currentTarget.value?.length || 0) >= textMask.length) {
      return "prevent";
    }
  }
  return "noop";
}
const maskCharToRegexMap = {
  "#": "\\d",
  "&": "[A-Za-z]",
  "*": "[A-Za-z\\d]"
};
const getTextMask = (textMask) => {
  if (!textMask)
    return void 0;
  if (typeof textMask === "string")
    return textMask;
  if (typeof textMask[0] === "object") {
    return new RegExp(textMask[0]).source;
  }
  return textMask[0];
};
const getTextMaskValue = (textMask) => {
  return textMask.split("").map((t) => `(${maskCharToRegexMap[t] || t})`).join("|");
};

const stateValues = {
  error: { state: "error", stateText: "errorText" },
  success: { state: "success", stateText: "successText" },
  warning: { state: "warning", stateText: "warningText" },
  required: { state: "error", stateText: "requiredText" }
};
const injectAutofillCSS = () => {
  const style = document.createElement("style");
  style.textContent = `
    input:-webkit-autofill {
      animation-name: autofill-start;
      animation-duration: 0.01s;
      animation-iteration-count: 1;
    }
    @keyframes autofill-start { from {} to {} }
  `;
  document.head.appendChild(style);
};
const useFocusedLabel = (props, ref) => {
  const [focused, setFocused] = useState(false);
  const [inputFocused, setInputFocused] = useState(false);
  const labelRef = ref?.querySelector(".j-JDSInputField-input_label-jds-text") || ref?.querySelector(".j-JDSTextarea-input_label-jds-text");
  useEffect(() => {
    injectAutofillCSS();
    const input = ref?.querySelector("input");
    const onAutoFill = (e) => {
      if (e.animationName === "autofill-start") {
        labelRef?.classList?.add("position-top");
        setFocused(true);
      }
    };
    input?.addEventListener("animationstart", onAutoFill);
    return () => input?.removeEventListener("animationstart", onAutoFill);
  }, [ref]);
  useEffect(() => {
    if (props.placeholder || props.value) {
      labelRef?.classList?.add("position-top");
    }
  }, [props.placeholder, labelRef, props.value]);
  return {
    onChange: (ev) => {
      setFocused(true);
      labelRef?.classList.add("position-top");
      props.onChange?.(ev);
    },
    onBlur: (ev) => {
      if (!(ev.target.value || props.placeholder)) {
        setFocused(false);
        labelRef?.classList.remove("position-top");
      }
      props.onBlur?.(ev);
      setInputFocused(false);
    },
    onFocus: (ev) => {
      setFocused(true);
      setInputFocused(true);
      props.onFocus?.(ev);
      labelRef?.classList.add("position-top");
    },
    focused: Boolean(props.value) || Boolean(props.placeholder) || focused,
    _inputFocused: inputFocused
  };
};
const useInputState = (state, required, onInvalid, stateConfig = {}, stateText) => {
  const [inputState, setInputState] = useState("none");
  useEffect(() => {
    if (!required) {
      setInputState(state || "none");
    }
  }, [state, required]);
  const stateKey = stateValues?.[inputState || "none"]?.state;
  const stateTextKey = stateValues[inputState]?.stateText;
  return {
    onInvalid: (ev) => {
      onInvalid?.(ev);
      if (required) {
        setInputState("required");
      } else {
        setInputState("error");
      }
    },
    inputState: state || stateKey,
    stateText: stateText || stateConfig?.[stateTextKey]
  };
};
const getRequiredLabel = (label = "", required) => {
  return label + (required ? " *" : "");
};
const getIcon = (icon, onClick) => {
  if (!icon)
    return void 0;
  if (typeof icon === "string")
    return /* @__PURE__ */ jsx(Icon, { onClick, ic: icon, color: "grey-80" });
  if (typeof icon === "object" && icon.component === "Icon")
    return /* @__PURE__ */ jsx(Icon, { onClick, ...icon.props, color: "grey-80" });
  if (icon.type?.displayName)
    return cloneElement(icon, { color: "grey-80" });
  if (icon.props?.ic)
    return /* @__PURE__ */ jsx(
      Icon,
      {
        onClick,
        ic: icon.props.ic,
        color: "grey-80",
        ...icon.props
      }
    );
  return /* @__PURE__ */ jsx(Icon, { onClick, ic: icon, color: "grey-80" });
};
const getPrefixWidth = (element) => {
  const prefixContainer = element?.querySelector(
    'div[data-testid="JDSInputField-prefix-container"]'
  );
  const { width } = prefixContainer?.getBoundingClientRect() || {};
  return width || 0;
};
const withLogic$1c = (Component) => forwardRef(
  (props, ref) => {
    const { rootRef, element } = useRootRef();
    const { focused, _inputFocused, ...rest } = useFocusedLabel(
      props,
      element
    );
    const { inputState, onInvalid, stateText } = useInputState(
      props.state,
      props.required,
      props.onInvalid,
      props.stateConfig
    );
    const handlePrefixClick = (event) => {
      props.onPrefixClick?.(event);
    };
    const handleSuffixClick = (event) => {
      props.onSuffixClick?.(event);
    };
    return /* @__PURE__ */ jsx(
      Component,
      {
        ...{
          ...props,
          ...rest,
          rootRef,
          prefix: getIcon(props.prefix, handlePrefixClick),
          suffix: getIcon(props.suffix, handleSuffixClick),
          onInvalid,
          _labelOffset: getPrefixWidth(element) + 8,
          onKeydown: (ev) => {
            const allowedCharsForNumber = [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "e",
              "-",
              "+",
              "."
            ];
            const allowedCharsForPhone = [
              "1",
              "2",
              "3",
              "4",
              "5",
              "6",
              "7",
              "8",
              "9",
              "0",
              "(",
              ")",
              "-",
              " ",
              "+"
            ];
            if (["number", "phone"].includes(props.type)) {
              if (["Backspace", "Enter", "ArrowLeft", "ArrowRight"].includes(
                ev.key
              )) {
                return;
              }
              const allowedChars = props.type === "number" ? allowedCharsForNumber : allowedCharsForPhone;
              !allowedChars.includes(ev.key) && ev.preventDefault();
            }
            if (props.pattern && typeof props.value === "string" || props.textMask) {
              const action = checkInputMask(
                ev,
                props.value,
                getTextMask(props.textMask),
                props.readonly,
                props.pattern
              );
              if (action === "prevent" || action === "back") {
                ev.preventDefault();
                if (action === "back") {
                  const currentValue = (ev.currentTarget.value || "")?.slice(
                    0,
                    -1
                  );
                  const tracker = Object.getOwnPropertyDescriptor(
                    window.HTMLInputElement.prototype,
                    "value"
                  )?.set;
                  tracker?.call(ev.target, currentValue);
                  const event = {
                    ...ev,
                    target: {
                      ...ev.target,
                      value: currentValue
                    }
                  };
                  props.onChange?.(event);
                }
                return;
              }
            }
            props.onKeyDown?.(ev);
          },
          label: getRequiredLabel(props.label, props.required),
          _inputFocus: _inputFocused,
          state: inputState,
          stateText: props.stateText || stateText,
          _hasPrefix: Boolean(props.prefix),
          _hasSuffix: Boolean(props.suffix),
          _labelFocus: focused,
          layerRefs: { input: ref }
        }
      }
    );
  }
);

const withLogic$1b = (Component) => (props) => {
  const { stateText, inputState } = useInputState(
    props.state,
    false,
    void 0,
    props.stateConfig,
    props.stateText
  );
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        _ariaChecked: props.indeterminate ? "mixed" : props.checked === true ? "true" : "false",
        _hasHelper: Boolean(props.helperText),
        state: inputState,
        stateText
      }
    }
  );
};

const Component$1e = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1a;
  const { checked = false, indeterminate = false, size = "medium", disabled = false, onClick = noop, ariaLabel = props.label?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ checked, indeterminate, size, disabled, onClick, ariaLabel, ...rest }, componentTag },
    "JDSCheckbox",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const InputCheckbox = withLogic$1b(Component$1e);
InputCheckbox.displayName = "InputCheckbox";
InputCheckbox.slotName = "jds_checkbox";

const sdl$19 = { "metadata": { "version": "1.0.0", "id": "Input-code-item-1.0.0", "name": "JDSInputCodeItem", "layerName": "jds_input_code_item", "internal": true }, "hierarchy": { "input-container": ["jds_input", { "active-line-container": ["feedback-container"] }] }, "base": { "input-container": { "flex-direction": "{i_0}", "justify-content": "{i_1}", "align-items": "{i_2}", "gap": "{i_3}", "width": "{i_4}", "behavior": { "hover": {} } }, "jds_input": { "width": "{i_5}", "type": "phone", "textAlign": "center", "textSize": "large", "maxLength": 1 }, "active-line-container": { "flex-direction": "{i_6}", "justify-content": "{i_7}", "align-items": "{i_8}", "width": "{i_9}", "padding-top": "{i_10}", "padding-bottom": "{i_11}" }, "feedback-container": { "width": "{i_12}", "height": "{i_13}", "background-color": "{i_14}", "border-radius": "{i_15}", "show": true, "behavior": { "focus": { "background-color": "{i_17}" }, "active": { "background-color": "{i_18}" } } } }, "variant": { "state": { "success": { "feedback-container": { "background-color": "{i_19}" } }, "error": { "feedback-container": { "background-color": "{i_20}" } }, "warning": { "feedback-container": { "background-color": "{i_21}" } } }, "disabled": { "true": { "jds_input": { "disabled": true } } }, "secureText": { "true": { "jds_input": { "type": "pin" } } }, "autoComplete": { "true": { "jds_input": { "autoComplete": "true" } } } }, "combination": [{ "none": { "true": { "feedback-container": { "background-color": "{i_22}" } } } }], "combination_config": [["state", "_inputFocus"]], "api": { "config": { "autoComplete": { "values": [false, true], "platform": "web" }, "secureText": { "values": [false, true] }, "state": { "type": "JDSFeedbackBlock.state", "values": ["none", "success", "error", "warning"] }, "_inputFocus": { "values": [false, true] }, "disabled": { "values": [false, true] } }, "data": { "jds_input": { "value": { "type": "string", "name": "value" }, "placeholder": { "type": "string", "name": "placeholder" }, "autocomplete": { "type": "string", "name": "autocomplete", "platform": "web" }, "required": { "type": "boolean", "name": "required" }, "focusRequester": { "type": "focusRequester", "name": "focusRequester", "platform": "android" } } }, "events": { "jds_input": { "onFocus": "onFocus", "onBlur": "onBlur", "onChange": "onChange", "onSubmit": "onSubmit", "onKeydown": { "name": "onKeydown", "platform": "web" }, "onPaste": "onPaste", "onInvalid": "onInvalid" } }, "a11y": { "jds_input": { "properties": { "ariaLabel": { "name": "ariaLabel", "platform": "android" } } } } } };

const withLogic$1a = (Component) => (props) => {
  const [inputFocus, setInputFocus] = useState(false);
  const handleFocus = useCallback(
    (ev) => {
      setInputFocus(true);
      if (props.onFocus) {
        props.onFocus(ev);
      }
    },
    [props.onFocus]
  );
  const handleBlur = useCallback(
    (ev) => {
      setInputFocus(false);
      if (props.onBlur) {
        props.onBlur(ev);
      }
    },
    [props.onBlur]
  );
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...props,
      _inputFocus: inputFocus,
      onFocus: handleFocus,
      onBlur: handleBlur
    }
  );
};

const Component$1d = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$19;
  const { autoComplete = false, secureText = false, state = "undefined", disabled = false, onFocus = noop, onBlur = noop, onChange = noop, onSubmit = noop, onPaste = noop, onInvalid = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ autoComplete, secureText, state, disabled, onFocus, onBlur, onChange, onSubmit, onPaste, onInvalid, ...rest }, componentTag },
    "JDSInputCodeItem",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const InputCodeItem = withLogic$1a(Component$1d);
InputCodeItem.displayName = "InputCodeItem";
InputCodeItem.slotName = "jds_input_code_item";

const sdl$18 = { "metadata": { "version": "1.0.0", "id": "input_phone_dropdown-1.0.0", "name": "JDSInputPhoneDropdown", "layerName": "jds_input_phone_dropdown" }, "hierarchy": { "vertical-container": [{ "container": [{ "prefix-jds-icon-container": ["prefix-jds-icon"] }, "country_code-jds-text", { "chevron-jds-icon-container": ["chevron-jds-icon"] }] }, "jds_menu_block"] }, "base": { "vertical-container": { "flex-direction": "{flexDirection.column}" }, "container": { "flex-direction": "{flexDirection.row}", "gap": "{xxs}" }, "jds_menu_block": { "open": false }, "prefix-jds-icon": { "size": "{m}", "color": "{primary50}" }, "prefix-jds-icon-container": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{m}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}" }, "country_code-jds-text": { "font-family": "{bodyS}", "color": "{primaryGrey80}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "max-lines": 1, "maxLines": 1 }, "chevron-jds-icon": { "size": "{m}", "color": "{primaryGrey80}", "value": "ic_chevron_down", "ic": "ic_chevron_down" }, "chevron-jds-icon-container": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{m}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}", "ic": "ic_chevron_down" } }, "variant": { "open": { "true": { "jds_menu_block": { "open": true }, "chevron-jds-icon": { "value": "ic_chevron_up", "ic": "ic_chevron_up" }, "chevron-jds-icon-container": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{m}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}", "ic": "ic_chevron_up" } } }, "disabled": { "true": { "container": { "disabled": true } } } }, "combination": [], "combination_config": [], "api": { "config": { "open": { "values": [false, true] }, "disabled": { "values": [false, true] } }, "data": { "jds_menu_block": { "items": { "type": "list", "name": "items", "object": { "type": "JDSMenuBlockItem.type", "label": "string", "value": "string", "prefix": "icon", "suffix": "icon", "disabled": "boolean", "selected": "boolean" } }, "selectedIndex": { "type": "number", "name": "selectedIndex" }, "offsetX": { "type": "size", "name": "_offsetX" }, "offsetY": { "type": "size", "name": "_offsetY" }, "minWidth": { "type": "size", "name": "_minWidth" }, "maxWidth": { "type": "size", "name": "_maxWidth" }, "maxHeight": { "type": "size", "name": "_maxHeight" } }, "country_code-jds-text": { "value": { "type": "string", "name": "countryCode" }, "color": { "type": "JDSText.color", "name": "countryCodeColor" } }, "prefix-jds-icon": { "value": { "type": "icon", "name": "countryFlag" }, "ic": { "type": "icon", "name": "countryFlag" } } }, "events": { "container": { "onClick": "onOpen", "onAppear": { "name": "_onAppear", "platform": "ios" } }, "jds_menu_block": { "onSelect": { "name": "onSelect", "object": { "index": "number", "value": "string" } }, "onClose": "onClose" } }, "a11y": { "container": { "properties": { "role": { "value": "combobox" }, "aria-label": { "name": "ariaLabel", "value": "Select Country Code" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" }, "aria-expanded": { "name": "_ariaExpanded", "prop": "open" }, "aria-controls": { "name": "ariaControls", "value": "container" } } }, "jds_menu_block": { "name": "items", "repeating": { "ariaLabel": "itemAriaLabel", "ariaDescribedby": { "name": "itemAriaDescribedby", "platform": "web,ios" } } } } } };

const setPositions = (anchorEl, menuBlockref, stringMaxHeight) => {
  let menuItemPositionY = 0;
  let menuItemPositionX;
  let maxCalculatedHeight = 0;
  if (anchorEl && window) {
    const {
      y: anchorTop,
      height: anchorHeight,
      x: anchorLeft,
      width: anchorWidth
    } = anchorEl.getBoundingClientRect();
    const { innerWidth: overlayWidth, innerHeight: overlayHeight } = window;
    let maxHeight = parseInt(stringMaxHeight || "");
    maxHeight = isNaN(maxHeight) ? overlayHeight - anchorTop : maxHeight;
    const { scrollHeight: menuHeight, scrollWidth: menuWidth } = menuBlockref || {
      scrollWidth: 0,
      scrollHeight: maxHeight || 0
    };
    const sectionBelowAnchor = overlayHeight - (anchorTop + anchorHeight);
    const sectionAboveAnchor = anchorTop;
    if (menuBlockref && sectionBelowAnchor <= (maxHeight || menuHeight) && sectionAboveAnchor > sectionBelowAnchor) {
      menuItemPositionY = anchorTop - menuHeight;
      if (menuItemPositionY < 0) {
        maxCalculatedHeight = anchorTop;
        menuItemPositionY = maxHeight ? anchorTop - maxHeight : menuHeight < anchorTop ? anchorTop - menuHeight : 0;
      }
    } else {
      maxCalculatedHeight = sectionBelowAnchor;
      menuItemPositionY = anchorTop + anchorHeight;
    }
    const availableHeight = sectionBelowAnchor > 0 ? sectionBelowAnchor : overlayHeight - anchorTop;
    maxHeight = Math.min(maxHeight, availableHeight);
    const hasHitRight = overlayWidth <= anchorLeft + menuWidth;
    menuItemPositionX = hasHitRight ? Math.max(anchorLeft + anchorWidth - menuWidth, 0) : anchorLeft;
    return {
      left: menuItemPositionX || 0,
      top: menuItemPositionY || 0,
      width: anchorWidth,
      height: (maxHeight || maxCalculatedHeight) - 10 - 14,
      maxHeight: (maxHeight || maxCalculatedHeight) - 10,
      overflowY: "auto"
    };
  }
  return {
    left: 0,
    top: 0,
    maxWidth: "fit-content",
    height: (maxCalculatedHeight || menuBlockref?.getBoundingClientRect()?.height || 0) - 10
  };
};

const withLogic$19 = (Component) => (props) => {
  const { element, rootRef } = useRootRef();
  const [position, setPosition] = useState({ left: 0, top: 0 });
  const updatePosition = () => {
    const menuBlockEl = element?.querySelector(
      "div.j-JDSMenuBlock-container"
    );
    return setPositions(element, menuBlockEl);
  };
  const { close, selected, toggle } = useToggle(props.open, true);
  useEffect(() => {
    if (element && selected) {
      const { left, top } = updatePosition();
      setPosition({ left, top });
    }
  }, [element, selected]);
  const [selectedItem, setSelectedItem] = useState(props.items?.[props.selectedIndex || 0]);
  const handleOnSelect = (selectedIndex) => {
    const selectedData = props.items?.[selectedIndex];
    toggle();
    setSelectedItem(selectedData);
    props.onSelect?.(selectedIndex, selectedData?.value);
  };
  useScrollClose(close);
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        rootRef,
        _offsetX: position.left,
        _offsetY: position.top,
        _maxWidth: "fit-content",
        open: selected,
        items: props.items,
        countryCode: selectedItem?.label,
        countryFlag: selectedItem?.prefix,
        onSelect: handleOnSelect,
        onOpen: () => {
          toggle();
          props.onOpen?.();
        },
        onClose: () => {
          close();
          props.onClose?.();
        }
      }
    }
  );
};

const Component$1c = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$18;
  const { open = false, disabled = false, onOpen = noop, onSelect = noop, onClose = noop, ariaLabel = "Select Country Code", ariaControls = "container", _ariaExpanded = props.open?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ open, disabled, onOpen, onSelect, onClose, ariaLabel, ariaControls, _ariaExpanded, ...rest }, componentTag },
    "JDSInputPhoneDropdown",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const InputPhoneDropdown = withLogic$19(Component$1c);
InputPhoneDropdown.displayName = "InputPhoneDropdown";
InputPhoneDropdown.slotName = "jds_input_phone_dropdown";

const sdl$17 = { "metadata": { "version": "1.0.0", "id": "list-block-1.0.0", "name": "JDSListBlock", "layerName": "jds_list_block", "description": "", "usage": "" }, "hierarchy": { "root-container": ["top-slot", { "main-container": ["prefix-slot", { "block-container": ["title-jds-text", { "caption-container": [{ "inner-caption-container": ["caption-block-text-slot", "caption-block-helper-slot"] }, "caption-block-value-slot"] }, { "title-container": [{ "inner-title-container": ["title-block-text-slot", "title-block-helper-slot"] }, "title-block-value-slot"] }, { "helper-container": [{ "inner-helper-container": ["helper-block-text-slot", "helper-block-helper-slot"] }, "helper-block-value-slot"] }] }, "suffix-slot"] }, "children-slot"] }, "base": { "root-container": { "flex-direction": "{l_0}", "width": "{l_1}", "justify-content": "{l_2}", "align-items": "{l_3}", "gap": "{l_4}", "padding-top": "{l_5}", "padding-bottom": "{l_6}" }, "main-container": { "flex-direction": "{l_7}", "width": "{l_8}", "gap": "{l_9}", "justify-content": "{l_10}", "align-items": "{l_11}" }, "block-container": { "flex-direction": "{l_12}", "flex": 1, "gap": "{l_13}", "justify-content": "{l_14}", "align-items": "{l_15}" }, "caption-container": { "flex-direction": "{l_16}", "width": "{l_17}", "justify-content": "{l_18}", "align-items": "{l_19}", "gap": "{l_20}" }, "inner-caption-container": { "flex-direction": "{l_21}", "justify-content": "{l_22}", "align-items": "{l_23}", "gap": "{l_24}" }, "title-container": { "flex-direction": "{l_25}", "width": "{l_26}", "justify-content": "{l_27}", "align-items": "{l_28}", "gap": "{l_29}" }, "inner-title-container": { "flex-direction": "{l_30}", "justify-content": "{l_31}", "align-items": "{l_32}", "gap": "{l_33}" }, "helper-container": { "flex-direction": "{l_34}", "width": "{l_35}", "justify-content": "{l_36}", "align-items": "{l_37}", "gap": "{l_38}" }, "inner-helper-container": { "flex-direction": "{l_39}", "justify-content": "{l_40}", "align-items": "{l_41}", "gap": "{l_42}" }, "title-jds-text": { "font-family": "{bodySBold}", "color": "{primaryGrey100}", "font-size": "{bodySBold}", "line-height": "{bodySBold}", "letter-spacing": "{bodySBold}", "font-weight": "{bodySBold}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": true } }, "variant": { "spacing": { "small": { "main-container": { "gap": "{l_43}" }, "root-container": { "gap": "{l_44}" } } }, "verticalAlignment": { "top": { "main-container": { "align-items": "{l_45}" } } }, "_isTitleVisible": { "true": { "caption-container": { "hidden": true }, "title-container": { "hidden": true }, "title-jds-text": { "hidden": false } } } }, "api": { "children": { "top-slot": { "name": "top", "accepts": ["any"], "max": 1 }, "prefix-slot": { "name": "prefix", "accepts": ["jds_icon", "jds_avatar", "jds_image"], "max": 1, "doc_description": "It can take 'icon', 'avtar', 'image' as prefix for Listblock." }, "suffix-slot": { "name": "suffix", "accepts": ["jds_text", "jds_icon", "jds_button", "jds_link"], "max": 1, "doc_description": "It can take 'icon', 'text', 'button', 'link' as suffix for Listblock." }, "caption-block-text-slot": { "name": "captionBlockText", "accepts": ["jds_text"], "max": 1 }, "caption-block-helper-slot": { "name": "captionBlockHelper", "accepts": ["jds_text", "jds_badge", "jds_tag"], "max": 1 }, "caption-block-value-slot": { "name": "captionBlockValue", "accepts": ["jds_text", "jds_badge", "jds_tag"], "max": 1 }, "title-block-text-slot": { "name": "titleBlockText", "accepts": ["jds_text"], "max": 1 }, "title-block-helper-slot": { "name": "titleBlockHelper", "accepts": ["jds_text", "jds_badge", "jds_tag"], "max": 1 }, "title-block-value-slot": { "name": "titleBlockValue", "accepts": ["jds_text", "jds_badge", "jds_tag"], "max": 1 }, "helper-block-text-slot": { "name": "helperBlockText", "accepts": ["jds_text"], "max": 1 }, "helper-block-helper-slot": { "name": "helperBlockHelper", "accepts": ["jds_text", "jds_badge", "jds_tag"], "max": 1 }, "helper-block-value-slot": { "name": "helperBlockValue", "accepts": ["jds_text", "jds_badge", "jds_tag"], "max": 1 }, "children-slot": { "name": "children", "accepts": ["any"], "max": 1 } }, "config": { "spacing": { "values": ["medium", "small"], "doc_description": "Adjusts the spacing between ListBlock contents" }, "verticalAlignment": { "values": ["middle", "top"], "doc_description": "Vertical alignment for Prefix and Suffix." }, "_isTitleVisible": { "values": [false, true] } }, "data": { "title-jds-text": { "value": { "type": "string", "name": "title" } } }, "events": { "root-container": { "onClick": "onClick" }, "prefix-slot": { "onClick": "onPrefixClick" }, "suffix-slot": { "onClick": "onSuffixClick" } } } };

const legacySpacing = ["m", "s"];
const PROP_MAP$i = (props) => {
  if (legacySpacing.includes(props.spacing)) {
    console.warn(
      "these values for the spacing prop are deprecated",
      legacySpacing
    );
  }
  return {
    captionBlock: {
      properties: {
        captionBlockText: convertTextToComponent(props.captionBlock?.text),
        captionBlockHelper: convertTextToComponent(props.captionBlock?.helper),
        captionBlockValue: convertTextToComponent(props.captionBlock?.value)
      }
    },
    titleBlock: {
      properties: {
        titleBlockText: convertTextToComponent(props.titleBlock?.text),
        titleBlockHelper: convertTextToComponent(props.titleBlock?.helper),
        titleBlockValue: convertTextToComponent(props.titleBlock?.value)
      }
    },
    helperBlock: {
      properties: {
        helperBlockText: convertTextToComponent(props.helperBlock?.text),
        helperBlockHelper: convertTextToComponent(props.helperBlock?.helper),
        helperBlockValue: convertTextToComponent(props.helperBlock?.value)
      }
    },
    spacing: {
      properties: {
        spacing: props.spacing
      },
      defaultValue: "s",
      variations: {
        s: {
          spacing: "small"
        },
        m: {
          spacing: "medium"
        }
      }
    }
  };
};
const withLogic$18 = (Component) => (userProps) => {
  const props = modifyProps(userProps, PROP_MAP$i);
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        _isTitleVisible: !(props.titleBlock?.text || props.titleBlockText)
      }
    }
  );
};

const Component$1b = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$17;
  const { spacing = "medium", verticalAlignment = "middle", onClick = noop, onPrefixClick = noop, onSuffixClick = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ spacing, verticalAlignment, onClick, onPrefixClick, onSuffixClick, ...rest }, componentTag },
    "JDSListBlock",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const ListBlock = withLogic$18(Component$1b);
ListBlock.displayName = "ListBlock";
ListBlock.slotName = "jds_list_block";

const sdl$16 = { "metadata": { "version": "1.0.0", "id": "mega-menu-1.0.0", "name": "JDSMegaMenu", "layerName": "jds_mega_menu", "platform": "web" }, "hierarchy": { "popup": [{ "popup-container": ["jds_megamenu_internal"] }] }, "base": { "popup": { "priority": 40, "hidden": true, "passive": true }, "popup-container": { "flex-direction": "{m_0}" } }, "variant": { "open": { "true": { "popup": { "hidden": false } } } }, "api": { "config": { "open": { "values": [false, true] } }, "data": { "popup-container": { "padding-top": { "type": "size", "name": "offsetY" }, "padding-left": { "type": "size", "name": "offsetX" }, "width": { "type": "size", "name": "width" } }, "jds_megamenu_internal": { "items": { "type": "list", "name": "items", "object": { "heading": "string", "subLinks": "list" } }, "items.heading": { "type": "string", "name": "items.heading" }, "items.subLinks": { "type": "list", "name": "items.subLinks" } } }, "events": { "jds_megamenu_internal": { "onHoverEnd": "onHoverEnd" } }, "a11y": { "jds_megamenu_internal": { "name": "items", "repeating": { "ariaLabel": "linkAriaLabel", "ariaDescribedby": { "name": "linkAriaDescribedby", "platform": "web,ios" } } } } } };

const withLogic$17 = (Component) => (props) => {
  if (!props.open || !props.items?.length)
    return null;
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$1a = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$16;
  const { open = false, onHoverEnd = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ open, onHoverEnd, ...rest }, componentTag },
    "JDSMegaMenu",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const MegaMenu = withLogic$17(Component$1a);
MegaMenu.displayName = "MegaMenu";
MegaMenu.slotName = "jds_mega_menu";

const sdl$15 = { "metadata": { "version": "1.0.0", "id": "mega-menu-block-1.0.0", "name": "JDSMegaMenuBlock", "layerName": "jds_mega_menu_block", "platform": "web" }, "hierarchy": { "container": ["heading-jds-text", { "links-container": ["jds_mega_menu_item"] }] }, "base": { "container": { "flex-direction": "{m_0}", "justify-content": "{m_1}", "align-items": "{m_2}", "gap": "{m_3}" }, "links-container": { "flex-direction": "{m_4}", "justify-content": "{m_5}", "align-items": "{m_6}" }, "heading-jds-text": { "font-family": "{headingXxs}", "color": "{primaryGrey100}", "font-size": "{headingXxs}", "line-height": "{headingXxs}", "letter-spacing": "{headingXxs}", "font-weight": "{headingXxs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "padding-top": "{m_7}" } }, "api": { "data": { "links-container": { "value": { "name": "links", "type": "list", "object": { "title": "string", "href": "string" } } }, "jds_mega_menu_item": { "title": { "type": "string", "name": "links.title" }, "href": { "type": "string", "name": "links.href" } }, "heading-jds-text": { "value": { "type": "string", "name": "title" } } }, "a11y": { "links-container": { "properties": { "role": { "value": "list" } }, "name": "links", "repeating": { "ariaLabel": "linkAriaLabel", "ariaDescribedby": { "name": "linkAriaDescribedby", "platform": "web,ios" } } }, "jds_mega_menu_item": { "properties": { "ariaLabel": "links.linkAriaLabel", "ariaDescribedby": "links.linkAriaDescribedby" } } } } };

const withLogic$16 = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$19 = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$15;
  const { custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...rest, componentTag },
    "JDSMegaMenuBlock",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const MegaMenuBlock = withLogic$16(Component$19);
MegaMenuBlock.displayName = "MegaMenuBlock";
MegaMenuBlock.slotName = "jds_mega_menu_block";

const sdl$14 = { "metadata": { "version": "1.0.0", "id": "mega-menu-1.0.0", "name": "JDSMegaMenuInternal", "layerName": "jds_mega_menu_internal", "platform": "web" }, "hierarchy": { "container": ["jds_mega_menu_block"] }, "base": { "container": { "width": "{m_1}", "flex-direction": "{m_2}", "justify-content": "{m_3}", "align-items": "{m_4}", "background-color": "{m_5}", "padding-top": "{m_6}", "padding-bottom": "{m_7}", "padding-right": "{m_8}", "padding-left": "{m_9}", "gap": "{m_10}" } }, "variant": {}, "api": { "config": { "open": { "values": [false, true] } }, "data": { "container": { "value": { "type": "list", "name": "items", "object": { "heading": "string", "subLinks": "list" } } }, "jds_mega_menu_block": { "title": { "type": "string", "name": "items.heading" }, "links": { "type": "list", "name": "items.subLinks" } } }, "events": { "container": { "onHoverEnd": "onHoverEnd" } }, "a11y": { "container": { "name": "items", "repeating": { "ariaLabel": "linkAriaLabel", "ariaDescribedby": { "name": "linkAriaDescribedby", "platform": "web,ios" } } } } } };

const withLogic$15 = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$18 = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$14;
  const { open = false, onHoverEnd = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ open, onHoverEnd, ...rest }, componentTag },
    "JDSMegaMenuInternal",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const MegaMenuInternal = withLogic$15(Component$18);
MegaMenuInternal.displayName = "MegaMenuInternal";
MegaMenuInternal.slotName = "jds_mega_menu_internal";

const sdl$13 = { "metadata": { "version": "1.0.0", "id": "mega-menu-item-1.0.0", "name": "JDSMegaMenuItem", "layerName": "jds_mega_menu_item", "platform": "web" }, "hierarchy": { "container": ["jds_link"] }, "base": { "container": { "flex-direction": "{m_0}", "justify-content": "{m_1}", "align-items": "{m_2}", "padding-top": "{m_3}", "padding-bottom": "{m_4}" }, "jds_link": { "kind": "submenu" } }, "variant": {}, "combination": [{}], "combination_config": [[]], "api": { "data": { "jds_link": { "title": { "type": "string", "name": "title" }, "href": { "type": "string", "name": "href" }, "newTab": { "type": "boolean", "name": "newTab", "platform": "web" }, "routerLinkProps": { "type": "RouterLinkProps", "name": "routerLinkProps", "platform": "angular" }, "onClick": { "type": "string", "name": "onClick" } } }, "a11y": { "container": { "properties": { "role": { "value": "listitem" } } }, "jds_link": { "properties": { "ariaLabel": "ariaLabel", "ariaDescribedby": { "name": "ariaDescribedby", "platform": "web,ios" } } } } } };

const withLogic$14 = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$17 = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$13;
  const { custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...rest, componentTag },
    "JDSMegaMenuItem",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const MegaMenuItem = withLogic$14(Component$17);
MegaMenuItem.displayName = "MegaMenuItem";
MegaMenuItem.slotName = "jds_mega_menu_item";

const sdl$12 = { "metadata": { "version": "1.0.0", "id": "menu-block-1.0.0", "name": "JDSMenuBlock", "layerName": "jds_menu_block" }, "hierarchy": { "popup": [{ "popup-container": ["jds_menu_block_internal"] }] }, "base": { "popup": { "background-color": "{global.transparent}", "priority": 70, "passive": true }, "popup-container": { "flex-direction": "{flexDirection.stack}", "padding-right": "{m_2}", "padding-bottom": "{m_3}", "max-height": "{m_9}" }, "jds_menu_block_internal": { "hidden": false } }, "variant": { "open": { "true": { "popup": { "passive": false }, "jds_menu_block_internal": { "open": true } } } }, "combination": [{}], "combination_config": [[]], "api": { "config": { "open": { "values": [false, true], "doc_description": "Used to open or close the modal programatically." } }, "data": { "popup-container": { "padding-left": { "type": "size", "name": "offsetX", "function": true }, "padding-top": { "type": "size", "name": "offsetY", "function": true } }, "jds_menu_block_internal": { "maxHeight": { "type": "size", "name": "maxHeight", "function": true }, "maxWidth": { "type": "size", "name": "maxWidth" }, "minWidth": { "type": "size", "name": "minWidth", "function": true }, "items": { "type": "list", "name": "items", "doc_description": "Each entry eithin Menu is configured throught the MenuItem object. Some type may be unselectable.", "object": { "type": "JDSMenuBlockItem.type", "label": "string", "value": "string", "prefix": "icon", "suffix": "icon", "disabled": "boolean", "selected": "boolean" } }, "selectedIndex": { "type": "number", "name": "selectedIndex", "doc_description": "Used to programatically change current selected Index" }, "items.type": { "type": "string", "name": "items.type" }, "items.label": { "type": "string", "name": "items.label" }, "items.value": { "type": "string", "name": "items.value" }, "items.prefix": { "type": "icon", "name": "items.prefix" }, "items.suffix": { "type": "icon", "name": "items.suffix" }, "items.disabled": { "type": "boolean", "name": "items.disabled" }, "items.selected": { "type": "boolean", "name": "items.selected" } } }, "events": { "jds_menu_block_internal": { "onSelect": { "name": "onSelect", "doc_description": "onClick event that triggers upon click or tap of the chosen entry." }, "onAppear": { "name": "_onAppear", "platform": "ios" }, "onClick": "onClick" }, "popup": { "onClick": "onClose" } }, "a11y": { "jds_menu_block_internal": { "name": "items", "repeating": { "ariaLabel": "itemAriaLabel", "ariaDescribedby": { "name": "itemAriaDescribedby", "platform": "web,ios" } } } } } };

const useSelected = (selected) => {
  const [selectedIndex, setSelectedIndex] = useState(-1);
  useEffect(() => {
    if (typeof selected === "number")
      setSelectedIndex(selected);
  }, [selected]);
  const updateIndex = (index) => setSelectedIndex(index);
  return {
    index: selectedIndex,
    onClick: (index) => {
      setSelectedIndex(index);
    },
    updateIndex
  };
};

const MENUBLOCK_SELECTOR$1 = "div#container.j-jds-menu-block-container";
const MENUBLOCKINTERNAL_SELECTOR$1 = "div.j-JDSMenuBlockInternal-container";
const ANIMATION_DURATION$1 = 250;
const withLogic$13 = (Component) => (props) => {
  const { element, rootRef } = useRootRef();
  const { index, onClick } = useSelected(props.selectedIndex);
  const [shouldRender, setShouldRender] = useState(props.open);
  const internalProps = props;
  const { items = props.items ?? [], anchorEl, open } = props;
  const menublockRef = element?.querySelector(MENUBLOCK_SELECTOR$1);
  useEscapeClose(props.onClose, true);
  useScrollClose(props.onClose);
  useEffect(() => {
    if (open) {
      props.onOpen?.();
    }
  }, [open]);
  const { left, top, height, width } = setPositions(
    anchorEl?.current,
    menublockRef,
    String(props.maxHeight)
  );
  useEffect(() => {
    let timeout;
    if (props.open) {
      setShouldRender(true);
      props.onOpen?.();
    } else {
      timeout = setTimeout(() => {
        setShouldRender(false);
      }, ANIMATION_DURATION$1);
    }
    return () => {
      if (timeout)
        clearTimeout(timeout);
    };
  }, [props.open]);
  useEffect(() => {
    if (shouldRender && props.open) {
      const menublockInternalRef = element?.querySelector(
        MENUBLOCKINTERNAL_SELECTOR$1
      );
      if (menublockInternalRef) {
        menublockInternalRef.focus();
      }
    } else {
      anchorEl?.current?.focus();
    }
  }, [shouldRender, props.open, element]);
  if (!shouldRender)
    return null;
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        open,
        rootRef,
        selectedIndex: index,
        items,
        offsetX: internalProps.offsetX || left,
        maxHeight: !open ? 0 : props.maxHeight || height,
        offsetY: internalProps.offsetY || top,
        _hasIcon: items.some((i) => Boolean(i.prefix)),
        onSelect: (index2) => {
          props.onSelect?.(index2, items?.[index2].value || "");
          onClick?.(index2);
          props.onClose?.();
        },
        onClick: (ev) => {
          ev.stopPropagation();
          props.onClick?.(ev);
        },
        minWidth: internalProps.maxWidth || Math.max(width || 0, 250)
      }
    }
  );
};

const Component$16 = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$12;
  const { open = false, onSelect = noop, onClick = noop, onClose = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ open, onSelect, onClick, onClose, ...rest }, componentTag },
    "JDSMenuBlock",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const MenuBlock = withLogic$13(Component$16);
MenuBlock.displayName = "MenuBlock";
MenuBlock.slotName = "jds_menu_block";

const sdl$11 = { "metadata": { "version": "1.0.0", "id": "menu-block-1.0.0", "name": "JDSMenuBlockInternal", "layerName": "jds_menu_block_internal", "internal": true }, "hierarchy": { "container": ["jds_menu_block_item"] }, "base": { "container": { "hidden": true, "width": "{intrinsicSize.max}", "lazy-scroll-android": false, "background-color": "{primaryBackground}", "flex-direction": "{flexDirection.column}", "border-radius": "{medium}", "overflow": "auto", "box-shadow": { "x": 0, "y": 4, "blur": 16, "spread": 0, "color": "#00000014" }, "transition": { "property": ["max-height"], "duration": "{slow}", "timing-function": "{easeExit}" } }, "jds_menu_block_item": { "width": "{size.max}" } }, "variant": { "open": { "true": { "container": { "hidden": false, "transition": { "timing-function": "{easeEntrance}" } } } } }, "combination": [{}], "combination_config": [[]], "api": { "config": { "open": { "values": [false, true], "doc_description": "Used to open or close the modal programatically." } }, "data": { "container": { "max-height": { "type": "size", "name": "maxHeight", "function": true }, "max-width": { "type": "size", "name": "maxWidth" }, "min-width": { "type": "size", "name": "minWidth", "function": true }, "value": { "type": "list", "name": "items", "doc_description": "Each entry eithin Menu is configured throught the MenuItem object. Some type may be unselectable.", "object": { "type": "JDSMenuBlockItem.type", "label": "string", "value": "string", "prefix": "icon", "suffix": "icon", "disabled": "boolean", "selected": "boolean" } } }, "jds_menu_block_item": { "selectedIndex": { "type": "number", "name": "selectedIndex", "doc_description": "Used to programatically change current selected Index" }, "type": { "type": "string", "name": "items.type" }, "label": { "type": "string", "name": "items.label" }, "value": { "type": "string", "name": "items.value" }, "prefix": { "type": "icon", "name": "items.prefix" }, "suffix": { "type": "icon", "name": "items.suffix" }, "disabled": { "type": "boolean", "name": "items.disabled" }, "hasIcon": { "type": "boolean", "name": "_hasIcon" }, "selected": { "type": "boolean", "name": "items.selected" } } }, "events": { "jds_menu_block_item": { "onSelect": { "name": "onSelect", "doc_description": "onClick event that triggers upon click or tap of the chosen entry." } }, "container": { "onAppear": { "name": "onAppear", "platform": "ios" }, "onClick": "onClick" } }, "a11y": { "container": { "name": "items", "properties": { "role": { "value": "listbox" }, "aria-label": { "name": "_ariaLabel", "value": "Choose an item" } }, "repeating": { "ariaLabel": "itemAriaLabel", "ariaDescribedby": { "name": "itemAriaDescribedby", "platform": "web,ios" } } }, "jds_menu_block_item": { "properties": { "ariaLabel": "items.itemAriaLabel", "ariaDescribedby": "items.itemAriaDescribedby" } } } } };

const MENUBLOCK_SELECTOR = "div#container.j-jds-menu-block-container";
const MENUBLOCKINTERNAL_SELECTOR = "div.j-JDSMenuBlockInternal-container";
const ANIMATION_DURATION = 250;
const withLogic$12 = (Component) => (props) => {
  const { element, rootRef } = useRootRef();
  const { index, onClick } = useSelected(props.selectedIndex);
  const internalProps = props;
  const { items = [], anchorEl, open } = props;
  const [shouldRender, setShouldRender] = useState(props.open);
  const menublockRef = element?.querySelector(MENUBLOCK_SELECTOR);
  useEscapeClose(props.onClose, true);
  useScrollClose(props.onClose);
  useEffect(() => {
    if (open) {
      props.onOpen?.();
    }
  }, [open]);
  const { left, top, height, width } = setPositions(
    anchorEl?.current,
    menublockRef,
    String(props.maxHeight)
  );
  useEffect(() => {
    let timeout;
    if (open) {
      setShouldRender(true);
      props.onOpen?.();
    } else {
      timeout = setTimeout(() => {
        setShouldRender(false);
      }, ANIMATION_DURATION);
    }
    return () => {
      if (timeout)
        clearTimeout(timeout);
    };
  }, [props.open]);
  useEffect(() => {
    if (!shouldRender || !props.open)
      return;
    const timeout = setTimeout(() => {
      const menublockInternalRef = document.querySelector(
        MENUBLOCKINTERNAL_SELECTOR
      );
      menublockInternalRef?.focus();
    }, ANIMATION_DURATION);
    return () => clearTimeout(timeout);
  }, [shouldRender, props.open]);
  if (!shouldRender)
    return null;
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        open,
        rootRef,
        selectedIndex: index,
        items,
        offsetX: internalProps.offsetX || left,
        maxHeight: !open ? 0 : props.maxHeight || height,
        offsetY: internalProps.offsetY || top,
        _hasIcon: items.some((i) => Boolean(i.prefix)),
        onSelect: (index2) => {
          props.onSelect?.(index2, items?.[index2].value || "");
          onClick?.(index2);
          props.onClose?.();
        },
        onClick: (ev) => {
          ev.stopPropagation();
          props.onClick?.(ev);
        }
      }
    }
  );
};

const Component$15 = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$11;
  const { open = false, onSelect = noop, onAppear = noop, onClick = noop, _ariaLabel = "Choose an item", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ open, onSelect, onAppear, onClick, _ariaLabel, ...rest }, componentTag },
    "JDSMenuBlockInternal",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const MenuBlockInternal = withLogic$12(Component$15);
MenuBlockInternal.displayName = "MenuBlockInternal";
MenuBlockInternal.slotName = "jds_menu_block_internal";

const sdl$10 = { "metadata": { "version": "1.0.0", "id": "menu-block-item-1.0.0", "name": "JDSMenuBlockItem", "layerName": "jds_menu_block_item" }, "hierarchy": { "container": [{ "entry-container": [{ "left-container": [{ "prefix-jds-icon-container": ["prefix-jds-icon"] }, "entry-jds-text"] }, { "suffix-jds-icon-container": ["suffix-jds-icon"] }] }, { "divider-container": ["jds_divider"] }, { "heading-container": ["heading-jds-text"] }] }, "base": { "container": { "opacity": "{m_0}", "background-color": "{m_1}", "width": "{m_2}" }, "entry-container": { "hidden": false, "background-color": "{m_3}", "width": "{m_4}", "padding-top": "{m_5}", "padding-right": "{m_6}", "padding-bottom": "{m_7}", "padding-left": "{m_8}", "flex-direction": "{m_9}", "align-items": "{m_10}", "justify-content": "{m_11}", "border-width": 0, "border-color": "{m_12}", "border-radius": 0, "behavior": { "hover": { "background-color": "{m_13}" }, "focus": { "border-width": 2, "border-color": "{m_14}", "border-radius": "{m_15}" } } }, "divider-container": { "hidden": true, "width": "{m_16}" }, "jds_divider": { "pad": "none", "orientation": "horizontal" }, "heading-container": { "hidden": true, "padding-top": "{m_17}", "padding-right": "{m_18}", "padding-bottom": "{m_19}", "padding-left": "{m_20}", "width": "{m_21}", "align-items": "{m_22}", "justify-content": "{m_23}" }, "left-container": { "gap": "{m_24}", "flex-direction": "{m_25}", "align-items": "{m_26}" }, "prefix-jds-icon": { "size": "{m}", "color": "{primaryGrey80}", "hidden": true }, "prefix-jds-icon-container": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{m}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}", "hidden": true }, "entry-jds-text": { "font-family": "{bodyS}", "color": "{primaryGrey80}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" }, "suffix-jds-icon": { "size": "{m}", "color": "{primaryGrey80}" }, "suffix-jds-icon-container": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{m}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}" }, "heading-jds-text": { "font-family": "{bodyXs}", "color": "{primaryGrey100}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" } }, "variant": { "type": { "divider": { "entry-container": { "hidden": true }, "divider-container": { "hidden": false } }, "heading": { "entry-container": { "hidden": true }, "heading-container": { "hidden": false } } }, "selected": { "true": { "container": { "background-color": "{m_27}" } } }, "disabled": { "true": { "container": { "disabled": true, "opacity": "{m_28}" } } }, "hasIcon": { "true": { "heading-container": { "padding-left": "{m_29}" }, "prefix-jds-icon": { "hidden": false }, "prefix-jds-icon-container": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{m}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}", "hidden": false } } } }, "api": { "config": { "type": { "values": ["entry", "divider", "heading"] }, "selected": { "values": [false, true] }, "disabled": { "values": [false, true] }, "hasIcon": { "values": [false, true] } }, "data": { "container": { "_item.value": { "type": "string", "name": "value" } }, "entry-jds-text": { "value": { "type": "string", "name": "label" } }, "prefix-jds-icon": { "value": { "type": "icon", "name": "prefix" }, "ic": { "type": "icon", "name": "prefix" } }, "suffix-jds-icon": { "value": { "type": "icon", "name": "suffix" }, "ic": { "type": "icon", "name": "suffix" } }, "heading-jds-text": { "value": { "type": "string", "name": "label" } } }, "events": { "entry-container": { "onClick": "onSelect" } }, "a11y": { "container": { "properties": { "role": { "value": "option" }, "aria-label": { "name": "ariaLabel", "prop": "label", "function": true }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" }, "aria-selected": { "name": "_ariaSelected", "prop": "selected" }, "aria-hidden": { "name": "_ariaHidden", "function": true } } } } } };

const withLogic$11 = (Component) => (props) => {
  const internalProps = props;
  const selected = internalProps.internalIndex === props.selectedIndex;
  const handleSelect = () => {
    props.onSelect?.(internalProps.internalIndex);
  };
  const handleKeyDown = (event) => {
    if (event.key === "Enter" && internalProps.internalIndex === props.selectedIndex) {
      handleSelect();
    }
  };
  const handleClick = () => {
    handleSelect();
  };
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        onClick: handleClick,
        onKeyDown: handleKeyDown,
        selected,
        ariaLabel: props.type === "heading" ? props.ariaLabel || `${props.label} heading` : props.ariaLabel,
        _ariaHidden: props.type === "divider" ? "true" : void 0,
        _ariaSelected: props.type === "entry" ? selected : void 0,
        _hasIcon: internalProps._hasIcon || Boolean(props.prefix),
        onSelect: !props.type || props.type === "entry" ? handleSelect : void 0,
        prefix: props.prefix || (internalProps._hasIcon ? /* @__PURE__ */ jsx("div", {}) : void 0)
      }
    }
  );
};

const Component$14 = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$10;
  const { type = "entry", selected = false, disabled = false, hasIcon = false, onSelect = noop, ariaLabel = props.label?.toString(), _ariaSelected = props.selected?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ type, selected, disabled, hasIcon, onSelect, ariaLabel, _ariaSelected, ...rest }, componentTag },
    "JDSMenuBlockItem",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const MenuBlockItem = withLogic$11(Component$14);
MenuBlockItem.displayName = "MenuBlockItem";
MenuBlockItem.slotName = "jds_menu_block_item";

const sdl$$ = { "metadata": { "version": "1.0.0", "id": "mobile-bottom-sheet-1.0.0", "name": "JDSMobileBottomSheetInternal", "layerName": "jds_mobile_bottom_sheet_internal", "internal": true }, "hierarchy": { "container": [{ "root-container": [{ "cancel-container": [{ "back-container": ["back-jds_action_button"] }, "empty-container", "step-jds-text", "cancel-jds_button"] }, { "vertical-container": ["title-jds-text", "description-jds-text", "children-slot", { "cta-container": ["primary-jds_action_button", "secondary-jds_action_button"] }] }] }, { "custom-container": ["children-slot"] }] }, "base": { "container": { "flex-direction": "{m_0}", "justify-content": "{m_1}", "align-items": "{m_2}", "width": "{m_3}" }, "root-container": { "hidden": true, "z-index": 1, "flex-direction": "{m_4}", "justify-content": "{m_5}", "background-color": "{m_6}", "align-items": "{m_7}", "border-top-left-radius": "{m_8}", "border-top-right-radius": "{m_9}", "width": "{m_10}", "enter-animation-name": "slideVerticallyUp", "exit-animation-name": "slideVerticallyDown", "enter-animation-curve": "entrance_ease", "exit-animation-curve": "exit_ease", "enter-animation-duration": 500, "exit-animation-duration": 500, "translate-y": "{m_11}", "transition": { "property": ["translate-y"], "duration": "{m_12}", "timing-function": "{m_13}" } }, "cancel-container": { "hidden": false, "flex-direction": "{m_14}", "justify-content": "{m_15}", "align-items": "{m_16}", "width": "{m_17}", "padding-top": "{m_18}", "padding-bottom": "{m_19}", "padding-left": "{m_20}", "padding-right": "{m_21}", "gap": "{m_22}" }, "back-container": { "flex": "{m_23}", "hidden": true }, "back-jds_action_button": { "padding-top": "{xs}", "icon": "ic_back", "size": "medium", "kind": "tertiary" }, "empty-container": { "flex": "{m_24}" }, "cancel-jds_button": { "padding-top": "{xs}", "hidden": false, "icon": "ic_close", "size": "large", "kind": "tertiary" }, "vertical-container": { "flex-direction": "{m_26}", "justify-content": "{m_27}", "align-items": "{m_28}", "padding-left": "{m_29}", "padding-right": "{m_30}", "width": "{m_31}" }, "primary-jds_action_button": { "hidden": false, "kind": "primary", "size": "large", "appearance": "normal", "state": "normal", "stretch": true }, "secondary-jds_action_button": { "hidden": false, "kind": "secondary", "size": "large", "appearance": "normal", "state": "normal", "stretch": true }, "cta-container": { "flex-direction": "{m_34}", "gap": "{m_35}", "width": "{m_36}", "padding-bottom": "{m_37}", "padding-top": "{m_38}" }, "children-slot": { "flex-fill-android": false }, "custom-container": { "hidden": true, "z-index": 1, "flex-direction": "{m_39}", "justify-content": "{m_40}", "align-items": "{m_41}", "background-color": "{m_42}", "border-top-left-radius": "{m_43}", "border-top-right-radius": "{m_44}", "padding-left": "{m_45}", "padding-right": "{m_46}", "padding-top": "{m_47}", "padding-bottom": "{m_48}", "width": "{m_49}", "translate-y": "{m_50}", "transition": { "property": ["translate-y"], "duration": "{m_51}", "timing-function": "{m_52}" } }, "step-jds-text": { "font-family": "{bodyXs}", "color": "{primaryGrey80}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": true, "padding-right": "{m_25}" }, "title-jds-text": { "font-family": "{headingXs}", "color": "{primaryGrey100}", "font-size": "{headingXs}", "line-height": "{headingXs}", "letter-spacing": "{headingXs}", "font-weight": "{headingXs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "max-lines": 2, "padding-bottom": "{xs}", "maxLines": 2 }, "description-jds-text": { "font-family": "{bodyXs}", "color": "{primaryGrey80}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "padding-bottom": "{m_33}" } }, "variant": { "kind": { "passive": { "root-container": { "box-shadow": { "x": "{m_53}", "y": "{m_54}", "blur": "{m_55}", "spread": "{m_56}", "color": "{m_57}" } } } }, "close": { "false": { "root-container": { "translate-y": "{m_58}", "hidden": false } } }, "buttonOrientation": { "horizontal": { "cta-container": { "flex-direction": "{flexDirection.row}" } } }, "controlType": { "stepper": { "cancel-jds_button": { "hidden": true }, "back-container": { "hidden": false }, "step-jds-text": { "hidden": false } } }, "primaryCtaDisabled": { "true": { "primary-jds_action_button": { "state": "disabled" } } }, "secondaryCtaDisabled": { "true": { "secondary-jds_action_button": { "state": "disabled" } } }, "_noButton": { "true": { "root-container": { "padding-bottom": "{m_59}" }, "cta-container": { "hidden": true } } } }, "combination": [{ "false": { "true": { "custom-container": { "hidden": false, "translate-y": "{m_60}" }, "root-container": { "hidden": true, "translate-y": "{m_61}" }, "vertical-container": { "hidden": true } } } }], "combination_config": [["close", "isCustom"]], "api": { "config": { "kind": { "values": ["overlay", "passive"] }, "controlType": { "values": ["normal", "stepper"] }, "buttonOrientation": { "values": ["vertical", "horizontal"] }, "isCustom": { "values": [false, true] }, "close": { "values": [true, false] }, "primaryCtaDisabled": { "values": [false, true] }, "secondaryCtaDisabled": { "values": [false, true] }, "_noButton": { "values": [false, true] } }, "data": { "root-container": { "max-height": { "type": "size", "name": "maxHeight", "function": true } }, "primary-jds_action_button": { "label": { "type": "string", "name": "primaryCTA" } }, "secondary-jds_action_button": { "label": { "type": "string", "name": "secondaryCTA" } }, "step-jds-text": { "value": { "type": "string", "name": "stepLabel" } }, "title-jds-text": { "value": { "type": "string", "name": "title" } }, "description-jds-text": { "value": { "type": "string", "name": "description" } } }, "children": { "children-slot": { "name": "children", "accepts": ["any"], "max": 1 } }, "events": { "container": { "onAppear": { "name": "onAppear", "platform": "ios" } }, "root-container": { "onClick": "onBottomSheetClick", "onSwipeDown": "onClose" }, "custom-container": { "onClick": "onBottomSheetClick", "onSwipeDown": "onClose" }, "back-jds_action_button": { "onClick": "onBack" }, "cancel-jds_button": { "onClick": "onCancel" }, "primary-jds_action_button": { "onClick": "onPrimaryClick" }, "secondary-jds_action_button": { "onClick": "onSecondaryClick" } }, "a11y": { "root-container": { "properties": { "role": { "value": "dialog" }, "aria-label": { "name": "ariaLabel", "value": "Bottom Sheet Content" }, "aria-modal": { "name": "_ariaModal" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" } } }, "cancel-jds_button": { "properties": { "ariaLabel": { "name": "cancelButtonAriaLabel", "value": "Close Modal" } } }, "back-jds_action_button": { "properties": { "ariaLabel": { "name": "backButtonAriaLabel", "value": "Tap to go back" } } }, "primary-jds_action_button": { "properties": { "ariaLabel": "primaryCtaAriaLabel", "ariaDescribedby": { "name": "primaryCtaAriaDescribedby", "platform": "web,ios" } } }, "secondary-jds_action_button": { "properties": { "ariaLabel": "secondaryCtaAriaLabel", "ariaDescribedby": { "name": "secondaryCtaAriaDescribedby", "platform": "web,ios" } } } } } };

const withLogic$10 = (Component) => (props) => {
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        _ariaModal: props.kind === "overlay" || !props.close ? "true" : "false"
      }
    }
  );
};

const Component$13 = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$$;
  const { kind = "overlay", controlType = "normal", buttonOrientation = "vertical", isCustom = false, close = true, primaryCtaDisabled = false, secondaryCtaDisabled = false, onAppear = noop, onBottomSheetClick = noop, onClose = noop, onBack = noop, onCancel = noop, onPrimaryClick = noop, onSecondaryClick = noop, ariaLabel = "Bottom Sheet Content", cancelButtonAriaLabel = "Close Modal", backButtonAriaLabel = "Tap to go back", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ kind, controlType, buttonOrientation, isCustom, close, primaryCtaDisabled, secondaryCtaDisabled, onAppear, onBottomSheetClick, onClose, onBack, onCancel, onPrimaryClick, onSecondaryClick, ariaLabel, cancelButtonAriaLabel, backButtonAriaLabel, ...rest }, componentTag },
    "JDSMobileBottomSheetInternal",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const MobileBottomSheetInternal = withLogic$10(Component$13);
MobileBottomSheetInternal.displayName = "MobileBottomSheetInternal";
MobileBottomSheetInternal.slotName = "jds_mobile_bottom_sheet_internal";

const sdl$_ = { "metadata": { "version": "1.0.0", "id": "modal-desktop-1.0.0", "name": "JDSModalDesktop", "layerName": "jds_modal_desktop", "platform": "web", "description": "Modals focus the user’s attention exclusively on one task or piece of information via a window that sits on top of the page content. Dialog Modals are used to confirm with the user before continuing with destructive or complex actions. In this case the modal have two buttons at the bottom. Access to the rest of the UI is disabled until the modal is addressed.", "usage": "A dialog modal uses two buttons and requires immediate user response." }, "hierarchy": { "popup": [{ "popup-container": ["jds_modal_desktop_internal"] }] }, "base": { "popup": { "priority": 60, "full-width": true, "passive": true }, "popup-container": { "flex-direction": "{m_0}", "justify-content": "{m_3}", "align-items": "{m_4}", "size": "{m_5}", "enter-animation-name": "fadeIn", "exit-animation-name": "fadeOut", "enter-animation-curve": "entrance_ease", "exit-animation-curve": "exit_ease", "enter-animation-duration": 500, "exit-animation-duration": 500, "opacity": "{opacity.invisible}", "transition": { "property": ["opacity"], "duration": "{medium}", "timing-function": "{easeEntrance}" } }, "jds_modal_desktop_internal": { "kind": "dialog", "headerAlignment": "left", "isCloseable": true, "size": "medium" } }, "variant": { "kind": { "acknowledgement": { "jds_modal_desktop_internal": { "kind": "acknowledgement" } }, "informational": { "jds_modal_desktop_internal": { "kind": "informational" } }, "custom": { "jds_modal_desktop_internal": { "kind": "custom" } } }, "headerAlignment": { "right": { "jds_modal_desktop_internal": { "headerAlignment": "right" } }, "center": { "jds_modal_desktop_internal": { "headerAlignment": "center" } } }, "size": { "small": { "jds_modal_desktop_internal": { "size": "small" } } }, "close": { "false": { "popup": { "hidden": false, "passive": false }, "popup-container": { "opacity": "{opacity.enabled}", "transition": { "timing-function": "{easeExit}" } } } }, "isCloseable": { "false": { "jds_modal_desktop_internal": { "isCloseable": false } } } }, "api": { "config": { "kind": { "values": ["dialog", "acknowledgement", "informational", "custom"], "doc_description": "It can be used to switch between 3 variants of Modal. `informational` modal has no buttons,`dialog` modal has two buttons, `acknowledgement` modal has only a single button." }, "size": { "values": ["medium", "small"], "doc_description": "It can be used to control the size of popup container." }, "headerAlignment": { "values": ["left", "right", "center"], "doc_description": "It is used to align header of Modal." }, "isCloseable": { "values": [true, false], "doc_description": "It can be used to makes Modal closeable, displays close icon button on popup." }, "close": { "values": [true, false], "doc_description": "It is used to close the Modal." }, "_platform": { "values": ["desktop", "tablet"] } }, "data": { "jds_modal_desktop_internal": { "header": { "type": "string", "name": "header", "doc_description": "It displays the title of modal." }, "primaryCTA": { "type": "string", "name": "primaryCTA", "doc_description": "It displays label of primary button of Modal." }, "primaryCtaDisabled": { "type": "boolean", "name": "primaryCtaDisabled" }, "secondaryCTA": { "type": "string", "name": "secondaryCTA", "doc_description": "It displays label of secondary button of Modal." }, "secondaryCtaDisabled": { "type": "boolean", "name": "secondaryCtaDisabled" }, "children": { "name": "children", "type": "slot", "doc_description": "This sets Modal content as a children elements eg. `<Modal> <Table /> <Modal/>`" } } }, "events": { "popup": { "onClick": "onClose" }, "jds_modal_desktop_internal": { "onModalClick": "_onModalClick", "onCancel": "_onCancel", "onPrimaryClick": "onPrimaryClick", "onSecondaryClick": "onSecondaryClick" } }, "a11y": { "jds_modal_desktop_internal": { "properties": { "ariaLabel": "ariaLabel", "ariaDescribedby": { "name": "ariaDescribedby", "platform": "web,ios" }, "cancelButtonCtaAriaLabel": "cancelButtonCtaAriaLabel", "primaryCtaAriaLabel": "primaryCtaAriaLabel", "primaryCtaAriaDescribedby": { "name": "primaryCtaAriaDescribedby", "platform": "web,ios" }, "secondaryCtaAriaLabel": "secondaryCtaAriaLabel", "secondaryCtaAriaDescribedby": { "name": "secondaryCtaAriaDescribedby", "platform": "web,ios" } } } } } };

const sdl$Z = { "metadata": { "version": "1.0.0", "id": "modal-mobile-1.0.0", "name": "JDSModalMobile", "layerName": "jds_modal_mobile" }, "hierarchy": { "popup": [{ "popup-container": ["jds_modal_mobile_internal"] }] }, "base": { "popup": { "priority": 60, "full-width": true, "passive": true }, "popup-container": { "flex-direction": "{m_0}", "justify-content": "{m_1}", "align-items": "{m_2}", "size": "{m_3}", "enter-animation-name": "fadeIn", "exit-animation-name": "fadeOut", "enter-animation-curve": "entrance_ease", "exit-animation-curve": "exit_ease", "enter-animation-duration": 500, "exit-animation-duration": 500, "opacity": "{m_4}", "transition": { "property": ["opacity"], "duration": "{m_5}", "timing-function": "{m_6}" } }, "jds_modal_mobile_internal": { "kind": "dialog", "headerAlignment": "left", "isCloseable": true, "size": "medium" } }, "variant": { "kind": { "acknowledgement": { "jds_modal_mobile_internal": { "kind": "acknowledgement" } }, "informational": { "jds_modal_mobile_internal": { "kind": "informational" } }, "custom": { "jds_modal_mobile_internal": { "kind": "custom" } } }, "headerAlignment": { "right": { "jds_modal_mobile_internal": { "headerAlignment": "right" } }, "center": { "jds_modal_mobile_internal": { "headerAlignment": "center" } } }, "size": { "small": { "jds_modal_mobile_internal": { "size": "small" } } }, "close": { "false": { "popup": { "hidden": false, "passive": false }, "popup-container": { "opacity": "{m_7}", "transition": { "timing-function": "{m_8}" } } } }, "isCloseable": { "false": { "jds_modal_mobile_internal": { "isCloseable": false } } } }, "api": { "config": { "kind": { "values": ["dialog", "acknowledgement", "informational", "custom"], "doc_description": "It can be used to switch between 3 variants of Modal. `informational` modal has no buttons,`dialog` modal has two buttons, `acknowledgement` modal has only a single button." }, "size": { "values": ["medium", "small"], "doc_description": "It can be used to control the size of popup container." }, "headerAlignment": { "values": ["left", "right", "center"], "doc_description": "It is used to align header of Modal." }, "isCloseable": { "values": [true, false], "doc_description": "It can be used to makes Modal closeable, displays close icon button on popup." }, "close": { "values": [true, false], "doc_description": "It is used to close the Modal." }, "disableOutsideClick": { "values": [false, true], "doc_description": "It determines whether modal should close and the onClose event should be triggered when clicking outside modal.", "function": true } }, "data": { "jds_modal_mobile_internal": { "header": { "type": "string", "name": "header", "doc_description": "It displays the title of modal." }, "primaryCTA": { "type": "string", "name": "primaryCTA", "doc_description": "It displays label of primary button of Modal." }, "primaryCtaDisabled": { "type": "boolean", "name": "primaryCtaDisabled" }, "secondaryCTA": { "type": "string", "name": "secondaryCTA", "doc_description": "It displays label of secondary button of Modal." }, "secondaryCtaDisabled": { "type": "boolean", "name": "secondaryCtaDisabled" }, "children": { "type": "slot", "name": "children" } } }, "events": { "popup": { "onClick": "onClose" }, "jds_modal_mobile_internal": { "onModalClick": "_onModalClick", "onCancel": "_onCancel", "onPrimaryClick": "onPrimaryClick", "onSecondaryClick": "onSecondaryClick" } }, "a11y": { "jds_modal_mobile_internal": { "properties": { "ariaLabel": "ariaLabel", "ariaDescribedby": { "name": "ariaDescribedby", "platform": "web,ios" }, "cancelButtonCtaAriaLabel": "cancelButtonCtaAriaLabel", "headerAriaLabel": "headerAriaLabel", "primaryCtaAriaLabel": "primaryCtaAriaLabel", "primaryCtaAriaDescribedby": { "name": "primaryCtaAriaDescribedby", "platform": "web,ios" }, "secondaryCtaAriaLabel": "secondaryCtaAriaLabel", "secondaryCtaAriaDescribedby": { "name": "secondaryCtaAriaDescribedby", "platform": "web,ios" } } } } } };

const legacySizes$1 = ["s", "m"];
const PROP_MAP$h = (props) => {
  if (legacySizes$1.includes(props.size)) {
    console.warn("these values for the size prop are deprecated");
  }
  if (typeof props.header === "object") {
    console.warn(
      "passing listblock to the header is deprecated. Please pass a string"
    );
  }
  return {
    onCloseCallback: {
      properties: {
        onClose: props.onCloseCallback,
        onCloseCallback: props.onCloseCallback
      }
    },
    primaryCTA: {
      properties: {
        primaryCTA: props.primaryCTA?.title || props.primaryCTA,
        onPrimaryClick: props.primaryCTA?.onClick || props.onPrimaryClick
      }
    },
    secondaryCTA: {
      properties: {
        secondaryCTA: props.secondaryCTA?.title || props.secondaryCTA,
        onSecondaryClick: props.secondaryCTA?.onClick || props.onSecondaryClick
      }
    },
    isClosable: {
      properties: {
        isCloseable: typeof props.isCloseable === "undefined" ? props.isClosable : props.isCloseable
      }
    },
    size: {
      variations: {
        s: {
          size: "small"
        },
        m: {
          size: "medium"
        }
      }
    },
    children: {
      properties: {
        children: convertTextToComponent(props.children)
      }
    }
  };
};
const MODAL_SELECTOR$1 = "div.j-JDSModalMobileInternal-root-container";
const withLogic$$ = (Component) => (userProps) => {
  const props = modifyProps(userProps, PROP_MAP$h);
  const {
    onRequestClose,
    onCloseCallback,
    kind,
    isClosable,
    close: userCloseProp,
    closed,
    ...rest
  } = props;
  const { element, rootRef } = useRootRef();
  const modalRef = element?.querySelector(MODAL_SELECTOR$1);
  const closeProp = typeof userCloseProp === "undefined" ? closed : userCloseProp;
  const allowClose = !onRequestClose || onRequestClose();
  const close = () => {
    if (allowClose) {
      onCloseCallback?.();
      rest.onClose?.();
    }
  };
  useEscapeClose(close, kind === "informational");
  const handleClose = () => {
    if (kind === "informational") {
      close();
    }
  };
  useEffect(() => {
    if (!closeProp && modalRef) {
      modalRef.focus();
    }
  }, [closeProp]);
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...rest,
        kind,
        rootRef,
        _onModalClick: (ev) => ev.stopPropagation(),
        close: closeProp,
        _onCancel: close,
        onClose: handleClose,
        isCloseable: isClosable || props.isCloseable
      }
    }
  );
};

const Component$12 = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$Z;
  const { kind = "dialog", size = "medium", headerAlignment = "left", isCloseable = true, close = true, disableOutsideClick = false, onClose = noop, onPrimaryClick = noop, onSecondaryClick = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ kind, size, headerAlignment, isCloseable, close, disableOutsideClick, onClose, onPrimaryClick, onSecondaryClick, ...rest }, componentTag },
    "JDSModalMobile",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const Modal$1 = withLogic$$(Component$12);
Modal$1.displayName = "Modal";
Modal$1.slotName = "jds_modal_mobile";

const legacySizes = ["s", "m"];
const PROP_MAP$g = (props) => {
  if (legacySizes.includes(props.size)) {
    console.warn("these values for the size prop are deprecated");
  }
  if (typeof props.header === "object") {
    console.warn(
      "passing listblock to the header is deprecated. Please pass a string"
    );
  }
  return {
    onCloseCallback: {
      properties: {
        onClose: props.onCloseCallback,
        onCloseCallback: props.onCloseCallback
      }
    },
    onClose: {
      properties: {
        onCloseCallback: props.onClose
      }
    },
    primaryCTA: {
      properties: {
        primaryCTA: resolvePropObjectKeys(props.primaryCTA, "title", ""),
        onPrimaryClick: props.primaryCTA?.onClick || props.onPrimaryClick
      }
    },
    secondaryCTA: {
      properties: {
        secondaryCTA: resolvePropObjectKeys(props.secondaryCTA, "title", ""),
        onSecondaryClick: props.secondaryCTA?.onClick || props.onSecondaryClick
      }
    },
    isClosable: {
      properties: {
        isCloseable: typeof props.isCloseable === "undefined" ? props.isClosable : props.isCloseable
      }
    },
    size: {
      variations: {
        s: {
          size: "small"
        },
        m: {
          size: "medium"
        }
      }
    },
    children: {
      properties: {
        children: convertTextToComponent(props.children)
      }
    }
  };
};
const MODAL_SELECTOR = "div.j-JDSModalDesktopInternal-root-container";
const withLogic$_ = (Component) => (userProps) => {
  const props = modifyProps(userProps, PROP_MAP$g);
  const {
    onRequestClose,
    onCloseCallback,
    kind = "dialog",
    isClosable,
    close: userCloseProp,
    closed,
    ...rest
  } = props;
  const { element, rootRef } = useRootRef();
  const modalRef = element?.querySelector(MODAL_SELECTOR);
  const closeProp = typeof userCloseProp === "undefined" ? closed : userCloseProp;
  const { mobile } = Devices.useMedia();
  const allowClose = !onRequestClose || onRequestClose();
  const close = () => {
    if (allowClose) {
      onCloseCallback?.();
      rest?.onClose?.();
    }
  };
  useEscapeClose(close, kind === "informational");
  const handleClose = () => {
    if (kind === "informational") {
      close();
    }
  };
  useEffect(() => {
    if (!closeProp && modalRef) {
      modalRef.focus();
    }
    if (!closeProp) {
      document.body.style.overflow = "hidden";
    } else {
      document.body.style.overflow = "";
    }
    return () => {
      document.body.style.overflow = "";
    };
  }, [closeProp]);
  if (mobile) {
    return /* @__PURE__ */ jsx(Modal$1, { ...userProps });
  }
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...rest,
        kind,
        rootRef,
        _onModalClick: (ev) => ev.stopPropagation(),
        close: closeProp,
        _onCancel: close,
        onClose: handleClose
      }
    }
  );
};

const Component$11 = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$_;
  const { kind = "dialog", size = "medium", headerAlignment = "left", isCloseable = true, close = true, onClose = noop, onPrimaryClick = noop, onSecondaryClick = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ kind, size, headerAlignment, isCloseable, close, onClose, onPrimaryClick, onSecondaryClick, ...rest }, componentTag },
    "JDSModalDesktop",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const Modal = withLogic$_(Component$11);
Modal.displayName = "Modal";
Modal.slotName = "jds_modal_desktop";

const sdl$Y = { "metadata": { "version": "1.0.0", "id": "modal-desktop-1.0.0", "name": "JDSModalDesktopInternal", "layerName": "jds_modal_desktop_internal", "platform": "web", "description": "Modals focus the user’s attention exclusively on one task or piece of information via a window that sits on top of the page content. Dialog Modals are used to confirm with the user before continuing with destructive or complex actions. In this case the modal have two buttons at the bottom. Access to the rest of the UI is disabled until the modal is addressed.", "usage": "A dialog modal uses two buttons and requires immediate user response." }, "hierarchy": { "container": ["overlay-container", { "root-container": [{ "cancel-container": ["cancel-jds_button"] }, { "vertical-container": [{ "header-container": ["header-jds-text"] }, { "children-container": ["children-slot"] }, { "button-container": ["secondary-jds_action_button", "primary-jds_action_button"] }] }] }, { "custom-container": ["children-slot"] }] }, "base": { "container": { "flex-direction": "{m_0}", "justify-content": "{m_1}", "align-items": "{m_2}", "size": "{m_3}" }, "overlay-container": { "show": true, "size": "{m_7}", "background-color": "{m_8}", "opacity": "{m_9}" }, "root-container": { "z-index": 1, "flex-direction": "{m_10}", "justify-content": "{m_11}", "align-items": "{m_12}", "border-radius": "{m_13}", "background-color": "{m_14}", "width": "{m_15}", "max-height": "{m_16}" }, "cancel-container": { "flex-direction": "{m_17}", "justify-content": "{m_18}", "align-items": "{m_19}", "width": "{m_20}", "padding-top": "{m_21}", "padding-bottom": "{m_22}", "padding-left": "{m_23}", "padding-right": "{m_24}", "hidden": false }, "cancel-jds_button": { "hidden": false, "icon": "ic_close", "kind": "tertiary", "size": "medium" }, "vertical-container": { "flex-direction": "{m_25}", "justify-content": "{m_26}", "align-items": "{m_27}", "padding-left": "{m_28}", "padding-right": "{m_29}", "padding-bottom": "{m_30}", "width": "{m_31}", "overflow": "{m_32}" }, "header-container": { "flex-direction": "{m_34}", "justify-content": "{m_35}", "align-items": "{m_36}", "width": "{m_37}", "padding-bottom": "{m_38}" }, "children-container": { "width": "{m_39}", "overflow": "{m_40}" }, "button-container": { "width": "{m_41}", "justify-content": "{m_42}", "align-items": "{m_43}", "flex-direction": "{m_44}", "gap": "{m_45}", "padding-top": "{m_46}" }, "primary-jds_action_button": { "hidden": false, "kind": "primary", "size": "large", "stretch": false }, "secondary-jds_action_button": { "hidden": false, "kind": "secondary", "size": "large", "stretch": false }, "custom-container": { "hidden": true, "z-index": 1, "flex-direction": "{m_47}", "justify-content": "{m_48}", "align-items": "{m_49}", "border-radius": "{m_50}", "background-color": "{elevation1}", "padding-left": "{m_52}", "padding-right": "{m_53}", "padding-top": "{m_54}", "padding-bottom": "{m_55}", "max-width": "{m_56}", "max-height": "{m_57}", "overflow": "{m_33}" }, "header-jds-text": { "font-family": "{headingXs}", "color": "{primaryGrey100}", "font-size": "{headingXs}", "line-height": "{headingXs}", "letter-spacing": "{headingXs}", "font-weight": "{headingXs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" } }, "variant": { "kind": { "acknowledgement": { "primary-jds_action_button": { "stretch": true }, "secondary-jds_action_button": { "hidden": true } }, "informational": { "button-container": { "hidden": true } }, "custom": { "custom-container": { "hidden": false }, "root-container": { "hidden": true } } }, "headerAlignment": { "right": { "header-container": { "justify-content": "{m_58}" } }, "center": { "header-container": { "justify-content": "{m_59}" } } }, "size": { "small": { "vertical-container": { "padding-left": "{m_60}", "padding-right": "{m_61}", "padding-bottom": "{m_62}" } } }, "primaryCtaDisabled": { "true": { "primary-jds_action_button": { "state": "disabled" } } }, "secondaryCtaDisabled": { "true": { "secondary-jds_action_button": { "state": "disabled" } } }, "_hasCta": { "false": { "button-container": { "hidden": true } } } }, "combination": [{ "dialog": { "false": { "cancel-container": { "hidden": true }, "vertical-container": { "padding-top": "{m_63}" } } }, "acknowledgement": { "false": { "cancel-container": { "hidden": true }, "vertical-container": { "padding-top": "{m_64}" } } } }, { "medium": { "desktop": { "root-container": { "width": "584" } }, "tablet": { "root-container": { "width": "464" } } }, "small": { "desktop": { "root-container": { "width": "412" } }, "tablet": { "root-container": { "width": "412" } } } }], "combination_config": [["kind", "isCloseable"], ["size", "_platform"]], "api": { "config": { "kind": { "values": ["dialog", "acknowledgement", "informational", "custom"], "doc_description": "It can be used to switch between 3 variants of Modal. `informational` modal has no buttons,`dialog` modal has two buttons, `acknowledgement` modal has only a single button." }, "size": { "values": ["medium", "small"], "doc_description": "It can be used to control the size of popup container." }, "headerAlignment": { "values": ["left", "right", "center"], "doc_description": "It is used to align header of Modal." }, "isCloseable": { "values": [true, false], "doc_description": "It can be used to makes Modal closeable, displays close icon button on popup." }, "primaryCtaDisabled": { "values": [false, true] }, "secondaryCtaDisabled": { "values": [false, true] }, "_platform": { "values": ["desktop", "tablet"] }, "_hasCta": { "values": [true, false] } }, "data": { "primary-jds_action_button": { "label": { "type": "string", "name": "primaryCTA", "doc_description": "It displays label of primary button of Modal." } }, "secondary-jds_action_button": { "label": { "type": "string", "name": "secondaryCTA", "doc_description": "It displays label of secondary button of Modal." } }, "header-jds-text": { "value": { "type": "string", "name": "header", "doc_description": "It displays the title of modal." } } }, "children": { "children-slot": { "name": "children", "accepts": ["any"], "max": 1, "doc_description": "This sets Modal content as a children elements eg. `<Modal> <Table /> <Modal/>`" } }, "events": { "root-container": { "onClick": "onModalClick" }, "custom-container": { "onClick": "onModalClick" }, "cancel-jds_button": { "onClick": "onCancel" }, "primary-jds_action_button": { "onClick": "onPrimaryClick" }, "secondary-jds_action_button": { "onClick": "onSecondaryClick" } }, "a11y": { "container": { "properties": { "role": { "value": "dialog" }, "aria-label": { "name": "ariaLabel", "value": "Modal Content" }, "aria-modal": { "name": "_ariaModal", "value": "true" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" } } }, "cancel-jds_button": { "properties": { "ariaLabel": { "name": "cancelButtonCtaAriaLabel", "value": "Close Modal" } } }, "primary-jds_action_button": { "properties": { "ariaLabel": "primaryCtaAriaLabel", "ariaDescribedby": { "name": "primaryCtaAriaDescribedby", "platform": "web,ios" } } }, "secondary-jds_action_button": { "properties": { "ariaLabel": "secondaryCtaAriaLabel", "ariaDescribedby": { "name": "secondaryCtaAriaDescribedby", "platform": "web,ios" } } } } } };

const withLogic$Z = (Component) => (props) => {
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        _hasCta: Boolean(props.primaryCTA || props.secondaryCTA)
      }
    }
  );
};

const Component$10 = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$Y;
  const { kind = "dialog", size = "medium", headerAlignment = "left", isCloseable = true, primaryCtaDisabled = false, secondaryCtaDisabled = false, onModalClick = noop, onCancel = noop, onPrimaryClick = noop, onSecondaryClick = noop, ariaLabel = "Modal Content", cancelButtonCtaAriaLabel = "Close Modal", _ariaModal = "true", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ kind, size, headerAlignment, isCloseable, primaryCtaDisabled, secondaryCtaDisabled, onModalClick, onCancel, onPrimaryClick, onSecondaryClick, ariaLabel, cancelButtonCtaAriaLabel, _ariaModal, ...rest }, componentTag },
    "JDSModalDesktopInternal",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const ModalDesktopInternal = withLogic$Z(Component$10);
ModalDesktopInternal.displayName = "ModalDesktopInternal";
ModalDesktopInternal.slotName = "jds_modal_desktop_internal";

const sdl$X = { "metadata": { "version": "1.0.0", "id": "modal-mobile-1.0.0", "name": "JDSModalMobileInternal", "layerName": "jds_modal_mobile_internal" }, "hierarchy": { "container": ["overlay-container", { "outer-container": [{ "root-container": [{ "cancel-container": ["cancel-jds_button"] }, { "vertical-container": [{ "header-container": ["header-jds-text"] }, { "children-container": ["children-slot"] }, { "button-container": ["primary-jds_action_button", "secondary-jds_action_button"] }] }] }, { "custom-container": ["children-slot"] }] }] }, "base": { "container": { "flex-direction": "{m_0}", "justify-content": "{m_1}", "align-items": "{m_2}", "size": "{m_3}" }, "overlay-container": { "show": true, "size": "{m_4}", "background-color": "{m_5}", "opacity": "{m_6}" }, "outer-container": { "z-index": 1, "flex-direction": "{m_14}", "justify-content": "{m_15}", "align-items": "{m_16}", "max-height": "{m_19}", "width": "{m_18}", "padding-top": "{m_20}", "padding-bottom": "{m_21}", "padding-left": "{m_22}", "padding-right": "{m_23}" }, "root-container": { "flex-direction": "{m_7}", "justify-content": "{m_8}", "align-items": "{m_9}", "border-radius": "{m_10}", "width": "{m_11}", "background-color": "{m_13}", "max-height": "{m_12}" }, "cancel-container": { "flex-direction": "{m_24}", "justify-content": "{m_25}", "align-items": "{m_26}", "width": "{m_27}", "padding-top": "{m_28}", "padding-bottom": "{m_29}", "padding-left": "{m_30}", "padding-right": "{m_31}", "hidden": false }, "cancel-jds_button": { "hidden": false, "icon": "ic_close", "kind": "tertiary", "size": "medium" }, "vertical-container": { "flex-direction": "{m_32}", "justify-content": "{m_33}", "align-items": "{m_34}", "width": "{m_35}", "padding-left": "{m_36}", "padding-right": "{m_37}", "padding-bottom": "{m_38}", "overflow": "{m_39}" }, "header-container": { "flex-direction": "{m_40}", "justify-content": "{m_41}", "align-items": "{m_42}", "width": "{m_43}", "padding-bottom": "{m_44}" }, "children-container": { "width": "{m_46}", "overflow": "{m_47}", "flex-direction": "{m_48}", "align-items": "{m_45}", "flex-fill-android": false }, "button-container": { "width": "{m_49}", "justify-content": "{m_50}", "align-items": "{m_51}", "flex-direction": "{m_52}", "gap": "{m_53}", "padding-top": "{m_54}" }, "primary-jds_action_button": { "hidden": false, "kind": "primary", "size": "large", "stretch": true }, "secondary-jds_action_button": { "hidden": false, "kind": "secondary", "size": "large", "stretch": true }, "custom-container": { "hidden": true, "flex-direction": "{m_55}", "justify-content": "{m_56}", "align-items": "{m_57}", "border-radius": "{m_58}", "background-color": "{elevation1}", "padding-left": "{m_60}", "padding-right": "{m_61}", "padding-top": "{m_62}", "padding-bottom": "{m_63}", "width": "{m_64}" }, "header-jds-text": { "font-family": "{headingXs}", "color": "{primaryGrey100}", "font-size": "{headingXs}", "line-height": "{headingXs}", "letter-spacing": "{headingXs}", "font-weight": "{headingXs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" } }, "variant": { "kind": { "acknowledgement": { "primary-jds_action_button": { "stretch": true }, "secondary-jds_action_button": { "hidden": true } }, "informational": { "button-container": { "hidden": true } }, "custom": { "custom-container": { "hidden": false }, "root-container": { "hidden": true } } }, "headerAlignment": { "right": { "header-container": { "justify-content": "{m_65}" } }, "center": { "header-container": { "justify-content": "{m_66}" } } }, "size": { "small": { "vertical-container": { "padding-left": "{m_67}", "padding-right": "{m_68}", "padding-bottom": "{m_69}" } } }, "primaryCtaDisabled": { "true": { "primary-jds_action_button": { "state": "disabled" } } }, "secondaryCtaDisabled": { "true": { "secondary-jds_action_button": { "state": "disabled" } } }, "_hasCta": { "false": { "button-container": { "hidden": true } } } }, "combination": [{ "dialog": { "false": { "cancel-container": { "hidden": true }, "vertical-container": { "padding-top": "{m_70}" } } }, "acknowledgement": { "false": { "cancel-container": { "hidden": true }, "vertical-container": { "padding-top": "{m_71}" } } } }], "combination_config": [["kind", "isCloseable"]], "api": { "config": { "kind": { "values": ["dialog", "acknowledgement", "informational", "custom"] }, "size": { "values": ["medium", "small"] }, "headerAlignment": { "values": ["left", "right", "center"] }, "isCloseable": { "values": [true, false] }, "primaryCtaDisabled": { "values": [false, true] }, "secondaryCtaDisabled": { "values": [false, true] }, "_hasCta": { "values": [true, false] } }, "data": { "primary-jds_action_button": { "label": { "type": "string", "name": "primaryCTA" } }, "secondary-jds_action_button": { "label": { "type": "string", "name": "secondaryCTA" } }, "header-jds-text": { "value": { "type": "string", "name": "header" } } }, "children": { "children-slot": { "name": "children", "accepts": ["any"], "max": 1, "doc_description": "This sets Modal content as a children elements." } }, "events": { "root-container": { "onClick": "onModalClick" }, "cancel-jds_button": { "onClick": "onCancel" }, "primary-jds_action_button": { "onClick": "onPrimaryClick" }, "secondary-jds_action_button": { "onClick": "onSecondaryClick" } }, "a11y": { "container": { "properties": { "role": { "value": "dialog" }, "aria-label": { "name": "ariaLabel", "value": "Modal Content" }, "aria-modal": { "name": "_ariaModal", "value": "true" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" } } }, "cancel-jds_button": { "properties": { "ariaLabel": { "name": "cancelButtonCtaAriaLabel", "value": "Close Modal" } } }, "header-jds_text": { "properties": { "aria-label": { "name": "headerAriaLabel", "prop": "header" } } }, "primary-jds_action_button": { "properties": { "ariaLabel": "primaryCtaAriaLabel", "ariaDescribedby": { "name": "primaryCtaAriaDescribedby", "platform": "web,ios" } } }, "secondary-jds_action_button": { "properties": { "ariaLabel": "secondaryCtaAriaLabel", "ariaDescribedby": { "name": "secondaryCtaAriaDescribedby", "platform": "web,ios" } } } } } };

const withLogic$Y = (Component) => (props) => {
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        _hasCta: Boolean(props.primaryCTA || props.secondaryCTA)
      }
    }
  );
};

const Component$$ = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$X;
  const { kind = "dialog", size = "medium", headerAlignment = "left", isCloseable = true, primaryCtaDisabled = false, secondaryCtaDisabled = false, onModalClick = noop, onCancel = noop, onPrimaryClick = noop, onSecondaryClick = noop, ariaLabel = "Modal Content", cancelButtonCtaAriaLabel = "Close Modal", headerAriaLabel = props.header?.toString(), _ariaModal = "true", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ kind, size, headerAlignment, isCloseable, primaryCtaDisabled, secondaryCtaDisabled, onModalClick, onCancel, onPrimaryClick, onSecondaryClick, ariaLabel, cancelButtonCtaAriaLabel, headerAriaLabel, _ariaModal, ...rest }, componentTag },
    "JDSModalMobileInternal",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const ModalMobileInternal = withLogic$Y(Component$$);
ModalMobileInternal.displayName = "ModalMobileInternal";
ModalMobileInternal.slotName = "jds_modal_mobile_internal";

const sdl$W = { "metadata": { "version": "1.0.0", "id": "notification-button-1.0.0", "name": "JDSNotificationButton", "layerName": "jds_notification_button" }, "hierarchy": { "container": ["jds-text", "icon"] }, "base": { "container": { "padding-top": "{n_0}", "padding-right": "{n_1}", "padding-bottom": "{n_2}", "padding-left": "{n_3}", "background-color": "{n_4}", "border-radius": 1e3, "border-width": "1", "border-color": "{n_5}", "behavior": { "hover": { "border-color": "{n_6}" }, "active": { "background-color": "{n_7}" }, "focus": { "border-width": "4", "border-color": "{n_8}" } } }, "icon": { "size": "{n_14}", "color": "{n_13}" }, "jds-text": { "font-family": "{button}", "color": "{primary20}", "font-size": "{button}", "line-height": "{button}", "letter-spacing": "{button}", "font-weight": "{button}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" } }, "variant": { "isDisabled": { "true": { "container": { "disabled": true, "opacity": "{n_9}" } } }, "kind": { "tertiary": { "container": { "border-width": "0", "behavior": { "hover": { "background-color": "{n_10}" }, "active": { "background-color": "{n_11}" }, "focus": { "background-color": "{n_12}" } } } } }, "_hasLabel": { "false": { "container": { "padding-top": "{n_15}", "padding-bottom": "{n_16}", "padding-left": "{n_17}", "padding-right": "{n_18}" }, "jds-text": { "hidden": true } } }, "_hasIcon": { "true": { "icon": { "hidden": false } } } }, "api": { "config": { "isDisabled": { "values": [false, true] }, "kind": { "values": ["secondary", "tertiary"] }, "_hasLabel": { "values": [true, false] }, "_hasIcon": { "values": [false, true] } }, "data": { "icon": { "value": { "type": "icon", "name": "icon" } }, "jds-text": { "value": { "type": "string", "name": "label" } } }, "events": { "container": { "onClick": "onClick" } } } };

const withLogic$X = (Component) => (props) => {
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{ ...props, _hasLabel: Boolean(props.label), tabIndex: 0 }
    }
  );
};

const Component$_ = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$W;
  const { isDisabled = false, kind = "secondary", onClick = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ isDisabled, kind, onClick, ...rest }, componentTag },
    "JDSNotificationButton",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const NotificationButton = withLogic$X(Component$_);
NotificationButton.displayName = "NotificationButton";
NotificationButton.slotName = "jds_notification_button";

const sdl$V = { "metadata": { "version": "1.0.0", "id": "nudge-1.0.0", "name": "JDSNudge", "layerName": "jds_nudge" }, "hierarchy": { "root-container": [{ "base-container": ["left-slot", { "center-container": ["heading-jds-text", "support-jds-text"] }, "close-jds_notification_button", "right-slot"] }, { "buttons-container": ["secondary-jds_notification_button", "primary-jds_notification_button"] }] }, "base": { "root-container": { "width": "{n_0}", "max-width": "{n_1}", "border-radius": "{n_2}", "background-color": "{n_3}", "flex-direction": "{n_4}", "gap": "{n_5}", "padding-top": "{n_6}", "padding-right": "{n_7}", "padding-bottom": "{n_8}", "padding-left": "{n_9}", "enter-animation-name": "slideVerticallyDown", "exit-animation-name": "slideVerticallyUp", "enter-animation-curve": "entrance_ease", "exit-animation-curve": "exit_ease", "enter-animation-duration": 500, "exit-animation-duration": 500, "transition": { "property": ["translate-x", "translate-y"], "duration": "{medium}", "timing-function": "{easeJoyfulExit}" }, "hidden": true }, "base-container": { "gap": "{n_10}", "flex-direction": "{n_12}", "justify-content": "{n_13}", "align-items": "{n_14}", "width": "{n_11}" }, "center-container": { "flex-direction": "{n_15}", "justify-content": "{n_16}", "align-items": "{n_17}", "gap": "{n_18}", "flex": 1 }, "close-jds_notification_button": { "hidden": false, "icon": "ic_close", "kind": "tertiary" }, "buttons-container": { "show": false, "gap": "{n_20}", "flex-direction": "{n_21}", "justify-content": "{n_22}", "width": "{n_19}" }, "secondary-jds_notification_button": { "kind": "tertiary" }, "right-slot": { "hidden": true }, "heading-jds-text": { "font-family": "{bodySBold}", "color": "{primaryBackground}", "font-size": "{bodySBold}", "line-height": "{bodySBold}", "letter-spacing": "{bodySBold}", "font-weight": "{bodySBold}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "max-lines": 1, "maxLines": 1 }, "support-jds-text": { "font-family": "{bodyXs}", "color": "{primaryGrey20}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "max-lines": 1, "maxLines": 1 } }, "variant": { "open": { "true": { "root-container": { "hidden": false, "transition": { "timing-function": "{easeJoyfulEntrance}" } } } }, "showClose": { "false": { "close-jds_notification_button": { "hidden": true }, "right-slot": { "hidden": false } } }, "_platform": { "tablet": { "root-container": { "max-width": "{n_23}", "enter-animation-name": "slideHorizontallyToLeft", "exit-animation-name": "slideHorizontallyToRight" } }, "desktop": { "root-container": { "max-width": "{n_24}", "enter-animation-name": "slideHorizontallyToLeft", "exit-animation-name": "slideHorizontallyToRight" } } }, "_hasCTA": { "false": { "buttons-container": { "hidden": true } } }, "_hasDescription": { "false": { "support-jds-text": { "hidden": true }, "heading-jds-text": { "max-lines": 2, "maxLines": 2 } } } }, "combination": [{ "false": { "mobile": { "root-container": { "translate-y": "{size.negativeMax}" } }, "tablet": { "root-container": { "translate-x": "{size.max}" } }, "desktop": { "root-container": { "translate-x": "{size.max}" } } }, "true": { "mobile": { "root-container": { "translate-y": 0 } }, "tablet": { "root-container": { "translate-x": 0 } }, "desktop": { "root-container": { "translate-x": 0 } } } }], "combination_config": [["open", "_platform"]], "api": { "config": { "open": { "values": [false, true] }, "showClose": { "values": [true, false], "doc_description": "This shows close button on Nudge when true." }, "_platform": { "values": ["mobile", "tablet", "desktop"] }, "_hasCTA": { "values": [true, false] }, "_hasDescription": { "values": [true, false] } }, "data": { "root-container": { "_nudge.id": { "type": "NotificationId", "name": "id", "required": true, "doc_description": "It will hold the reference of Nudge" } }, "secondary-jds_notification_button": { "label": { "type": "string", "name": "secondaryCTA", "doc_description": "It displays label of secondary button of Nudge." } }, "primary-jds_notification_button": { "label": { "type": "string", "name": "primaryCTA", "doc_description": "It displays label of primary button of Nudge." } }, "heading-jds-text": { "value": { "type": "string", "name": "title", "doc_description": "It displays the title of Nudge." } }, "support-jds-text": { "value": { "type": "string", "name": "description", "doc_description": "It can be used to add description to the Nudge." }, "maxLines": { "type": "number", "name": "maxLines", "doc_description": "Allows customization of max lines for the description text." } } }, "events": { "root-container": { "onShow": "onShow", "onHover": { "name": "onHover", "platform": "web" }, "onUpdate": { "name": "onUpdate", "platform": "android" }, "onHoverEnd": { "name": "onHoverEnd", "platform": "web" }, "onSwipeUp": "onClose" }, "close-jds_notification_button": { "onClick": "onClose" }, "secondary-jds_notification_button": { "onClick": "onSecondaryClick" }, "primary-jds_notification_button": { "onClick": "onPrimaryClick" } }, "children": { "left-slot": { "accepts": ["jds_icon", "jds_avatar"], "max": 1, "name": "prefix", "doc_description": "It takes 'icon', 'avatar' as prefix." }, "right-slot": { "accepts": ["jds_notification_button"], "max": 1, "name": "suffix", "doc_description": "It takes 'jds_notification_button' as suffix." } }, "a11y": { "root-container": { "properties": { "role": { "value": "alertdialog" }, "aria-label": { "name": "ariaLabel", "prop": "title" } } }, "base-container": { "properties": { "aria-hidden": { "value": "true" } } } } } };

const PROP_MAP$f = (props) => {
  return {
    primaryCTA: {
      properties: {
        primaryCTA: resolvePropObjectKeys(props.primaryCTA, "title", ""),
        onPrimaryClick: props.primaryCTA?.onClick
      }
    },
    secondaryCTA: {
      properties: {
        secondaryCTA: resolvePropObjectKeys(props.secondaryCTA, "title", ""),
        onPrimaryClick: props.secondaryCTA?.onClick
      }
    }
  };
};

function subscribe(eventClass, func) {
  const handler = function() {
    func(eventClass.args);
  };
  document.addEventListener(eventClass.eventName, handler, { passive: true });
  return {
    unsubscribe: function unsubscribe() {
      document.removeEventListener(eventClass.eventName, handler);
    }
  };
}
function publish(event) {
  const nativeEvent = new CustomEvent(event.constructor.eventName, {
    detail: event.constructor.args
  });
  document.dispatchEvent(nativeEvent);
}

const DEFAULT_DISMISS_WITH_CTA = 10;
const DEFAULT_DISMISS_WITHOUT_CTA = 5;
const TOAST_SELECTOR = "div.j-JDSToast-root-container";
const resolvePrefixIcon = (props) => {
  if (typeof props.prefix === "string")
    return /* @__PURE__ */ jsx(Icon, { ic: props.prefix });
  return props.prefix;
};
function getDismissTime(isCTAPresent, dismissAfter) {
  let timer = DEFAULT_DISMISS_WITHOUT_CTA;
  if (isCTAPresent) {
    timer = DEFAULT_DISMISS_WITH_CTA;
  }
  if (dismissAfter !== void 0) {
    const defaultMinTimer = 2;
    const defaultMaxTimer = isCTAPresent ? DEFAULT_DISMISS_WITH_CTA : DEFAULT_DISMISS_WITHOUT_CTA;
    if (dismissAfter < defaultMinTimer) {
      timer = defaultMinTimer;
    } else if (dismissAfter < defaultMaxTimer) {
      timer = dismissAfter;
    }
  }
  return timer;
}
const withLogic$W = (Component) => (userProps) => {
  const props = modifyProps(userProps, PROP_MAP$f);
  const {
    onClose,
    onShow,
    primaryCTA,
    secondaryCTA,
    showClose,
    id: userId,
    suffix,
    dismissAfter,
    ...rest
  } = props;
  const uniqueId = userId || `toast-${Math.random().toString(36).substr(2, 9)}`;
  const [closeToast, setCloseToast] = useState();
  const [timeToClose, setTimeToClose] = useState(0);
  const [intervalID, setIntervalID] = useState();
  const { rootRef, element } = useRootRef();
  const isCTAPresent = !!(primaryCTA || secondaryCTA);
  const TOAST_CLOSING_TIME = getDismissTime(isCTAPresent, dismissAfter);
  const platformClass = getPlatform() === "mobile" ? "mobile-toast" : "desktop-toast";
  const [toastQueue, setToastQueue] = useState([]);
  const [timeouts, setTimeouts] = useState(
    {}
  );
  useEffect(() => {
    if (!toastQueue.includes(uniqueId)) {
      setToastQueue((prevQueue) => [...prevQueue, uniqueId]);
    }
    const dismissTimer = setTimeout(() => {
      setToastQueue((prevQueue) => prevQueue.filter((id) => id !== uniqueId));
      handleToastUnmount();
    }, TOAST_CLOSING_TIME * 1e3);
    setTimeouts((prevTimeouts) => ({
      ...prevTimeouts,
      [uniqueId]: dismissTimer
    }));
    return () => {
      clearTimeout(dismissTimer);
      setTimeouts((prevTimeouts) => {
        const newTimeouts = { ...prevTimeouts };
        delete newTimeouts[uniqueId];
        return newTimeouts;
      });
    };
  }, [uniqueId, TOAST_CLOSING_TIME]);
  const handleToastUnmount = useCallback(() => {
    console.log("unmount");
    setToastQueue((prevQueue) => prevQueue.filter((id) => id !== uniqueId));
    if (toast && typeof toast.dismiss === "function") {
      toast.dismiss(uniqueId);
    }
    onClose?.(uniqueId);
    if (timeouts[uniqueId]) {
      clearTimeout(timeouts[uniqueId]);
      setTimeouts((prevTimeouts) => {
        const newTimeouts = { ...prevTimeouts };
        delete newTimeouts[uniqueId];
        return newTimeouts;
      });
    }
    if (element?.classList.contains("visible") && timeouts[uniqueId]) {
      element.classList.remove("visible");
    }
    setCloseToast(true);
  }, [uniqueId, onClose, timeouts]);
  const handleToastStart = useCallback(() => {
    console.log("mount");
    if (timeToClose <= TOAST_CLOSING_TIME) {
      const intervalID2 = setInterval(() => {
        setTimeToClose((time) => {
          if (time === 10) {
            clearInterval(intervalID2);
          }
          return time + 0.5;
        });
      }, 500);
      setIntervalID(intervalID2);
    }
  }, [TOAST_CLOSING_TIME, timeToClose]);
  const handleToastPause = useCallback(() => {
    if (timeToClose !== TOAST_CLOSING_TIME)
      clearInterval(intervalID);
  }, [timeToClose, TOAST_CLOSING_TIME, intervalID]);
  useEffect(() => {
    uniqueId && onShow && onShow(uniqueId);
    setTimeout(() => setCloseToast(false), 10);
    const toastElement = document.querySelector(
      TOAST_SELECTOR
    );
    if (toastElement) {
      toastElement.setAttribute("tabindex", "0");
      toastElement.focus();
    }
    const { unsubscribe: toastCloseUnsubscribe } = subscribe(
      NotificationCloseService,
      (data) => {
        if (uniqueId && data[uniqueId] === "toast") {
          handleToastClose();
        }
      }
    );
    if (window) {
      handleToastStart();
      window.addEventListener("blur", handleToastPause);
      window.addEventListener("focus", handleToastStart);
    }
    return () => {
      if (window) {
        window.removeEventListener("blur", handleToastPause);
        window.removeEventListener("focus", handleToastStart);
      }
      uniqueId && onClose && onClose(uniqueId);
      toastCloseUnsubscribe();
    };
  }, [uniqueId]);
  useEffect(() => {
    if (timeToClose === TOAST_CLOSING_TIME)
      handleToastClose();
  }, [timeToClose, TOAST_CLOSING_TIME]);
  const handleToastClose = () => {
    setCloseToast(true);
  };
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        onClose: handleToastUnmount,
        onMouseEnter: () => {
          handleToastPause();
        },
        onMouseLeave: () => {
          handleToastStart();
        },
        ...rest,
        prefix: resolvePrefixIcon(props),
        open: true,
        suffix: suffix?.props ? suffix : /* @__PURE__ */ jsx(NotificationButton, { ...suffix }),
        className: `v1 ${closeToast === false ? "visible" : ""} ${platformClass}`,
        rootRef,
        _hasCTA: Boolean(primaryCTA || secondaryCTA),
        _hasDescription: Boolean(rest.description),
        _platform: getPlatform(),
        showClose,
        primaryCTA,
        secondaryCTA
      }
    }
  );
};

const PROP_MAP$e = (props) => {
  return {
    primaryCTA: {
      properties: {
        primaryCTA: resolvePropObjectKeys(props.primaryCTA, "title", ""),
        onPrimaryClick: props.primaryCTA?.onClick
      }
    },
    secondaryCTA: {
      properties: {
        secondaryCTA: resolvePropObjectKeys(props.secondaryCTA, "title", ""),
        onPrimaryClick: props.secondaryCTA?.onClick
      }
    }
  };
};
const NUDGE_CLOSING_TIME = 5;
const withLogic$V = (Component) => (userProps) => {
  const props = modifyProps(userProps, PROP_MAP$e);
  const {
    primaryCTA,
    secondaryCTA,
    showClose,
    id,
    onShow,
    onClose,
    suffix,
    maxLines,
    ...rest
  } = props;
  const { element, rootRef } = useRootRef();
  const [closeNudge, setCloseNudge] = useState(true);
  const [timeToClose, setTimeToClose] = useState(0);
  const [intervalID, setIntervalID] = useState();
  const defaultMaxLine = 1;
  const isCTAGroupAbsent = !(primaryCTA && secondaryCTA || (primaryCTA || secondaryCTA) && showClose);
  const handleNudgeUnmount = useCallback(() => {
    if (id) {
      nudge.dismiss(id);
      if (element?.classList.contains("visible")) {
        element.classList.remove("visible");
      }
      onClose?.(id);
      setCloseNudge(true);
    }
  }, [id, onClose]);
  useEffect(() => {
    id && onShow && onShow(id);
    setTimeout(() => setCloseNudge(false), 10);
    const { unsubscribe: nudgeCloseUnsubscribe } = subscribe(
      NotificationCloseService,
      (data) => {
        if (id && data[id] === "nudge") {
          handleNudgeClose();
        }
      }
    );
    if (window) {
      handleNudgeStart();
      window.addEventListener("blur", handleNudgePause);
      window.addEventListener("focus", handleNudgeStart);
    }
    return () => {
      if (window) {
        window.removeEventListener("blur", handleNudgePause);
        window.removeEventListener("focus", handleNudgeStart);
      }
      id && onClose && onClose(id);
      nudgeCloseUnsubscribe();
    };
  }, [id]);
  useEffect(() => {
    if (isCTAGroupAbsent && timeToClose >= NUDGE_CLOSING_TIME)
      handleNudgeUnmount();
  }, [timeToClose, handleNudgeUnmount, isCTAGroupAbsent]);
  const handleNudgeStart = () => {
    if (isCTAGroupAbsent && timeToClose !== NUDGE_CLOSING_TIME) {
      const intervalID2 = setInterval(() => {
        setTimeToClose((time) => {
          if (time === 10) {
            clearInterval(intervalID2);
            return time;
          }
          return time + 0.5;
        });
      }, 500);
      setIntervalID(intervalID2);
    }
  };
  const handleNudgePause = () => {
    if (isCTAGroupAbsent && timeToClose !== NUDGE_CLOSING_TIME)
      clearInterval(intervalID);
  };
  const handleNudgeClose = () => {
    setCloseNudge(true);
  };
  useEffect(() => {
    if (element) {
      const el = element.querySelector(
        '[data-testid="JDSNudge-support-jds-text"]'
      );
      if (el) {
        el.style.setProperty("--max-lines", `${maxLines || defaultMaxLine}`);
      }
    }
  }, [element, maxLines]);
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        onClose: handleNudgeUnmount,
        onMouseEnter: () => {
          handleNudgePause();
        },
        onMouseLeave: () => {
          handleNudgeStart();
        },
        ...rest,
        prefix: resolvePrefixIcon(props),
        suffix: suffix?.props ? suffix : /* @__PURE__ */ jsx(NotificationButton, { ...suffix }),
        rootRef,
        open: true,
        className: closeNudge === false ? "visible" : "",
        showClose,
        primaryCTA,
        secondaryCTA,
        maxLines: maxLines ?? defaultMaxLine,
        _platform: getPlatform(),
        _hasCTA: Boolean(primaryCTA || secondaryCTA),
        _hasDescription: Boolean(rest.description)
      }
    }
  );
};

const Component$Z = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$V;
  const { open = false, showClose = true, onShow = noop, onHover = noop, onUpdate = noop, onHoverEnd = noop, onClose = noop, onSecondaryClick = noop, onPrimaryClick = noop, ariaLabel = props.title?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ open, showClose, onShow, onHover, onUpdate, onHoverEnd, onClose, onSecondaryClick, onPrimaryClick, ariaLabel, ...rest }, componentTag },
    "JDSNudge",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const Nudge = withLogic$V(Component$Z);
Nudge.displayName = "Nudge";
Nudge.slotName = "jds_nudge";

const sdl$U = { "metadata": { "version": "1.0.0", "id": "pagination-button-1.0.0", "name": "JDSPaginationButton", "layerName": "jds_pagination_button" }, "hierarchy": { "container": [{ "inner-container": ["jds-text"] }] }, "base": { "container": { "size": "{p_0}", "justify-content": "{p_1}", "align-items": "{p_2}", "behavior": { "hover": {}, "focus": {}, "active": {} } }, "inner-container": { "background-color": "{p_3}", "flex-direction": "{p_4}", "justify-content": "{p_5}", "align-items": "{p_6}", "border-radius": "{p_7}", "width": "{p_8}", "height": "{p_9}", "opacity": "{p_10}", "gap": "{p_11}", "border-color": "{p_12}", "behavior": { "hover": { "background-color": "{p_13}" }, "active": { "background-color": "{p_14}" }, "focus": { "border-width": "{p_15}" } } }, "jds-text": { "font-family": "{button}", "color": "{primary40}", "font-size": "{button}", "line-height": "{button}", "letter-spacing": "{button}", "font-weight": "{button}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": false, "behavior": { "hover": { "color": "{primary60}" }, "active": { "color": "{primary60}" }, "focus": { "color": "{primary60}" } } } }, "variant": { "state": { "selected": { "inner-container": { "background-color": "{p_16}" }, "jds-text": { "color": "{primary30}" } }, "ellipsis": { "container": { "disabled": true }, "inner-container": { "background-color": "{p_17}" }, "jds-text": { "color": "{primaryGrey80}" } } } }, "combination": [{}], "combination_config": [[]], "api": { "config": { "state": { "values": ["default", "selected", "ellipsis"] } }, "data": { "jds-text": { "value": { "type": "string", "name": "text" } } }, "events": { "container": { "onClick": "onClick", "onFocus": { "name": "onFocus", "platform": "web" }, "onBlur": { "name": "onBlur", "platform": "web" } } }, "a11y": { "container": { "properties": { "role": { "value": "button" }, "aria-current": "_ariaCurrent" } } } } };

const withLogic$U = (Component) => (props) => {
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        _ariaCurrent: props.state === "selected" ? "page" : void 0
      }
    }
  );
};

const Component$Y = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$U;
  const { state = "default", onClick = noop, onFocus = noop, onBlur = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ state, onClick, onFocus, onBlur, ...rest }, componentTag },
    "JDSPaginationButton",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const PaginationButton = withLogic$U(Component$Y);
PaginationButton.displayName = "PaginationButton";
PaginationButton.slotName = "jds_pagination_button";

const sdl$T = { "metadata": { "version": "1.0.0", "id": "progress-bar-1.0.0", "name": "JDSProgressBar", "layerName": "jds_progress_bar" }, "hierarchy": { "container": [{ "top-container": ["jds-text", "value-jds-text"] }, { "determinate-container": ["active-container", "invisible-container"] }, { "indeterminate-container": ["track-container", "active-animatedContainer"] }] }, "base": { "container": { "hidden": false, "flex-direction": "{p_0}", "justify-content": "{p_1}", "align-items": "{p_2}", "gap": "{p_3}", "width": "{p_4}", "background-color": "{p_5}" }, "top-container": { "hidden": false, "show": false, "background-color": "{p_6}", "flex-direction": "{p_7}", "justify-content": "{p_8}", "align-items": "{p_9}", "width": "{p_10}", "gap": "{p_11}" }, "determinate-container": { "hidden": false, "background-color": "{p_12}", "height": "{p_13}", "width": "{p_14}", "flex-direction": "{p_15}", "justify-content": "{p_16}", "align-items": "{p_17}", "border-radius": "{p_18}" }, "active-container": { "background-color": "{p_19}", "height": "{p_20}", "border-radius": "{p_21}", "show": true }, "invisible-container": { "height": "{p_22}", "show": true }, "indeterminate-container": { "hidden": true, "flex-direction": "{p_23}", "background-color": "{p_24}", "height": "{p_25}", "width": "{p_26}", "border-radius": "{p_27}", "overflow": "hidden" }, "track-container": { "height": "{p_28}", "show": true }, "active-animatedContainer": { "height": "{p_29}", "width": "{p_30}", "background-color": "{p_31}", "z-index": 1, "border-radius": "{p_32}", "animation-curve": "entrance_ease", "animation-duration": 1e3 }, "jds-text": { "font-family": "{bodyS}", "color": "{primaryGrey100}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" }, "value-jds-text": { "font-family": "{bodySBold}", "color": "{primary60}", "font-size": "{bodySBold}", "line-height": "{bodySBold}", "letter-spacing": "{bodySBold}", "font-weight": "{bodySBold}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" } }, "variant": { "kind": { "indeterminate": { "determinate-container": { "hidden": true }, "indeterminate-container": { "hidden": false } } }, "state": { "success": { "active-container": { "background-color": "{p_33}" }, "active-animatedContainer": { "background-color": "{p_34}" } }, "error": { "active-container": { "background-color": "{p_35}" }, "active-animatedContainer": { "background-color": "{p_36}" } }, "warning": { "active-container": { "background-color": "{p_37}" }, "active-animatedContainer": { "background-color": "{p_38}" } } }, "labelPosition": { "center": { "top-container": { "justify-content": "{p_39}" } } }, "_hasValueLabel": { "false": { "value-jds-text": { "hidden": true } } }, "_hasLabel": { "false": { "jds-text": { "hidden": true } } }, "_hasLabelOrValueLabel": { "false": { "top-container": { "hidden": true } } } }, "combination": [{ "stretch": { "false": { "top-container": { "justify-content": "{justifyContent.start}" }, "value-jds-text": { "hidden": true } } } }, { "stretch": { "false": { "top-container": { "justify-content": "{justifyContent.end}" }, "jds-text": { "hidden": true } } } }], "combination_config": [["labelPosition", "_hasValueLabel"], ["labelPosition", "_hasLabel"]], "api": { "data": { "active-container": { "flex": { "type": "float", "name": "value", "function": true, "doc_description": "It takes user input for value of progress bar." } }, "invisible-container": { "flex": { "type": "float", "name": "_invisible" } }, "jds-text": { "value": { "type": "string", "name": "label", "doc_description": "It displays the main label of Progess Bar." } }, "value-jds-text": { "value": { "type": "string", "name": "valueLabel", "doc_description": "It displays the support label of Progess Bar." } } }, "config": { "kind": { "values": ["determinate", "indeterminate"], "doc_description": "It can be used to switch between 2 variants of progess bar." }, "labelPosition": { "values": ["stretch", "center"], "doc_description": "It can be used align label of progress bar to center or at the ends of progress bar." }, "state": { "type": "JDSFeedbackBlock.state", "doc_description": "It can be used to choose between states i.e. 'success','warning','error','none'.By default it is 'none'.This can be dynamically changed as per user's form handling.", "values": ["none", "success", "error", "warning"] }, "_hasLabelOrValueLabel": { "values": [true, false] }, "_hasLabel": { "values": [true, false] }, "_hasValueLabel": { "values": [true, false] } }, "a11y": { "container": { "properties": { "role": { "value": "progressbar" }, "aria-label": { "name": "ariaLabel", "prop": "label", "function": true }, "aria-valuenow": { "name": "_ariaValuenow", "platform": "web,ios" }, "aria-valuemin": { "name": "_ariaValuemin", "platform": "web,ios" }, "aria-valuemax": { "name": "_ariaValuemax", "platform": "web,ios" }, "aria-busy": { "name": "ariaBusy", "function": true }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" } } } } } };

const PROP_MAP$d = (props) => ({
  type: {
    properties: {
      kind: props.type
    }
  }
});
const withLogic$T = (Component) => (userProps) => {
  const props = modifyProps(userProps, PROP_MAP$d);
  const { value = 0, ...rest } = props;
  const min = 0;
  const max = value < 1 ? 1 : 100;
  const calculatedValue = value / (max - min);
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...rest,
        value: calculatedValue,
        _invisible: 1 - calculatedValue,
        _ariaValuenow: props.kind === "indeterminate" ? void 0 : props.value,
        _ariaValuemin: props.kind === "indeterminate" ? void 0 : "0",
        _ariaValuemax: props.kind === "indeterminate" ? void 0 : "100",
        ariaBusy: props.kind === "indeterminate" ? "true" : props.ariaBusy
      }
    }
  );
};

const Component$X = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$T;
  const { kind = "determinate", labelPosition = "stretch", state = "undefined", ariaLabel = props.label?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ kind, labelPosition, state, ariaLabel, ...rest }, componentTag },
    "JDSProgressBar",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const ProgressBar = withLogic$T(Component$X);
ProgressBar.displayName = "ProgressBar";
ProgressBar.slotName = "jds_progress_bar";

const sdl$S = { "metadata": { "version": "1.0.0", "id": "Rating-bar-item-1.0.0", "name": "JDSRatingBarItem", "layerName": "jds_rating_bar_item" }, "hierarchy": { "container": [{ "start-container": ["start-icon"] }, { "end-container": ["end-icon"] }] }, "base": { "container": { "flex-direction": "{r_0}", "behavior": { "focus": { "border-width": "{r_1}", "border-color": "{r_2}" } } }, "start-container": { "clip-first-half": true }, "start-icon": { "size": "{l}", "color": "{primaryGrey80}", "value": "ic_star" }, "end-container": { "hidden": true, "clip-first-half": false, "z-index": 1 }, "end-icon": { "size": "{l}", "color": "{primaryGrey80}", "value": "ic_star" } }, "variant": { "size": { "small": { "start-icon": { "size": "{r_3}" }, "end-icon": { "size": "{r_4}" } }, "large": { "start-icon": { "size": "{r_5}" }, "end-icon": { "size": "{r_6}" } } }, "isInteractive": { "false": { "container": { "disabled": true } } }, "disabled": { "true": { "container": { "disabled": true, "opacity": "{r_7}" } } }, "isHalfRated": { "true": { "end-container": { "hidden": false } } } }, "combination": [{ "false": { "false": { "false": { "start-icon": { "color": "{r_8}" }, "end-icon": { "color": "{r_9}" } }, "true": { "start-icon": { "color": "{r_10}" }, "end-icon": { "color": "{r_11}" } } }, "true": { "false": { "start-icon": { "color": "{r_12}" }, "end-icon": { "color": "{r_13}" } }, "true": { "start-icon": { "color": "{r_14}" }, "end-icon": { "color": "{r_15}" } } } }, "true": { "false": { "false": { "container": { "behavior": { "focus": { "border-width": "{r_16}", "border-color": "{r_18}" } } }, "start-icon": { "color": "{r_20}", "behavior": { "active": { "color": "{r_24}" } } }, "end-icon": { "color": "{r_21}", "behavior": { "active": { "color": "{r_25}" } } } }, "true": { "container": { "behavior": { "focus": { "border-width": "{r_17}", "border-color": "{r_19}" } } }, "start-icon": { "color": "{primary50}", "behavior": { "active": { "color": "{primary70}" } } }, "end-icon": { "color": "{primary50}", "behavior": { "active": { "color": "{primary70}" } } } } }, "true": { "false": { "container": { "behavior": { "focus": { "border-width": "{r_28}", "border-color": "{r_26}" } } }, "start-icon": { "color": "{r_30}", "behavior": { "active": { "color": "{r_34}" } } }, "end-icon": { "color": "{r_31}", "behavior": { "active": { "color": "{r_35}" } } } }, "true": { "container": { "behavior": { "focus": { "border-width": "{r_29}", "border-color": "{r_27}" } } }, "start-icon": { "color": "{r_32}", "behavior": { "active": { "color": "{r_34}" } } }, "end-icon": { "color": "{r_33}", "behavior": { "active": { "color": "{r_35}" } } } } } } }, { "false": { "true": { "start-icon": { "color": "{r_38}" }, "end-icon": { "color": "{r_39}" } } } }], "combination_config": [["isInteractive", "isActive", "isHovered"], ["isInteractive", "isHalfRated"]], "api": { "config": { "size": { "values": ["medium", "small", "large"] }, "isInteractive": { "values": [false, true] }, "isActive": { "values": [false, true] }, "isHovered": { "values": [false, true] }, "isHalfRated": { "values": [false, true] }, "disabled": { "values": [false, true] } }, "data": { "start-container": { "clip-value": { "type": "clipValueSize", "name": "clipValue", "function": true } }, "end-container": { "clip-value": { "type": "clipValueSize", "name": "_updatedClipValue" } } }, "events": { "container": { "onClick": "onClick", "onFocus": { "name": "onFocus", "platform": "web" }, "onBlur": { "name": "onBlur", "platform": "web" }, "onHover": { "name": "onHover", "platform": "web" }, "onHoverEnd": { "name": "onHoverEnd", "platform": "web" } } }, "a11y": { "container": { "properties": { "role": { "name": "_role" }, "aria-label": { "name": "ariaLabel" }, "aria-checked": { "name": "ariaChecked" } } } } } };

const withLogic$S = (Component) => (props) => {
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        _role: props.type === "interactive" ? "radio" : void 0
      },
      onHover: () => {
        props.onMouseEnter?.(props.internalIndex);
      },
      onHoverEnd: () => {
        props.onMouseLeave?.(-1);
      },
      onClick: () => {
        props.onClick?.(props.internalIndex);
      },
      _updatedClipValue: props.clipValue !== void 0 ? `${((1 - Number(props.clipValue?.slice(0, -1)) / 100) * 100).toString()}%` : void 0
    }
  );
};

const Component$W = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$S;
  const { size = "medium", isInteractive = false, isActive = false, isHovered = false, isHalfRated = false, disabled = false, onClick = noop, onFocus = noop, onBlur = noop, onHover = noop, onHoverEnd = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ size, isInteractive, isActive, isHovered, isHalfRated, disabled, onClick, onFocus, onBlur, onHover, onHoverEnd, ...rest }, componentTag },
    "JDSRatingBarItem",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const RatingBarItem = withLogic$S(Component$W);
RatingBarItem.displayName = "RatingBarItem";
RatingBarItem.slotName = "jds_rating_bar_item";

const sdl$R = { "metadata": { "version": "1.0.0", "id": "search-box-1.0.0", "name": "JDSSearchBox", "layerName": "jds_search_box", "description": "The search pattern allows users to quickly find relevant content by typing a querry", "usage": "The Search function is triggered as soon as the user focuses in the search field or hits on the search icon. Initially he can see a list of recent searches and quick links but as soon as he starts typing he would see suggestions relevant with his querry." }, "hierarchy": { "container": [{ "prefix-container": ["prefix-icon"] }, "input", { "suffix-container": ["suffix-icon"] }] }, "base": { "container": { "opacity": "{s_10}", "background-color": "{s_0}", "flex-direction": "{s_1}", "justify-content": "{s_2}", "align-items": "{s_3}", "padding-right": "{s_4}", "padding-left": "{s_5}", "width": "{s_6}", "height": "{s_7}", "border-radius": "{s_8}", "gap": "{s_9}", "behavior": { "focus": { "border-color": "{s_11}", "border-width": "{s_12}" }, "active": { "background-color": "{s_13}" } } }, "input": { "type": "search", "text-align": "{s_14}", "placeholder-color": "{s_15}", "placeholder-font-family": "{s_16}", "placeholder-font-size": "{s_17}", "placeholder-line-height": "{s_18}", "placeholder-letter-spacing": "{s_19}", "placeholder-font-weight": "{s_20}", "input-color": "{s_21}", "input-font-family": "{s_22}", "input-font-size": "{s_23}", "input-line-height": "{s_24}", "input-letter-spacing": "{s_25}", "input-font-weight": "{s_26}", "cursor-color": "{s_27}", "width": "{size.max}", "disabled": false, "flex": 1, "behavior": { "hover": { "placeholder-color": "{s_28}" }, "focus": { "placeholder-color": "{s_29}" }, "active": { "placeholder-color": "{s_30}" } } }, "prefix-container": { "flex-direction": "{s_31}", "justify-content": "{s_32}", "align-items": "{s_33}" }, "prefix-icon": { "size": "{s_34}", "color": "{s_35}", "behavior": { "hover": { "color": "{s_36}" }, "focus": { "color": "{s_37}" }, "active": { "color": "{s_38}" } } }, "suffix-container": { "flex-direction": "{s_39}", "justify-content": "{s_40}", "align-items": "{s_41}" }, "suffix-icon": { "size": "{s_42}", "color": "{s_43}", "behavior": { "hover": { "color": "{s_44}" }, "focus": { "color": "{s_45}" }, "active": { "color": "{s_46}" } } } }, "variant": { "kind": { "header": { "container": { "background-color": "{s_47}", "behavior": { "focus": { "border-color": "{s_48}", "border-width": 4 }, "active": { "background-color": "{s_49}" } } }, "prefix-icon": { "color": "{s_50}", "behavior": { "hover": { "color": "{s_51}" }, "active": { "color": "{s_52}" } } }, "suffix-icon": { "color": "{s_53}", "behavior": { "hover": { "color": "{s_54}" }, "active": { "color": "{s_55}" } } }, "input": { "input-color": "{s_56}", "placeholder-color": "{s_57}", "cursor-color": "{s_58}", "behavior": { "hover": { "placeholder-color": "{s_59}" } } } }, "light_background": { "container": { "background-color": "{s_60}", "border-color": "{s_61}", "border-width": "{s_65}", "behavior": { "hover": { "background-color": "{s_60}", "border-color": "{s_62}" }, "focus": { "background-color": "{s_60}", "border-color": "{s_63}", "border-width": "{s_66}" }, "active": { "background-color": "{s_60}", "border-color": "{s_64}" } } }, "input": { "input-color": "{s_67}", "cursor-color": "{s_68}", "behavior": { "active": { "placeholder-color": "{s_69}" } } }, "prefix-icon": { "color": "{s_70}", "behavior": { "hover": { "color": "{s_71}" }, "focus": { "color": "{s_72}" }, "active": { "color": "{s_73}" } } }, "suffix-icon": { "color": "{s_74}", "behavior": { "active": { "color": "{s_75}" } } } } }, "disabled": { "true": { "container": { "disabled": true, "opacity": "{s_76}" }, "prefix-container": { "disabled": true }, "suffix-container": { "disabled": true }, "input": { "disabled": true } } }, "_isValueEmpty": { "false": { "suffix-icon": { "color": "{s_77}" } } }, "_inputFocus": { "true": { "input": { "placeholder-color": "{s_79}" } } } }, "combination": [{ "header": { "false": { "suffix-icon": { "color": "{s_78}" } } }, "light_background": { "false": { "suffix-icon": { "color": "{s_80}" } } } }, { "light_background": { "true": { "container": { "border-color": "{s_81}" } } } }], "combination_config": [["kind", "_isValueEmpty"], ["kind", "_inputFocus"]], "api": { "config": { "kind": { "values": ["normal", "header", "light_background"], "doc_description": "It determines if SearchBox is to be used on header or normal background." }, "disabled": { "values": [false, true], "doc_description": "It can be used to enable or disable SearchBox." }, "_isValueEmpty": { "values": [true, false] }, "_inputFocus": { "values": [false, true] } }, "data": { "input": { "value": { "type": "string", "name": "value", "doc_description": "It takes user input for text to be searched." }, "name": { "type": "string", "name": "name", "doc_description": "It displays name of search box." }, "placeholder": { "type": "string", "name": "label", "doc_description": "It displays placeholder text of search box." }, "focusRequester": { "type": "focusRequester", "name": "focusRequester", "platform": "android" }, "imeAction": { "type": "imeAction", "name": "imeAction", "platform": "android" }, "max-length": { "type": "number", "name": "maxLength" } }, "prefix-icon": { "value": { "type": "icon", "name": "prefix", "function": true, "doc_description": "It can be used to pass icon as prefix." } }, "suffix-icon": { "value": { "type": "icon", "name": "suffix", "doc_description": "It can be used to display icon on the right of search box." } }, "container": { "_prefix.showBack": { "type": "boolean", "name": "showBack" } } }, "events": { "input": { "onFocus": "onFocus", "onBlur": "onBlur", "onChange": "onChange", "onSubmit": "onSubmit", "onKeyup": { "name": "onKeyup", "platform": "web" }, "onKeydown": { "name": "onKeydown", "platform": "web" } }, "prefix-container": { "onClick": "onBack" }, "suffix-container": { "onClick": "onSuffixClick" } }, "a11y": { "prefix-icon": { "properties": { "role": { "value": "button" }, "aria-label": { "name": "prefixAriaLabel" } } }, "suffix-icon": { "properties": { "role": { "value": "button" }, "aria-label": { "name": "suffixAriaLabel" } } }, "container": { "properties": { "role": { "value": "search" }, "aria-label": { "name": "ariaLabel", "prop": "label" } } }, "input": { "name": "input", "properties": { "role": { "value": "searchbox" } } } } } };

const withLogic$R = (Component) => (props) => {
  const { onBack, ...rest } = props;
  const [typing, setTyping] = useState(false);
  const [value, setValue] = useState(props.value);
  const element = useRef(null);
  const [focused, setFocused] = useState(false);
  useEffect(() => {
    setValue(props.value);
  }, [props.value]);
  const triggerChange = (value2 = "") => {
    if (element) {
      const input = element?.current;
      const tracker = Object.getOwnPropertyDescriptor(
        window.HTMLInputElement.prototype,
        "value"
      )?.set;
      tracker?.call(input, value2);
      const event = new Event("input", { bubbles: true });
      input?.dispatchEvent(event);
    }
  };
  const formatIconName = (iconName) => {
    if (typeof iconName === "string" && iconName.startsWith("Ic")) {
      const words = iconName.slice(2).match(/[A-Z][a-z]+/g);
      return words ? words.join(" ").toLowerCase() + " icon" : iconName;
    } else if (typeof iconName === "string" && iconName.startsWith("ic_")) {
      const words = iconName.slice(3).split("_");
      return words ? words.join(" ").toLowerCase() + " icon" : iconName;
    }
    return iconName;
  };
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...rest,
        value,
        prefixAriaLabel: props.prefixAriaLabel || formatIconName(props.prefix),
        suffixAriaLabel: props.suffixAriaLabel || formatIconName(props.suffix),
        onBack: () => {
          if (focused && props.showBack) {
            onBack?.(value || "");
          } else {
            props.onPrefixClick?.(value);
          }
        },
        prefix: props.showBack && focused ? "IcBack" : props.prefix,
        suffix: typing ? /* @__PURE__ */ jsx(
          "div",
          {
            id: "suffix-container",
            onMouseDown: (e) => e.preventDefault(),
            onClick: (e) => {
              e.stopPropagation();
              props.onSuffixClick?.();
            },
            children: /* @__PURE__ */ jsx(IcCloseRemove, {})
          }
        ) : props.suffix,
        onFocus: (ev) => {
          props.onFocus?.(ev);
          setFocused(true);
          setTyping(Boolean(ev.target.value));
        },
        _isValueEmpty: !typing,
        onBlur: (ev) => {
          props.onBlur?.(ev);
          if (!ev.target.value)
            setFocused(false);
          if (!(ev.relatedTarget?.id === "suffix-container"))
            setTyping(false);
        },
        onChange: (ev) => {
          setTyping(Boolean(ev.target.value));
          props.onChange?.(ev);
          setValue(ev.target.value);
        },
        layerRefs: { input: element },
        _inputFocus: focused,
        onSuffixClick: () => {
          props?.onSuffixClick?.();
          if (typing) {
            setValue("");
            triggerChange("");
            setTyping(false);
          }
        }
      }
    }
  );
};

const Component$V = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$R;
  const { kind = "normal", disabled = false, onFocus = noop, onBlur = noop, onChange = noop, onSubmit = noop, onKeyup = noop, onBack = noop, onSuffixClick = noop, ariaLabel = props.label?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ kind, disabled, onFocus, onBlur, onChange, onSubmit, onKeyup, onBack, onSuffixClick, ariaLabel, ...rest }, componentTag },
    "JDSSearchBox",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const SearchBox = withLogic$R(Component$V);
SearchBox.displayName = "SearchBox";
SearchBox.slotName = "jds_search_box";

const sdl$Q = { "metadata": { "version": "1.0.0", "id": "search-results-1.0.0", "name": "JDSSearchResults", "layerName": "jds_search_results" }, "hierarchy": { "popup": [{ "popup-container": ["jds_search_results_internal"] }] }, "base": { "popup": { "background-color": "{global.transparent}", "priority": 40, "hidden": true, "passive": true }, "popup-container": { "flex-direction": "{flexDirection.stack}", "justify-content": "{justifyContent.center}", "width": "{size.max}", "background-color": "{global.transparent}", "border-radius": 0 } }, "variant": { "open": { "true": { "popup": { "hidden": false } } }, "appearance": { "box": { "jds_search_results_internal": { "appearance": "box" } } } }, "combination": [{}], "combination_config": [[]], "api": { "config": { "appearance": { "values": ["normal", "box"], "doc_description": "This determines the appearance of search results, it can be 'normal or 'box'." }, "open": { "values": [false, true], "doc_description": "It can be used to open or close search result items." } }, "data": { "jds_search_results_internal": { "maxWidth": { "type": "size", "name": "_maxWidth" }, "header": { "type": "string", "name": "header", "doc_description": "It is a heading that will display in the Header of the SearchResults." }, "headerAction": { "type": "string", "name": "headerAction", "doc_description": "If this is passed a button will appear on the right side of the Heading in the Header." }, "results": { "type": "list", "name": "results", "function": true, "object": { "icon": "icon", "label": "string" } }, "results.label": { "type": "string", "name": "results.label" }, "results.icon": { "type": "icon", "name": "results.icon" }, "query": { "type": "string", "name": "query" } }, "popup-container": { "padding-left": { "type": "size", "name": "offsetX" }, "padding-top": { "type": "size", "name": "offsetY" } } }, "events": { "jds_search_results_internal": { "onAppear": { "name": "_onAppear", "platform": "ios" }, "onClick": "onClick", "onHeaderActionClick": "onHeaderActionClick", "onContainerClick": "_onContainerClick" }, "popup": { "onClick": "onClose" } }, "a11y": { "jds_search_results_internal": { "name": "results", "repeating": { "ariaLabel": "resultAriaLabel", "ariaDescribedby": { "name": "resultAriaDescribedby", "platform": "web,ios" } }, "properties": { "headerActionAriaLabel": "headerActionAriaLabel", "headerActionAriaDescribedby": { "name": "headerActionAriaDescribedby", "platform": "web,ios" }, "ariaHidden": "headerActionAriaHidden" } } } } };

const PROP_MAP$c = (props) => ({
  properties: {
    results: props.results?.map((r) => ({
      ...r,
      title: r.label,
      icon: r.icon
    })),
    header: props.header,
    headerAction: props.headerAction?.title,
    onHeaderActionClick: props.headerAction?.onClick
  }
});
const withLogic$Q = (Component) => (userProps) => {
  const props = modifyProps(userProps, PROP_MAP$c);
  return /* @__PURE__ */ jsx(Fragment, { children: /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        _onContainerClick: (ev) => ev.stopPropagation()
      }
    }
  ) });
};

const Component$U = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$Q;
  const { appearance = "normal", open = false, onClick = noop, onHeaderActionClick = noop, onClose = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ appearance, open, onClick, onHeaderActionClick, onClose, ...rest }, componentTag },
    "JDSSearchResults",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const SearchResults = withLogic$Q(Component$U);
SearchResults.displayName = "SearchResults";
SearchResults.slotName = "jds_search_results";

const sdl$P = { "metadata": { "version": "1.0.0", "id": "search-results-1.0.0", "name": "JDSSearchResultsInternal", "layerName": "jds_search_results_internal" }, "hierarchy": { "root-container": [{ "container": [{ "heading-container": ["jds-text", "jds_action_button"] }, { "results-container": ["jds_search_result_item"] }] }] }, "base": { "root-container": { "background-color": "{primaryBackground}", "flex-direction": "{flexDirection.column}", "align-items": "{alignItems.center}", "padding-top": "{base}", "padding-right": "{base}", "padding-bottom": "{base}", "padding-left": "{base}", "gap": "{base}", "width": "{size.max}" }, "container": { "width": "{size.max}", "flex-direction": "{flexDirection.column}", "align-items": "{alignItems.center}" }, "heading-container": { "flex-direction": "{flexDirection.row}", "justify-content": "{justifyContent.spaceBetween}", "align-items": "{alignItems.start}", "width": "{size.max}" }, "jds_action_button": { "kind": "tertiary", "size": "small", "appearance": "normal", "state": "normal", "iconPosition": "left", "stretch": false }, "results-container": { "flex-direction": "{flexDirection.column}", "align-items": "{alignItems.start}", "gap": "{base}", "width": "{size.max}" }, "jds-text": { "font-family": "{headingXs}", "color": "{primaryGrey100}", "font-size": "{headingXs}", "line-height": "{headingXs}", "letter-spacing": "{headingXs}", "font-weight": "{headingXs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" } }, "variant": { "appearance": { "box": { "root-container": { "border-radius": "{xl}", "box-shadow": { "x": 0, "y": 4, "blur": 16, "spread": 0, "color": "#00000014" } } } } }, "combination": [{}], "combination_config": [[]], "api": { "config": { "appearance": { "values": ["normal", "box"], "doc_description": "This determines the appearance of search results, it can be 'normal or 'box'." } }, "data": { "container": { "max-width": { "type": "size", "name": "maxWidth" } }, "jds_action_button": { "label": { "type": "string", "name": "headerAction", "doc_description": "If this is passed a button will appear on the right side of the Heading in the Header." } }, "results-container": { "value": { "type": "list", "name": "results", "function": true, "object": { "icon": "icon", "label": "string" } } }, "jds_search_result_item": { "label": { "type": "string", "name": "results.label" }, "icon": { "type": "icon", "name": "results.icon" }, "query": { "type": "string", "name": "query" } }, "jds-text": { "value": { "type": "string", "name": "header", "doc_description": "It is a heading that will display in the Header of the SearchResults." } } }, "events": { "root-container": { "onAppear": { "name": "onAppear", "platform": "ios" } }, "jds_search_result_item": { "onClick": "onClick" }, "jds_action_button": { "onClick": "onHeaderActionClick" }, "container": { "onClick": "onContainerClick" } }, "a11y": { "jds_action_button": { "properties": { "ariaLabel": "headerActionAriaLabel", "ariaDescribedby": { "name": "headerActionAriaDescribedby", "platform": "web,ios" }, "ariaHidden": { "name": "ariaHidden", "value": "true" } } }, "results-container": { "name": "results", "properties": { "role": { "value": "list" } }, "repeating": { "ariaLabel": "resultAriaLabel", "ariaDescribedby": { "name": "resultAriaDescribedby", "platform": "web,ios" } } }, "jds_search_result_item": { "properties": { "ariaLabel": "results.resultAriaLabel", "ariaDescribedby": "results.resultAriaDescribedby" } } } } };

const withLogic$P = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$T = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$P;
  const { appearance = "normal", onAppear = noop, onClick = noop, onHeaderActionClick = noop, onContainerClick = noop, ariaHidden = "true", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ appearance, onAppear, onClick, onHeaderActionClick, onContainerClick, ariaHidden, ...rest }, componentTag },
    "JDSSearchResultsInternal",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const SearchResultsInternal = withLogic$P(Component$T);
SearchResultsInternal.displayName = "SearchResultsInternal";
SearchResultsInternal.slotName = "jds_search_results_internal";

const sdl$O = { "metadata": { "version": "1.0.0", "id": "search-result-item-1.0.0", "name": "JDSSearchResultItem", "layerName": "jds_search_result_item" }, "hierarchy": { "container": ["icon", { "text-container": ["jds_search_result_text"] }] }, "base": { "container": { "flex-direction": "{s_0}", "gap": "{s_1}", "padding-top": "{s_2}", "padding-bottom": "{s_3}", "align-items": "{s_4}", "width": "{s_5}", "behavior": { "hover": { "background-color": "{s_6}" }, "active": { "background-color": "{s_7}" }, "focus": { "background-color": "{s_8}" } } }, "icon": { "size": "{s_9}", "color": "{s_10}" }, "text-container": { "flex-direction": "{s_11}", "justify-content": "{s_12}", "align-items": "{s_13}" } }, "variant": {}, "combination": [{}], "combination_config": [[]], "api": { "data": { "container": { "_splitLabel.label": { "type": "string", "name": "label" }, "_splitLabel.query": { "type": "string", "name": "query" } }, "text-container": { "value": { "type": "list", "name": "_splitLabel", "object": { "bold": "boolean", "text": "string" } } }, "jds_search_result_text": { "text": { "type": "string", "name": "_splitLabel.text" }, "bold": { "type": "boolean", "name": "_splitLabel.bold" } }, "icon": { "value": { "type": "icon", "name": "icon" } } }, "events": { "container": { "onClick": "onClick" } }, "a11y": { "container": { "properties": { "role": { "value": "listitem" }, "aria-label": { "name": "ariaLabel", "prop": "label" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" } } } } } };

const withLogic$O = (Component) => (props) => {
  const { query = "", label = "", ...rest } = props;
  const index = label.indexOf(query);
  const leftPart = label.slice(0, index);
  const rightPart = label.slice(index + query.length, label.length);
  const labels = index >= 0 ? [leftPart, query, rightPart] : [label];
  const _splitLabel = labels.map((l) => ({
    text: l.replace(" ", " "),
    bold: query === l
  }));
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...rest,
        _splitLabel,
        ariaLabel: props.ariaLabel || label,
        onClick: () => {
          rest?.onClick?.({
            label,
            icon: rest.icon,
            index: rest.internalIndex
          });
        }
      }
    }
  );
};

const Component$S = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$O;
  const { onClick = noop, ariaLabel = props.label?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ onClick, ariaLabel, ...rest }, componentTag },
    "JDSSearchResultItem",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const SearchResultItem = withLogic$O(Component$S);
SearchResultItem.displayName = "SearchResultItem";
SearchResultItem.slotName = "jds_search_result_item";

const sdl$N = { "metadata": { "version": "1.0.0", "id": "search-result-text-1.0.0", "name": "JDSSearchResultText", "layerName": "jds_search_result_text" }, "hierarchy": { "jds-text": [] }, "base": { "jds-text": { "font-family": "{bodyS}", "color": "{primaryGrey100}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "max-lines": 1, "maxLines": 1, "behavior": { "hover": { "color": "{primaryGrey80}" } } } }, "variant": { "bold": { "true": { "jds-text": { "font-family": "{bodySBold}", "font-size": "{bodySBold}", "line-height": "{bodySBold}", "letter-spacing": "{bodySBold}", "font-weight": "{bodySBold}" } } } }, "combination": [{}], "combination_config": [[]], "api": { "config": { "bold": { "values": [false, true] } }, "data": { "jds-text": { "value": { "type": "string", "name": "text" } } } } };

const withLogic$N = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$R = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$N;
  const { bold = false, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ bold, ...rest }, componentTag },
    "JDSSearchResultText",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const SearchResultText = withLogic$N(Component$R);
SearchResultText.displayName = "SearchResultText";
SearchResultText.slotName = "jds_search_result_text";

const sdl$M = { "metadata": { "version": "1.0.0", "id": "Segmented-ring-item-1.0.0", "name": "JDSSegmentedRingItem", "layerName": "jds_segmented_ring_item", "internal": true }, "hierarchy": { "arc": [] }, "base": { "arc": { "radius": 24, "arcWidth": 2, "fill": "{primary50}", "start": 0, "end": 360 } }, "variant": { "size": { "xtra-xtra-large": { "arc": { "radius": 68, "arcWidth": 4 } }, "xtra-large": { "arc": { "radius": 34, "arcWidth": 3 } }, "large": { "arc": { "radius": 30, "arcWidth": 3 } }, "small": { "arc": { "radius": 20, "arcWidth": 2 } }, "xtra-small": { "arc": { "radius": 16, "arcWidth": 2 } } } }, "combination": [{}], "combination_config": [[]], "api": { "config": { "size": { "values": ["medium", "xtra-xtra-large", "xtra-large", "large", "small", "xtra-small"] } }, "data": { "arc": { "start": { "type": "number", "name": "startAngle" }, "end": { "type": "number", "name": "endAngle" } } } } };

const withLogic$M = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$Q = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$M;
  const { size = "medium", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ size, ...rest }, componentTag },
    "JDSSegmentedRingItem",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const SegmentedRingItem = withLogic$M(Component$Q);
SegmentedRingItem.displayName = "SegmentedRingItem";
SegmentedRingItem.slotName = "jds_segmented_ring_item";

const sdl$L = { "metadata": { "version": "1.0.0", "id": "selector-button-1.0.0", "name": "JDSSelectorButton", "layerName": "jds_selector_button", "description": "A selector button is an interactive control that allows the user to perform a selection action." }, "hierarchy": { "container": ["left-icon", "jds-text", "right-icon"] }, "base": { "container": { "background-color": "{s_0}", "flex-direction": "{s_1}", "justify-content": "{s_2}", "align-items": "{s_3}", "border-radius": "{s_4}", "padding-bottom": "{s_5}", "padding-top": "{s_6}", "padding-left": "{s_7}", "padding-right": "{s_8}", "border-width": "{s_9}", "gap": "{s_10}", "opacity": "{s_11}", "behavior": { "hover": { "background-color": "{s_12}" }, "active": { "background-color": "{s_13}" }, "focus": { "border-width": "{s_14}", "border-color": "{s_15}" } } }, "left-icon": { "hidden": false, "size": "{s_16}", "color": "{s_17}", "behavior": { "hover": { "color": "{s_18}" } } }, "right-icon": { "hidden": true, "size": "{s_19}", "color": "{s_20}", "behavior": { "hover": { "color": "{s_21}" } } }, "jds-text": { "font-family": "{bodySBold}", "color": "{primaryInverse}", "font-size": "{bodySBold}", "line-height": "{bodySBold}", "letter-spacing": "{bodySBold}", "font-weight": "{bodySBold}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": false } }, "variant": { "disabled": { "true": { "container": { "disabled": true, "opacity": "{s_22}" } } } }, "combination": [{ "normal": { "primary": { "true": { "container": { "background-color": "{s_23}", "behavior": { "hover": { "background-color": "{s_24}" }, "active": { "background-color": "{s_25}" }, "focus": { "border-color": "{s_26}" } } } }, "false": { "jds-text": { "behavior": { "hover": { "color": "{primary70}" } } } } }, "secondary": { "false": { "container": { "background-color": "{s_27}", "border-width": "{s_28}", "border-color": "{s_29}", "behavior": { "hover": { "background-color": "{s_30}", "border-color": "{s_31}" }, "active": { "background-color": "{s_32}" }, "focus": { "border-width": "{s_33}", "border-color": "{s_34}" } } }, "left-icon": { "color": "{s_35}" }, "right-icon": { "color": "{s_36}" }, "jds-text": { "color": "{primary60}" } }, "true": { "container": { "background-color": "{s_37}", "border-width": "{s_38}", "border-color": "{s_39}", "behavior": { "hover": { "border-color": "{s_40}" }, "active": { "background-color": "{s_41}" }, "focus": { "border-width": "{s_42}", "border-color": "{s_43}" } } }, "left-icon": { "color": "{s_44}", "behavior": { "active": { "color": "{s_45}" } } }, "right-icon": { "color": "{s_46}", "behavior": { "active": { "color": "{s_47}" } } }, "jds-text": { "color": "{primary60}", "behavior": { "active": { "color": "{primary70}" } } } } }, "tertiary": { "true": { "container": { "background-color": "{s_48}", "behavior": { "hover": { "background-color": "{s_49}", "border-color": "{s_50}", "border-width": "{s_51}" }, "active": { "background-color": "{s_52}" }, "focus": { "border-width": "{s_53}", "border-color": "{s_54}" } } }, "left-icon": { "color": "{s_55}", "behavior": { "active": { "color": "{s_56}" }, "hover": { "color": "{s_57}" } } }, "right-icon": { "color": "{s_58}", "behavior": { "active": { "color": "{s_59}" }, "hover": { "color": "{s_60}" } } }, "jds-text": { "color": "{primary60}", "behavior": { "active": { "color": "{primary70}" }, "hover": {} } } }, "false": { "container": { "background-color": "{s_61}", "behavior": { "hover": { "border-width": "{s_62}", "border-color": "{s_63}", "background-color": "{s_64}" }, "active": { "background-color": "{s_65}" } } }, "left-icon": { "color": "{s_66}", "behavior": { "active": { "color": "{s_67}" }, "hover": { "color": "{s_68}" } } }, "right-icon": { "color": "{s_69}", "behavior": { "active": { "color": "{s_70}" }, "hover": { "color": "{s_71}" } } }, "jds-text": { "color": "{primary60}" } } }, "tertiary_narrow": { "true": { "container": { "background-color": "{s_72}", "behavior": { "focus": { "border-width": "{s_73}", "border-color": "{s_74}" }, "hover": { "background-color": "{s_75}" }, "active": { "background-color": "{s_76}" } } }, "left-icon": { "color": "{s_77}", "behavior": { "hover": { "color": "{s_78}" }, "active": { "color": "{s_79}" } } }, "right-icon": { "color": "{s_80}", "behavior": { "hover": { "color": "{s_81}" }, "active": { "color": "{s_82}" } } }, "jds-text": { "color": "{primary70}", "behavior": { "hover": { "color": "{primary60}" }, "active": { "color": "{primary80}" } } } }, "false": { "container": { "background-color": "{s_83}", "behavior": { "hover": { "background-color": "{s_84}" }, "active": { "background-color": "{s_85}" } } }, "left-icon": { "color": "{s_86}", "behavior": { "hover": { "color": "{s_87}" }, "active": { "color": "{s_88}" } } }, "right-icon": { "color": "{s_89}", "behavior": { "hover": { "color": "{s_90}" }, "active": { "color": "{s_91}" } } }, "jds-text": { "color": "{primary60}", "behavior": { "hover": { "color": "{primary50}" }, "active": { "color": "{primary70}" } } } } } }, "grey_scale": { "primary": { "false": { "container": { "background-color": "{s_92}", "behavior": { "hover": { "background-color": "{s_93}" }, "active": { "background-color": "{s_94}" }, "focus": { "border-width": "{s_95}", "border-color": "{s_96}" } } }, "left-icon": { "color": "{s_97}", "behavior": { "hover": { "color": "{s_98}" }, "active": { "color": "{s_99}" } } }, "right-icon": { "color": "{s_100}", "behavior": { "hover": { "color": "{s_101}" }, "active": { "color": "{s_102}" } } }, "jds-text": { "color": "{primaryBackground}", "behavior": { "hover": { "color": "{primary70}" }, "active": { "color": "{primaryInverse}" } } } } }, "secondary": { "false": { "container": { "background-color": "{s_103}", "border-width": "{s_104}", "border-color": "{s_105}", "behavior": { "hover": { "background-color": "{s_106}", "border-color": "{s_107}" }, "active": { "background-color": "{s_108}" }, "focus": { "border-width": "{s_109}", "border-color": "{s_110}" } } }, "left-icon": { "color": "{s_111}", "behavior": { "hover": { "color": "{s_295}" } } }, "right-icon": { "color": "{s_112}", "behavior": { "hover": { "color": "{s_296}" } } }, "jds-text": { "color": "{primaryGrey80}", "behavior": { "hover": { "color": "{primary60}" } } } }, "true": { "container": { "background-color": "{s_113}", "border-width": 1, "border-color": "{s_114}", "behavior": { "hover": { "border-color": "{s_115}" }, "active": { "background-color": "{s_116}" }, "focus": { "border-width": "{s_117}", "border-color": "{s_118}" } } }, "left-icon": { "color": "{s_119}", "behavior": { "active": { "color": "{s_120}" } } }, "right-icon": { "color": "{s_121}", "behavior": { "active": { "color": "{s_122}" } } }, "jds-text": { "color": "{primary60}", "behavior": { "active": { "color": "{primary70}" } } } } }, "tertiary": { "true": { "container": { "background-color": "{s_123}", "behavior": { "hover": { "border-color": "{s_124}", "border-width": "{s_125}" }, "active": { "background-color": "{s_126}" }, "focus": { "border-width": "{s_127}", "border-color": "{s_128}" } } }, "left-icon": { "color": "{s_129}", "behavior": { "active": { "color": "{s_130}" } } }, "right-icon": { "color": "{s_131}", "behavior": { "active": { "color": "{s_132}" } } }, "jds-text": { "color": "{primary60}", "behavior": { "active": { "color": "{primary70}" } } } }, "false": { "container": { "background-color": "{s_133}", "behavior": { "hover": { "border-color": "{s_134}", "border-width": "{s_135}", "background-color": "{s_136}" }, "active": { "background-color": "{s_137}" }, "focus": { "border-width": "{s_138}", "border-color": "{s_139}" } } }, "left-icon": { "color": "{s_140}", "behavior": { "hover": { "color": "{s_141}" }, "active": { "color": "{s_142}" } } }, "right-icon": { "color": "{s_143}", "behavior": { "hover": { "color": "{s_144}" }, "active": { "color": "{s_145}" } } }, "jds-text": { "color": "{primaryGrey80}", "behavior": { "hover": { "color": "{primary60}" }, "active": { "color": "{primary60}" } } } } }, "tertiary_narrow": { "true": { "container": { "background-color": "{s_146}", "behavior": { "hover": { "background-color": "{s_147}" }, "focus": { "border-width": "{s_148}", "border-color": "{s_149}" } } }, "left-icon": { "color": "{s_150}", "behavior": { "hover": { "color": "{s_151}" }, "active": { "color": "{s_152}" } } }, "right-icon": { "color": "{s_153}", "behavior": { "hover": { "color": "{s_154}" }, "active": { "color": "{s_155}" } } }, "jds-text": { "color": "{primary60}", "behavior": { "hover": { "color": "{primary50}" }, "active": { "color": "{primary80}" } } } }, "false": { "container": { "background-color": "{s_156}", "behavior": { "hover": { "background-color": "{s_157}" }, "focus": { "border-width": "{s_158}", "border-color": "{s_159}" } } }, "left-icon": { "color": "{s_160}", "behavior": { "hover": { "color": "{s_161}" }, "active": { "color": "{s_162}" } } }, "right-icon": { "color": "{s_163}", "behavior": { "hover": { "color": "{s_164}" }, "active": { "color": "{s_165}" } } }, "jds-text": { "color": "{primaryGrey80}", "behavior": { "hover": { "color": "{primary50}" }, "active": { "color": "{primary60}" } } } } } }, "contrast": { "primary": { "false": { "container": { "background-color": "{s_166}", "behavior": { "hover": { "background-color": "{s_167}" }, "active": { "background-color": "{s_168}" }, "focus": { "border-width": "{s_169}", "border-color": "{s_170}" } } }, "left-icon": { "color": "{s_171}", "behavior": { "hover": { "color": "{s_172}" }, "focus": { "color": "{s_173}" }, "active": { "color": "{s_174}" } } }, "right-icon": { "color": "{s_175}", "behavior": { "hover": { "color": "{s_176}" }, "focus": { "color": "{s_177}" }, "active": { "color": "{s_178}" } } }, "jds-text": { "color": "{primaryGrey100}", "behavior": { "hover": {}, "active": { "color": "{primaryInverse}" } } } }, "true": { "container": { "background-color": "{s_179}", "behavior": { "hover": { "background-color": "{s_180}" }, "active": { "background-color": "{s_181}" }, "focus": { "background-color": "{s_182}", "border-width": "{s_183}", "border-color": "{s_184}" } } }, "left-icon": { "color": "{s_185}", "behavior": { "hover": { "color": "{s_186}" } } }, "right-icon": { "color": "{s_187}", "behavior": { "hover": { "color": "{s_188}" } } }, "jds-text": { "behavior": { "hover": { "color": "{primaryGrey100}" } } } } }, "secondary": { "false": { "container": { "background-color": "{s_189}", "border-width": "{s_190}", "border-color": "{s_191}", "behavior": { "hover": { "background-color": "{s_192}", "border-color": "{s_193}" }, "active": { "background-color": "{s_194}" }, "focus": { "border-width": "{s_195}", "border-color": "{s_196}" } } }, "left-icon": { "color": "{s_197}", "behavior": { "hover": { "color": "{s_198}" }, "active": { "color": "{s_199}" } } }, "right-icon": { "color": "{s_200}", "behavior": { "hover": { "color": "{s_201}" }, "active": { "color": "{s_202}" } } }, "jds-text": { "color": "{primaryBackground}", "behavior": { "hover": { "color": "{primaryGrey100}" }, "active": { "color": "{primaryGrey100}" } } } }, "true": { "container": { "background-color": "{s_203}", "border-width": 1, "border-color": "{s_204}", "behavior": { "hover": { "border-color": "{s_205}" }, "active": { "background-color": "{s_206}" }, "focus": { "border-width": "{s_207}", "border-color": "{s_208}" } } }, "left-icon": { "color": "{s_209}", "behavior": { "active": { "color": "{s_210}" } } }, "right-icon": { "color": "{s_211}", "behavior": { "active": { "color": "{s_212}" } } }, "jds-text": { "color": "{primaryGrey100}", "behavior": { "active": { "color": "{primaryInverse}" } } } } }, "tertiary": { "false": { "container": { "background-color": "{s_213}", "behavior": { "hover": { "background-color": "{s_214}", "border-width": 1, "border-color": "{s_215}" }, "active": { "background-color": "{s_216}" }, "focus": { "border-width": "{s_217}", "border-color": "{s_218}" } } }, "left-icon": { "color": "{s_219}", "behavior": { "hover": { "color": "{s_220}" }, "active": { "color": "{s_221}" } } }, "right-icon": { "color": "{s_222}", "behavior": { "hover": { "color": "{s_223}" }, "active": { "color": "{s_224}" } } }, "jds-text": { "color": "{primaryBackground}", "behavior": { "hover": { "color": "{primaryGrey100}" }, "active": { "color": "{primaryGrey100}" } } } }, "true": { "container": { "background-color": "{s_225}", "behavior": { "hover": { "border-width": 1, "border-color": "{s_226}" }, "focus": { "border-width": "{s_227}", "border-color": "{s_228}" }, "active": { "background-color": "{s_229}" } } }, "left-icon": { "color": "{s_230}", "behavior": { "active": { "background-color": "{s_231}" } } }, "right-icon": { "color": "{s_232}", "behavior": { "active": { "background-color": "{s_233}" } } }, "jds-text": { "color": "{primaryGrey100}", "behavior": { "active": { "background-color": "primary_inverse" } } } } }, "tertiary_narrow": { "false": { "container": { "background-color": "{s_234}", "behavior": { "focus": { "border-width": "{s_235}", "border-color": "{s_236}" }, "hover": { "background-color": "{s_237}" }, "active": { "background-color": "{s_238}" } } }, "left-icon": { "color": "{s_239}", "behavior": { "hover": { "color": "{s_240}" }, "active": { "color": "{s_241}" } } }, "right-icon": { "color": "{s_242}", "behavior": { "hover": { "color": "{s_243}" }, "active": { "color": "{s_244}" } } }, "jds-text": { "color": "{primaryBackground}", "behavior": { "hover": { "color": "{primary20}" }, "active": { "color": "{primary30}" } } } }, "true": { "container": { "background-color": "{s_245}", "behavior": { "focus": { "border-width": "{s_246}", "border-color": "{s_247}" }, "hover": { "background-color": "{s_248}" }, "active": { "background-color": "{s_249}" } } }, "left-icon": { "color": "{s_250}", "behavior": { "hover": { "color": "{s_251}" }, "active": { "color": "{s_252}" }, "focus": { "color": "{s_253}" } } }, "right-icon": { "color": "{s_254}", "behavior": { "hover": { "color": "{s_255}" }, "active": { "color": "{s_256}" }, "focus": { "color": "{s_257}" } } }, "jds-text": { "color": "{primary30}", "behavior": { "hover": { "color": "{primary20}" }, "active": {}, "focus": {} } } } } } }, { "tertiary_narrow": { "small": { "container": { "padding-bottom": "{s_258}", "padding-top": "{s_259}", "padding-left": 0, "padding-right": 0 } }, "medium": { "container": { "padding-bottom": "{s_260}", "padding-top": "{s_261}", "padding-left": 0, "padding-right": 0 } }, "large": { "container": { "padding-bottom": "{s_262}", "padding-top": "{s_263}", "padding-left": 0, "padding-right": 0 } }, "extra_large": { "container": { "padding-bottom": "{s_264}", "padding-top": "{s_265}", "padding-left": 0, "padding-right": 0 } } } }, { "true": { "small": { "container": { "padding-top": "{s_266}", "padding-bottom": "{s_267}" }, "left-icon": { "size": "{s_268}" }, "right-icon": { "size": "{s_269}" }, "jds-text": {} }, "large": { "container": { "padding-top": "{s_270}", "padding-left": "{s_271}", "padding-bottom": "{s_272}", "padding-right": "{s_273}" }, "left-icon": { "size": "{s_274}" }, "right-icon": { "size": "{s_275}" }, "jds-text": { "font-family": "{bodyMBold}", "font-size": "{bodyMBold}", "line-height": "{bodyMBold}", "letter-spacing": "{bodyMBold}", "font-weight": "{bodyMBold}" } }, "extra_large": { "container": { "padding-top": "{s_276}", "padding-right": "{s_277}", "padding-bottom": "{s_278}", "padding-left": "{s_279}" }, "left-icon": { "size": "{s_280}" }, "right-icon": { "size": "{s_281}" }, "jds-text": { "font-family": "{bodyLBold}", "font-size": "{bodyLBold}", "line-height": "{bodyLBold}", "letter-spacing": "{bodyLBold}", "font-weight": "{bodyLBold}" } } }, "false": { "small": { "container": { "width": "{s_282}", "height": "{s_283}", "padding-left": 0, "padding-top": 0, "padding-right": 0, "padding-bottom": 0 }, "left-icon": { "size": "{s_284}" }, "jds-text": { "hidden": true } }, "medium": { "container": { "width": "{s_285}", "height": "{s_286}", "padding-left": 0, "padding-top": 0, "padding-right": 0, "padding-bottom": 0 }, "jds-text": { "hidden": true } }, "large": { "container": { "width": "{s_287}", "height": "{s_288}", "padding-left": 0, "padding-top": 0, "padding-right": 0, "padding-bottom": 0 }, "left-icon": { "size": "{s_289}" }, "jds-text": { "hidden": true } }, "extra_large": { "container": { "width": "{s_290}", "height": "{s_291}", "padding-left": 0, "padding-top": 0, "padding-right": 0, "padding-bottom": 0 }, "left-icon": { "size": "{s_292}" }, "jds-text": { "hidden": true } } } }, { "true": { "right": { "left-icon": { "hidden": true }, "right-icon": { "hidden": false } } } }, { "true": { "true": { "container": { "width": "{s_293}", "justify-content": "{s_294}" } } } }], "combination_config": [["appearance", "kind", "selected"], ["kind", "size"], ["_hasText", "size"], ["_hasText", "iconPosition"], ["_hasText", "stretch"]], "api": { "config": { "kind": { "values": ["primary", "secondary", "tertiary", "tertiary_narrow"] }, "iconPosition": { "values": ["left", "right"] }, "appearance": { "values": ["normal", "grey_scale", "contrast"] }, "size": { "values": ["medium", "small", "large", "extra_large"], "doc_description": "Sizes of the button" }, "disabled": { "values": [false, true], "doc_description": "It can be used to enable or disable SelectorButton." }, "selected": { "values": [false, true] }, "stretch": { "values": [false, true] }, "_hasText": { "values": [true, false] } }, "data": { "container": { "type": { "name": "type", "type": "string", "platform": "web" } }, "left-icon": { "value": { "type": "icon", "name": "icon" } }, "right-icon": { "value": { "type": "icon", "name": "icon" } }, "jds-text": { "value": { "type": "string", "name": "text" } } }, "events": { "container": { "onClick": "onClick", "onFocus": { "name": "onFocus", "platform": "web" }, "onBlur": { "name": "onBlur", "platform": "web" } } }, "a11y": { "container": { "properties": { "role": { "value": "button" }, "aria-label": { "name": "ariaLabel", "prop": "text" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" }, "aria-pressed": { "name": "_ariaPressed", "prop": "selected" } } } } } };

const PROP_MAP$b = (props) => {
  if (props.size === "extra-large") {
    console.warn("extra-large size is deprecated. use `extra_large`");
  }
  if (props.appearance === "grey-scale") {
    console.warn("grey-scale appearance is deprecated. use `grey_scale`");
  }
  if (props.kind === "tertiary-narrow") {
    console.warn(
      "tertiary-narrow prop of kind is deprecated. Use `tertirary_narrow`"
    );
  }
  return {
    appearance: {
      properties: {
        appearance: props.appearance
      },
      variations: {
        "grey-scale": {
          appearance: "grey_scale"
        },
        contrast: {
          appearance: "contrast"
        },
        normal: {
          appearance: "normal"
        }
      }
    },
    size: {
      properties: {
        size: props.size
      },
      variations: {
        medium: {
          size: "medium"
        },
        small: {
          size: "small"
        },
        large: {
          size: "large"
        },
        "extra-large": {
          size: "extra_large"
        }
      }
    },
    label: {
      properties: {
        text: props.label
      }
    },
    children: {
      properties: {
        text: props.children
      }
    },
    icon: {
      properties: {
        icon: props.icon
      }
    },
    kind: {
      properties: {
        kind: props.kind
      },
      variations: {
        primary: {
          kind: "primary"
        },
        secondary: {
          kind: "secondary"
        },
        tertiary: {
          kind: "tertiary"
        },
        "tertiary-narrow": {
          kind: "tertiary_narrow"
        }
      }
    }
  };
};
const withLogic$L = (Component) => forwardRef(
  (userProps, ref) => {
    const props = modifyProps(userProps, PROP_MAP$b);
    return /* @__PURE__ */ jsx(
      Component,
      {
        ...{
          ...props,
          _hasText: Boolean(props.text?.length || props?.children),
          rootRef: ref
        }
      }
    );
  }
);

const Component$P = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$L;
  const { kind = "primary", iconPosition = "left", appearance = "normal", size = "medium", disabled = false, selected = false, stretch = false, onClick = noop, onFocus = noop, onBlur = noop, ariaLabel = props.text?.toString(), _ariaPressed = props.selected?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ kind, iconPosition, appearance, size, disabled, selected, stretch, onClick, onFocus, onBlur, ariaLabel, _ariaPressed, ...rest }, componentTag },
    "JDSSelectorButton",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const SelectorButton = withLogic$L(Component$P);
SelectorButton.displayName = "SelectorButton";
SelectorButton.slotName = "jds_selector_button";

const sdl$K = { "metadata": { "version": "1.0.0", "id": "selector-item-1.0.0", "name": "JDSSelectorItem", "layerName": "jds_selector_item", "internal": true }, "hierarchy": { "container": ["icon", "jds-text"] }, "base": { "container": { "opacity": "{s_0}", "background-color": "{s_1}", "flex-direction": "{s_2}", "align-items": "{s_3}", "justify-content": "{s_4}", "border-radius": "{s_5}", "gap": "{s_6}", "padding-top": "{s_7}", "padding-right": "{s_8}", "padding-bottom": "{s_9}", "padding-left": "{s_10}", "behavior": { "focus": { "background-color": "{s_11}", "box-shadow": { "x": 0, "y": 0, "blur": 0, "spread": "{s_12}", "color": "{s_13}" } }, "hover": { "background-color": "{s_14}" }, "active": { "background-color": "{s_15}" } } }, "icon": { "size": "{s_16}", "color": "{s_17}", "hidden": false }, "jds-text": { "font-family": "{bodyS}", "color": "{primary60}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" } }, "variant": { "selected": { "true": { "container": { "behavior": { "hover": { "background-color": "{s_19}" }, "active": { "background-color": "{s_20}" }, "focus": { "background-color": "{s_21}" } } }, "icon": { "color": "{s_22}", "behavior": { "active": { "color": "{s_23}" } } }, "jds-text": { "color": "{primaryInverse}", "behavior": { "hover": {}, "active": { "color": "{primary30}" } } } } }, "kind": { "label": { "icon": { "hidden": true } }, "icon": { "jds-text": { "hidden": true } } }, "wrap": { "vertical": { "container": { "flex-direction": "{s_24}", "gap": "{s_27}" } } }, "stretch": { "true": { "container": { "width": "{s_25}" } } }, "disabled": { "true": { "container": { "disabled": true, "opacity": "{s_26}" } } } }, "combination": [{}], "combination_config": [[]], "api": { "config": { "selected": { "values": [false, true] }, "stretch": { "values": [false, true] }, "kind": { "values": ["label_icon", "label", "icon"] }, "wrap": { "values": ["horizontal", "vertical"] }, "disabled": { "values": [false, true] } }, "data": { "icon": { "value": { "type": "icon", "name": "icon" } }, "jds-text": { "value": { "type": "string", "name": "label" } } }, "events": { "container": { "onAppear": { "name": "onAppear", "platform": "ios, android" }, "onClick": "onClick", "onFocus": { "name": "onFocus", "platform": "web" } } }, "a11y": { "container": { "properties": { "role": { "value": "radio" }, "aria-label": { "name": "ariaLabel", "prop": "label" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" }, "aria-checked": { "name": "_ariaChecked", "prop": "selected" } } }, "icon": { "properties": { "role": { "value": "img" }, "aria-label": { "name": "iconAriaLabel", "function": true } } } } } };

const withLogic$K = (Component) => (props) => {
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        selected: props.check || props.selectedIndex === props.internalIndex,
        iconAriaLabel: props.iconAriaLabel || formatIconName(props.icon)
      }
    }
  );
};

const Component$O = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$K;
  const { selected = false, stretch = false, kind = "label_icon", wrap = "horizontal", disabled = false, onAppear = noop, onClick = noop, onFocus = noop, ariaLabel = props.label?.toString(), _ariaChecked = props.selected?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ selected, stretch, kind, wrap, disabled, onAppear, onClick, onFocus, ariaLabel, _ariaChecked, ...rest }, componentTag },
    "JDSSelectorItem",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const SelectorItem = withLogic$K(Component$O);
SelectorItem.displayName = "SelectorItem";
SelectorItem.slotName = "jds_selector_item";

const sdl$J = { "metadata": { "version": "1.0.0", "id": "side-panel-1.0.0", "layerName": "jds_side_panel_internal", "name": "JDSSidePanelInternal", "description": "", "internal": true }, "hierarchy": { "container": [{ "header-container": [{ "left-container": ["avatar-slot", "header-text-slot"] }, "suffix-jds_action_button"] }, "children-slot", { "section-container": ["jds_side_panel_item"] }] }, "base": { "container": { "width": 412, "height": "{s_5}", "flex-direction": "{s_6}", "background-color": "{s_7}", "enter-animation-name": "slideHorizontallyToRight", "exit-animation-name": "slideHorizontallyToLeft", "enter-animation-curve": "entrance_ease", "exit-animation-curve": "exit_ease", "enter-animation-duration": 500, "exit-animation-duration": 500, "hidden": true, "translate-x": "{size.negativeMax}", "transition": { "property": ["translate-x"], "duration": "{medium}", "timing-function": "{easeRapid}" } }, "section-container": { "hidden": true, "height": "{s_8}", "width": "{s_9}", "flex-direction": "{s_10}", "justify-content": "{s_11}", "align-items": "{s_12}", "padding-left": "{s_13}", "padding-top": "{s_14}", "padding-right": "{s_15}" }, "header-container": { "background-color": "{s_16}", "padding-top": "{s_17}", "padding-bottom": "{s_18}", "padding-right": "{s_19}", "padding-left": "{s_20}", "width": "{s_21}", "justify-content": "{s_22}", "align-items": "{s_23}" }, "left-container": { "flex-direction": "{s_24}", "gap": "{s_25}", "align-items": "{s_26}" }, "suffix-jds_action_button": { "hidden": false, "icon": "ic_close", "size": "large" } }, "variant": { "open": { "true": { "container": { "hidden": false, "translate-x": 0, "transition": { "timing-function": "{easeEntrance}" } } } }, "direction": { "right": { "container": { "enter-animation-name": "slideHorizontallyToLeft", "exit-animation-name": "slideHorizontallyToRight" } } }, "showClose": { "false": { "suffix-jds_action_button": { "hidden": true } } }, "_hasChildren": { "true": { "section-container": { "hidden": false }, "children-slot": { "hidden": true } } } }, "combination": [{ "true": { "desktop": { "container": { "width": "{s_28}" } }, "mobile": { "container": { "width": "{s_29}" } } }, "false": { "desktop": { "container": { "width": 412 } }, "mobile": { "container": { "width": "{s_30}" } } } }, { "false": { "right": { "container": { "translate-x": "{size.max}" } } } }], "combination_config": [["maxWidth", "_platform"], ["open", "direction"]], "api": { "children": { "avatar-slot": { "name": "prefix", "accepts": ["jds_avatar", "jds_icon", "jds_button"], "max": 1 }, "header-text-slot": { "name": "header", "accepts": ["jds_text"], "max": 1, "doc_description": "Has pre-defined suffix as close button." }, "children-slot": { "name": "children", "accepts": ["any"], "doc_description": "Any group of children can be added. When used for BurgerMenu, show a list of ListBlocks." } }, "config": { "_platform": { "values": ["desktop", "mobile"] }, "direction": { "values": ["left", "right"], "doc_description": "Determines whether open/close should happen from left or right." }, "showClose": { "values": [true, false], "doc_description": "Whether a close on the right should be shown." }, "open": { "values": [false, true], "doc_description": "Can be used to programatically open/close the drawer with animation and selected direction." }, "maxWidth": { "values": [false, true], "doc_description": "If set it will limit max width of the panel to 412px.", "function": true }, "_hasChildren": { "values": [false, true] }, "disableTransition": { "values": [false, true], "platform": "web" } }, "data": { "section-container": { "value": { "type": "list", "name": "items", "object": { "title": "string", "prefix": "icon", "showSuffix": "boolean", "type": "JDSSidePanelItem.type" } } }, "jds_side_panel_item": { "prefix": { "type": "string", "name": "items.prefix" }, "title": { "type": "string", "name": "items.title" }, "showSuffix": { "type": "boolean", "name": "links.showSuffix" }, "type": { "type": "string", "name": "items.type" } } }, "events": { "suffix-jds_action_button": { "onClick": "onClose" }, "container": { "onClick": "onContainerClick", "onSwipeLeft": "onSwipeLeft" }, "jds_side_panel_item": { "onSuffixClick": "onSidePanelSuffixClick" } }, "a11y": { "suffix-jds_action_button": { "properties": { "ariaLabel": { "name": "suffixAriaLabel", "value": "Close Side Panel" } } }, "section-container": { "name": "items", "properties": { "role": { "value": "list" } }, "repeating": { "ariaLabel": "itemAriaLabel", "itemSuffixAriaLabel": "itemSuffixAriaLabel", "ariaDescribedby": { "name": "itemAriaDescribedby", "platform": "web,ios" } } }, "jds_side_panel_item": { "properties": { "ariaLabel": "items.itemAriaLabel", "itemSuffixAriaLabel": "items.itemSuffixAriaLabel", "ariaDescribedby": "items.itemAriaDescribedby" } } } } };

const withLogic$J = (Component) => (props) => {
  const { onSwipeLeft, ...rest } = props;
  return /* @__PURE__ */ jsx(Component, { ...rest });
};

const Component$N = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$J;
  const { direction = "left", showClose = true, open = false, maxWidth = false, disableTransition = false, onClose = noop, onContainerClick = noop, onSwipeLeft = noop, onSidePanelSuffixClick = noop, suffixAriaLabel = "Close Side Panel", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ direction, showClose, open, maxWidth, disableTransition, onClose, onContainerClick, onSwipeLeft, onSidePanelSuffixClick, suffixAriaLabel, ...rest }, componentTag },
    "JDSSidePanelInternal",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const SidePanelInternal = withLogic$J(Component$N);
SidePanelInternal.displayName = "SidePanelInternal";
SidePanelInternal.slotName = "jds_side_panel_internal";

const sdl$I = { "metadata": { "version": "1.0.0", "id": "spinner-1.0.0", "name": "JDSSpinner", "layerName": "jds_spinner" }, "hierarchy": { "container": [{ "spinner-container": [{ "arc-container": ["base-arc", "normal-arc", "third-arc", "second-arc", "first-arc"] }] }, "jds-text"] }, "base": { "container": { "background-color": "{s_0}", "gap": "{s_1}", "justify-content": "{s_2}", "align-items": "{s_3}", "flex-direction": "{s_4}" }, "spinner-container": { "size": "{s_5}" }, "arc-container": { "flex-direction": "{s_6}", "justify-content": "{s_7}", "align-items": "{s_8}", "size": "{s_9}" }, "base-arc": { "fill": "{s_10}", "radius": "{s_11}", "arcWidth": "{s_12}", "start": "{s_13}", "end": "{s_14}", "z-index": 0 }, "normal-arc": { "fill": "{s_15}", "radius": "{s_16}", "arcWidth": "{s_17}", "start": "{s_18}", "end": "{s_19}", "z-index": 1, "animation-duration": "{s_20}", "animate": true }, "first-arc": { "hidden": true, "fill": "{s_21}", "radius": "{s_22}", "arcWidth": "{s_23}", "start": "{s_24}", "end": "{s_25}", "z-index": 3, "animation-delay": "{s_26}", "animation-duration": "{s_27}", "animate": true }, "second-arc": { "hidden": true, "fill": "{s_28}", "radius": "{s_29}", "arcWidth": "{s_30}", "start": "{s_31}", "end": "{s_32}", "z-index": 2, "animation-delay": "{s_33}", "animation-duration": "{s_34}", "animate": true }, "third-arc": { "hidden": true, "fill": "{s_35}", "radius": "{s_36}", "arcWidth": "{s_37}", "start": "{s_38}", "end": "{s_39}", "z-index": 1, "animation-duration": "{s_40}", "animate": true }, "jds-text": { "font-family": "{bodyM}", "color": "{primaryGrey80}", "font-size": "{bodyM}", "line-height": "{bodyM}", "letter-spacing": "{bodyM}", "font-weight": "{bodyM}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" } }, "variant": { "labelPosition": { "bottom": { "container": { "flex-direction": "{s_41}" } } }, "size": { "small": { "container": { "gap": "{s_42}" }, "spinner-container": { "size": "{s_43}" }, "base-arc": { "arcWidth": "{s_44}", "radius": "{s_45}" }, "normal-arc": { "arcWidth": "{s_46}", "radius": "{s_47}" }, "first-arc": { "arcWidth": "{s_48}", "radius": "{s_49}" }, "second-arc": { "arcWidth": "{s_50}", "radius": "{s_51}" }, "third-arc": { "arcWidth": "{s_52}", "radius": "{s_53}" }, "jds-text": { "font-family": "{bodyS}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}" } } }, "isOverlay": { "true": { "jds-text": { "color": "{primaryInverse}" } } }, "_determinate": { "true": { "normal-arc": { "animate": false } } } }, "combination": [{ "small": { "bottom": { "container": { "flex-direction": "{s_55}" } } } }, { "false": { "inline": { "normal-arc": { "fill": "{s_54}" } }, "vibrant": { "normal-arc": { "hidden": true }, "first-arc": { "hidden": false }, "second-arc": { "hidden": false }, "third-arc": { "hidden": false } } } }], "combination_config": [["size", "labelPosition"], ["_determinate", "kind"]], "api": { "config": { "labelPosition": { "values": ["right", "bottom"], "doc_description": "It determines the position of the label. Note: if using a small spinner, the label can only be positioned on the right." }, "size": { "values": ["medium", "small"], "doc_description": "It can be used to control size od Spinner." }, "kind": { "values": ["normal", "inline", "vibrant"], "doc_description": "It determines the appearance of the spinner .`inline` inherits from text color,`normal`: single color, `vibrant`: three color." }, "isOverlay": { "values": [false, true] }, "_determinate": { "values": [false, true] } }, "data": { "normal-arc": { "end": { "type": "float", "name": "value", "function": true, "doc_description": "It can be used to take value of spinner from user." } }, "jds-text": { "value": { "type": "string", "name": "label", "doc_description": "It displays the label of Spinner." } } }, "a11y": { "container": { "properties": { "aria-label": { "name": "ariaLabel", "value": "Loading" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" }, "aria-live": { "name": "ariaLive", "value": "polite" } } } } } };

const PROP_MAP$a = (props) => ({
  appearance: {
    properties: {
      kind: props.appearance
    }
  }
});
const withLogic$I = (Component) => (userProps) => {
  const props = modifyProps(userProps, PROP_MAP$a);
  return /* @__PURE__ */ jsx(
    Component,
    {
      appearance: props.appearance || "normal",
      ...{ ...props, _determinate: props.value !== void 0 }
    }
  );
};

const Component$M = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$I;
  const { labelPosition = "right", size = "medium", kind = "normal", isOverlay = false, ariaLabel = "Loading", ariaLive = "polite", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ labelPosition, size, kind, isOverlay, ariaLabel, ariaLive, ...rest }, componentTag },
    "JDSSpinner",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const Spinner = withLogic$I(Component$M);
Spinner.displayName = "Spinner";
Spinner.slotName = "jds_spinner";

const sdl$H = { "metadata": { "name": "JDSStepperDot", "version": "1.0.0", "layerName": "jds_stepper_dot", "description": "Steppers help break a complex task into a series of manageable steps and guides useres through each step of their progress.", "usage": "Steppers are used to support new and improve existing processes such as checkout and account application journeys.", "internal": true }, "hierarchy": { "step-icon-container": ["count-jds-text", "icon", "complete-icon", "dot-container"] }, "base": { "step-icon-container": { "background-color": "{s_0}", "border-width": "{s_1}", "border-color": "{s_2}", "min-height": "{s_3}", "min-width": "{s_4}", "justify-content": "{s_5}", "align-items": "{s_6}", "border-radius": "{s_7}", "show": true }, "icon": { "hidden": true, "color": "{s_8}", "size": "{s_9}" }, "complete-icon": { "hidden": true, "value": "ic_confirm", "color": "{s_10}", "size": "{s_11}" }, "dot-container": { "hidden": true, "background-color": "{s_12}", "width": "{s_13}", "height": "{s_14}", "border-radius": "{s_15}", "show": true }, "count-jds-text": { "font-family": "{bodyXxs}", "color": "{sparkleGrey60}", "font-size": "{bodyXxs}", "line-height": "{bodyXxs}", "letter-spacing": "{bodyXxs}", "font-weight": "{bodyXxs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" } }, "variant": { "state": { "active": { "step-icon-container": { "background-color": "{s_16}", "border-color": "{s_17}" }, "icon": { "color": "{s_18}" }, "dot-container": { "background-color": "{s_19}" }, "count-jds-text": { "color": "{sparkleInverse}" } }, "complete": { "step-icon-container": { "background-color": "{s_20}", "border-color": "{s_21}" }, "complete-icon": { "hidden": false }, "count-jds-text": { "hidden": true } }, "disabled": { "step-icon-container": { "disabled": true, "opacity": "{s_26}" } } }, "itemsType": { "icon": { "dot-container": { "hidden": true }, "step-icon-container": { "height": "{s_22}", "width": "{s_23}" }, "count-jds-text": { "hidden": true } }, "dot": { "icon": { "hidden": true }, "dot-container": { "hidden": false }, "count-jds-text": { "hidden": true } } } }, "combination": [{ "complete": { "icon": { "icon": { "hidden": true } }, "dot": { "dot-container": { "hidden": true } } }, "active": { "icon": { "icon": { "hidden": false } } }, "inactive": { "icon": { "icon": { "hidden": false } } } }, { "warning": { "active": { "icon": { "hidden": false, "value": "ic_exclamation", "color": "{s_24}" }, "dot-container": { "hidden": true }, "count-jds-text": { "hidden": true } }, "complete": { "icon": { "hidden": false, "value": "ic_exclamation", "color": "{s_25}" }, "complete-icon": { "hidden": true }, "dot-container": { "hidden": true }, "count-jds-text": { "hidden": true } } } }], "combination_config": [["state", "itemsType"], ["activeState", "state"]], "api": { "config": { "state": { "values": ["inactive", "active", "complete", "disabled"] }, "itemsType": { "values": ["numbered", "icon", "dot"], "doc_description": "Represents the type of Stepper indication." }, "activeState": { "values": ["normal", "warning"], "doc_description": "Devs will set this to show the warning states for active index only." } }, "data": { "icon": { "value": { "type": "icon", "name": "icon", "function": true, "doc_description": "Optional icon. Only shows if parent stepper type is icon." } }, "count-jds-text": { "value": { "type": "string", "name": "index" } } } } };

const withLogic$H = (Component) => (props) => {
  const tokens = useTokenValues();
  const language = tokens.lang;
  const numeralList = useMemo(() => {
    return getNumbers(language);
  }, [language]);
  return /* @__PURE__ */ jsx(Component, { ...props, index: numeralList[Number(props.index ?? 0)] });
};

const Component$L = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$H;
  const { state = "inactive", itemsType = "numbered", activeState = "normal", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ state, itemsType, activeState, ...rest }, componentTag },
    "JDSStepperDot",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const StepperDot = withLogic$H(Component$L);
StepperDot.displayName = "StepperDot";
StepperDot.slotName = "jds_stepper_dot";

const sdl$G = { "metadata": { "version": "1.0.0", "id": "tab-1.0.0", "name": "JDSTabBar", "layerName": "jds_tab_bar" }, "hierarchy": { "container": [{ "tab-container": ["jds_tab_item"] }, { "indicator-container": [{ "outer-container": ["inner-container"] }] }] }, "base": { "container": { "flex-direction": "{t_0}", "justify-content": "{t_3}", "align-items": "{t_4}", "width": "{t_1}" }, "indicator-container": { "z-index": 1, "show": true, "width": "{t_2}" }, "tab-container": { "width": "{t_5}", "opacity": "{t_6}", "background-color": "{t_7}", "align-items": "{t_8}", "justify-content": "{t_9}", "gap": "{t_10}", "flex-direction": "{t_11}" }, "jds_tab_item": { "kind": "label_icon", "appearance": "normal" }, "outer-container": { "flex-direction": "{t_12}", "justify-content": "{t_13}", "align-items": "{t_14}", "width": "{t_15}", "transition": { "property": ["padding-left"], "duration": "{rapid}", "timing-function": "{easeRapid}" } }, "inner-container": { "background-color": "{t_17}", "border-radius": "{t_16}", "height": "{t_18}", "show": true, "transition": { "property": ["width"], "duration": "{rapid}", "timing-function": "{easeRapid}" } } }, "variant": { "overflow": { "fit": { "tab-container": { "width": "{t_19}", "justify-content": "{t_20}" }, "jds_tab_item": { "flex": 1 } } }, "kind": { "label": { "jds_tab_item": { "kind": "label" } }, "icon": { "jds_tab_item": { "kind": "icon" } } }, "appearance": { "tab_bar": { "tab-container": { "background-color": "{t_21}", "padding-right": "{t_22}", "padding-left": "{t_23}" }, "jds_tab_item": { "appearance": "tab_bar" }, "inner-container": { "mode": "dark", "background-color": "{t_24}" } } } }, "combination": [{ "mobile": { "tab_bar": { "indicator-container": { "padding-right": "{t_25}", "padding-left": "{t_26}" }, "tab-container": { "padding-right": "{t_25}", "padding-left": "{t_26}" } } } }], "combination_config": [["_platform", "appearance"]], "api": { "config": { "overflow": { "values": ["scroll", "fit"] }, "kind": { "type": "JDSTabItem.kind", "values": ["label_icon", "label", "icon"] }, "appearance": { "type": "JDSTabItem.appearance", "values": ["normal", "tab_bar"] }, "_platform": { "values": ["desktop", "mobile"] } }, "data": { "tab-container": { "value": { "type": "list", "name": "items", "object": { "label": "string", "icon": "icon", "disabled": "boolean" } } }, "outer-container": { "padding-left": { "type": "size", "name": "_left" } }, "inner-container": { "width": { "type": "size", "name": "_width" } }, "jds_tab_item": { "activeTab": { "type": "number", "name": "activeTab" }, "label": { "type": "string", "name": "items.label" }, "icon": { "type": "icon", "name": "items.icon" }, "disabled": { "type": "boolean", "name": "items.disabled" } } }, "events": { "jds_tab_item": { "onAppear": { "name": "_onAppear", "platform": "ios, android" }, "onClick": "onChange" }, "container": { "onScroll": { "name": "onScroll", "platform": "web" }, "onAppear": { "name": "_onTabAppear", "platform": "ios" } } }, "a11y": { "tab-container": { "properties": { "role": { "value": "tablist" } }, "name": "items", "repeating": { "ariaLabel": "tabAriaLabel", "ariaDescribedby": { "name": "tabAriaDescribedby", "platform": "web,ios" } } }, "jds_tab_item": { "properties": { "ariaLabel": "ariaLabel", "ariaDescribedby": "ariaDescribedby" } } } } };

const withLogic$G = (Component) => (props) => {
  const { rootRef, element } = useRootRef();
  const [activeTabStyles, setActiveTabStyles] = useState({
    _left: void 0,
    _width: void 0
  });
  const calculateStyles = useCallback(() => {
    const tabContainers = Array.from(
      element?.querySelectorAll("div.j-JDSTabItem-outer-container") || []
    );
    const active = tabContainers[props.activeTab || 0];
    setActiveTabStyles({
      _left: active?.offsetLeft,
      _width: active?.offsetWidth
    });
  }, [element, props.activeTab]);
  useEffect(() => {
    if (element) {
      calculateStyles();
      const resizeObserver = new ResizeObserver(() => {
        calculateStyles();
      });
      element.querySelectorAll("div.j-JDSTabItem-outer-container").forEach((tabContainer) => {
        resizeObserver.observe(tabContainer);
      });
      return () => {
        resizeObserver.disconnect();
      };
    }
  }, [element, calculateStyles]);
  useEffect(() => {
    window.addEventListener("resize", calculateStyles);
    return () => {
      window.removeEventListener("resize", calculateStyles);
    };
  }, [calculateStyles]);
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        rootRef,
        _left: activeTabStyles._left,
        _width: activeTabStyles._width
      }
    }
  );
};

const Component$K = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$G;
  const { overflow = "scroll", kind = "undefined", appearance = "undefined", onChange = noop, onScroll = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ overflow, kind, appearance, onChange, onScroll, ...rest }, componentTag },
    "JDSTabBar",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const TabBar = withLogic$G(Component$K);
TabBar.displayName = "TabBar";
TabBar.slotName = "jds_tab_bar";

const sdl$F = { "metadata": { "version": "1.0.0", "id": "tab-item-1.0.0", "name": "JDSTabItem", "layerName": "jds_tab_item" }, "hierarchy": { "outer-container": [{ "container": ["icon", "text"] }] }, "base": { "outer-container": { "background-color": "{t_0}", "flex-direction": "{t_1}", "align-items": "{t_2}", "justify-content": "{t_3}", "min-height": "{t_4}", "height": "{t_6}", "width": "{t_5}", "opacity": "{t_33}", "behavior": { "hover": {}, "active": {} } }, "container": { "flex-direction": "{t_7}", "align-items": "{t_8}", "justify-content": "{t_9}", "gap": "{t_10}", "flex": 1, "padding-top": "{t_11}", "padding-bottom": "{t_12}", "padding-right": "{t_13}", "padding-left": "{t_14}", "behavior": { "focus": { "border-width": "{t_15}", "border-color": "{t_16}", "border-radius": "{t_17}" } } }, "text": { "color": "{t_22}", "font-family": "{t_24}", "font-size": "{t_23}", "line-height": "{t_26}", "letter-spacing": "{t_27}", "font-weight": "{t_25}", "max-lines": 2, "behavior": { "hover": { "color": "{t_28}" }, "active": { "color": "{tabitem_base_text_behavior_active_color}" } } }, "icon": { "size": "{t_18}", "color": "{t_19}", "hidden": false, "behavior": { "hover": { "color": "{t_20}" }, "active": { "color": "{t_21}" } } } }, "variant": { "kind": { "label": { "icon": { "hidden": true } }, "icon": { "text": { "hidden": true } } }, "disabled": { "true": { "outer-container": { "disabled": true, "opacity": "{t_34}" }, "container": { "disabled": true } } }, "appearance": { "normal": { "text": { "behavior": { "hover": { "color": "{t_35}" }, "active": { "color": "{t_36}" } } } }, "tab_bar": { "container": { "mode": "dark", "behavior": { "active": { "background-color": "{t_37}" }, "focus": { "border-color": "{t_38}" } } }, "text": { "color": "{t_42}", "behavior": { "hover": { "color": "{t_43}" }, "active": { "color": "{t_44}" } } }, "icon": { "color": "{t_39}", "behavior": { "hover": { "color": "{t_40}" }, "active": { "color": "{t_41}" } } } } } }, "combination": [{ "active": { "normal": { "text": { "color": "{t_46}" }, "icon": { "color": "{t_45}" } } } }], "combination_config": [["state", "appearance"]], "api": { "config": { "state": { "values": ["inactive", "active"] }, "kind": { "values": ["label_icon", "label", "icon"] }, "appearance": { "values": ["normal", "tab_bar"] }, "disabled": { "values": [false, true] } }, "data": { "text": { "value": { "type": "string", "name": "label" } }, "icon": { "value": { "type": "icon", "name": "icon" } } }, "events": { "outer-container": { "onAppear": { "name": "onAppear", "platform": "ios, android" } }, "container": { "onClick": "onClick" } }, "a11y": { "container": { "properties": { "role": { "value": "tab" }, "aria-label": { "name": "ariaLabel", "prop": "label" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" }, "aria-selected": { "name": "_ariaSelected" } } } } } };

const withLogic$F = (Component) => (props) => {
  return /* @__PURE__ */ jsx(
    TokenProvider,
    {
      value: { mode: props.appearance === "tab_bar" ? "dark" : void 0 },
      children: /* @__PURE__ */ jsx(
        Component,
        {
          ...{
            ...props,
            onClick: () => {
              if (!props.disabled) {
                props.onClick?.(props.internalIndex);
              }
            },
            state: props.activeTab === props.internalIndex ? "active" : "default",
            _ariaSelected: props.activeTab === props.internalIndex
          }
        }
      )
    }
  );
};

const Component$J = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$F;
  const { state = "inactive", kind = "label_icon", appearance = "normal", disabled = false, onAppear = noop, onClick = noop, ariaLabel = props.label?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ state, kind, appearance, disabled, onAppear, onClick, ariaLabel, ...rest }, componentTag },
    "JDSTabItem",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const TabItem = withLogic$F(Component$J);
TabItem.displayName = "TabItem";
TabItem.slotName = "jds_tab_item";

const sdl$E = { "metadata": { "version": "1.0.0", "id": "table-body-1.0.0", "name": "JDSTableBody", "layerName": "jds_table_body", "internal": true }, "hierarchy": { "container": ["jds_table_row"] }, "base": { "container": { "flex-direction": "{t_1}" }, "jds_table_row": {} }, "variant": { "density": { "condensed": { "jds_table_row": { "density": "condensed" } } }, "fullWidth": { "true": { "container": { "width": "{t_2}" }, "jds_table_row": { "flex": 1 } } }, "columnDivider": { "true": { "jds_table_row": { "columnDivider": true } } } }, "api": { "config": { "density": { "type": "JDSTableCell.density", "values": ["relaxed", "condensed"] }, "columnDivider": { "values": [false, true], "function": true }, "fullWidth": { "values": [false, true] }, "zebra": { "values": [false, true] } }, "data": { "container": { "value": { "type": "list", "name": "rows", "function": true, "object": { "cells": "JDSTableRow.cells" } } }, "jds_table_row": { "cells": { "name": "rows.cells", "type": "list" } } } } };

const withLogic$E = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$I = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$E;
  const { density = "undefined", columnDivider = false, fullWidth = false, zebra = false, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ density, columnDivider, fullWidth, zebra, ...rest }, componentTag },
    "JDSTableBody",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const TableBody = withLogic$E(Component$I);
TableBody.displayName = "TableBody";
TableBody.slotName = "jds_table_body";

const sdl$D = { "metadata": { "version": "1.0.0", "id": "table-cell-1.0.0", "name": "JDSTableCell", "layerName": "jds_table_cell", "internal": true }, "hierarchy": { "container": ["jds-text"] }, "base": { "container": { "flex-direction": "{t_0}", "justify-content": "{t_1}", "align-items": "{t_2}", "background-color": "{t_3}", "padding-left": "{t_4}", "padding-right": "{t_5}", "padding-top": "{t_6}", "padding-bottom": "{t_7}", "border-color": "{t_8}", "border-bottom-width": 1, "width": "{t_9}" }, "jds-text": { "font-family": "{bodyS}", "color": "{primaryGrey100}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "max-lines": 1, "maxLines": 1 } }, "variant": { "density": { "condensed": { "container": { "padding-left": "{t_10}", "padding-right": "{t_11}", "padding-top": "{t_12}", "padding-bottom": "{t_13}" } } }, "columnDivider": { "true": { "container": { "border-color": "{t_14}", "border-right-width": "{t_15}" } } } }, "combination": [{ "header": { "true": { "container": { "background-color": "{t_16}", "border-color": "{t_17}", "border-bottom-width": "{t_19}" }, "jds-text": { "font-family": "{headingXxs}", "color": "{primaryInverse}", "font-size": "{headingXxs}", "line-height": "{headingXxs}", "letter-spacing": "{headingXxs}", "font-weight": "{headingXxs}" } }, "false": { "container": { "border-bottom-width": "{t_20}" }, "jds-text": { "font-family": "{headingXxs}", "font-size": "{headingXxs}", "line-height": "{headingXxs}", "letter-spacing": "{headingXxs}", "font-weight": "{headingXxs}" } } }, "cell": { "true": { "container": { "background-color": "{t_18}", "border-bottom-width": "{t_21}" } } } }], "combination_config": [["type", "background"]], "api": { "data": { "jds-text": { "value": { "type": "string", "name": "label" } } }, "config": { "type": { "values": ["cell", "header"] }, "density": { "values": ["relaxed", "condensed"] }, "background": { "values": [false, true] }, "columnDivider": { "values": [false, true] } }, "a11y": { "container": { "properties": { "role": { "name": "_role" } } } } } };

const withLogic$D = (Component) => (props) => {
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        _role: props.type === "header" ? "columnheader" : "cell"
      }
    }
  );
};

const Component$H = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$D;
  const { type = "cell", density = "relaxed", background = false, columnDivider = false, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ type, density, background, columnDivider, ...rest }, componentTag },
    "JDSTableCell",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const TableCell = withLogic$D(Component$H);
TableCell.displayName = "TableCell";
TableCell.slotName = "jds_table_cell";

const sdl$C = { "metadata": { "version": "1.0.0", "id": "table-row-1.0.0", "name": "JDSTableRow", "layerName": "jds_table_row", "internal": true }, "hierarchy": { "container": ["jds_table_cell"] }, "base": { "container": { "flex-direction": "{t_0}", "lazy-scroll-android": false, "width": "{intrinsicSize.max}" }, "jds_table_cell": { "width": "{size.max}" } }, "variant": { "density": { "condensed": { "jds_table_cell": { "density": "condensed" } } }, "columnDivider": { "true": { "jds_table_cell": { "columnDivider": true } } } }, "api": { "config": { "density": { "type": "JDSTableCell.density", "values": ["relaxed", "condensed"] }, "columnDivider": { "values": [false, true] } }, "data": { "container": { "value": { "type": "list", "name": "cells", "object": { "text": "string", "type": "JDSTableCell.type", "background": "boolean" } } }, "jds_table_cell": { "label": { "name": "cells.text", "type": "string" }, "type": { "name": "cells.type", "type": "JDSTableCell.type" }, "background": { "name": "cells.background", "type": "boolean" } } }, "a11y": { "container": { "properties": { "role": { "value": "row" } } } } } };

const withLogic$C = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$G = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$C;
  const { density = "undefined", columnDivider = false, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ density, columnDivider, ...rest }, componentTag },
    "JDSTableRow",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const TableRow = withLogic$C(Component$G);
TableRow.displayName = "TableRow";
TableRow.slotName = "jds_table_row";

const sdl$B = { "metadata": { "version": "1.0.0", "id": "tab-desktop-1.0.0", "name": "JDSTabsDesktop", "platform": "web", "layerName": "jds_tabs_desktop", "description": "Horizontal scrollable tabs is a navigation  device placed at the top of a page or content area that they relate to and can be separated into smaller groups of related information", "usage": "Use this type of tabs to organize related product information on a model landing page." }, "hierarchy": { "container": [{ "header-container": ["prev-jds_button", { "tablist-container": ["jds_tab_bar"] }, "next-jds_button"] }, "content-slot"] }, "base": { "container": { "flex-direction": "{t_0}", "width": "{t_1}" }, "jds_tab_bar": { "width": "{t_2}", "overflow": "scroll", "appearance": "normal", "kind": "label_icon" }, "header-container": { "flex-direction": "{t_3}", "width": "{t_4}", "align-items": "{t_5}" }, "prev-jds_button": { "icon": "ic_back", "kind": "tertiary", "hidden": true }, "next-jds_button": { "icon": "ic_next", "kind": "tertiary", "hidden": true }, "tablist-container": { "width": "{t_6}", "overflow": "auto" } }, "variant": { "overflow": { "fit": { "jds_tab_bar": { "overflow": "fit" }, "tablist-container": { "overflow": "hidden" } }, "arrows": { "prev-jds_button": { "hidden": false }, "next-jds_button": { "hidden": false }, "header-container": { "gap": "{t_7}" } } }, "appearance": { "tab_bar": { "jds_tab_bar": { "appearance": "tab_bar" }, "header-container": { "background-color": "{t_8}" } } }, "_kind": { "label": { "jds_tab_bar": { "kind": "label" } }, "icon": { "jds_tab_bar": { "kind": "icon" } } }, "_hideNextBtn": { "true": { "next-jds_button": { "hidden": true } } }, "_hidePrevBtn": { "true": { "prev-jds_button": { "hidden": true } } } }, "combination": [{}], "combination_config": [[]], "api": { "config": { "overflow": { "values": ["scroll", "fit", "arrows"], "doc_dscription": "Setting this to true makes the Tab fit the available width." }, "appearance": { "type": "JDSTabItem.appearance", "values": ["normal", "tab_bar"] }, "_kind": { "type": "JDSTabItem.kind", "values": ["label_icon", "label", "icon"] }, "_hideNextBtn": { "values": [false, true] }, "_hidePrevBtn": { "values": [false, true] } }, "data": { "jds_tab_bar": { "items": { "type": "list", "name": "items", "object": { "label": "string", "icon": "icon", "disabled": "boolean" } }, "activeTab": { "type": "number", "name": "activeTab", "doc_description": "Changes programatically the active tab with animation." } } }, "events": { "jds_tab_bar": { "onChange": "onChange", "onScroll": "onScroll" }, "prev-jds_button": { "onClick": "onPrevClick" }, "next-jds_button": { "onClick": "onNextClick" } }, "children": { "content-slot": { "name": "content", "accepts": ["template"] } }, "a11y": { "jds_tab_bar": { "name": "items", "repeating": { "ariaLabel": "tabAriaLabel", "ariaDescribedby": { "name": "tabAriaDescribedby", "platform": "web,ios" } } }, "prev-jds_button": { "properties": { "ariaLabel": { "name": "previousButtonAriaLabel", "value": "Previous Tab" } } }, "next-jds_button": { "properties": { "ariaLabel": { "name": "nextButtonAriaLabel", "value": "Next Tab" } } } } } };

const getOverflow = (props) => {
  if (["tab-bar", "tab_bar"].includes(props.appearance)) {
    if (["arrow", "arrows"].includes(props.overflow)) {
      return "scroll";
    }
  }
  return props.overflow;
};
const PROP_MAP$9 = (props) => {
  if (props.appearance === "tab-bar") {
    console.warn("appearance tab-bar is deprecated. Use tab_bar instead");
  }
  if (props.overflow === "arrow") {
    console.warn("overflow arrrow is deprecated. Use arrow instead");
  }
  return {
    appearance: {
      variations: {
        normal: {
          appearance: "normal"
        },
        "tab-bar": {
          appearance: "tab_bar"
        }
      }
    },
    overflow: {
      variations: {
        arrow: {
          overflow: "arrows"
        }
      },
      normal: {
        overflow: "normal"
      }
    }
  };
};
const TAB_LIST_CLASS = 'div[data-testid="JDSTabsDesktop-tablist-container"]';
const SCROLLABLE_CLASS = ".j-JDSTabBar-tab-container";
const withLogic$B = (Component) => (userProps) => {
  const props = modifyProps(userProps, PROP_MAP$9);
  const { element, rootRef } = useRootRef();
  const { index, onClick } = useSelected(props.activeTab || 0);
  const items = props.items || props.children?.map((c) => c.props);
  const tabListElement = element?.querySelector(TAB_LIST_CLASS);
  const scrollableELement = element?.querySelector(SCROLLABLE_CLASS);
  const hasIcon = items?.every((i) => i?.icon);
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        items,
        rootRef,
        _kind: hasIcon ? "label_icon" : "label",
        activeTab: index,
        overflow: getOverflow(props),
        onNextClick: () => {
          if (tabListElement && scrollableELement) {
            const scrollValue = Math.min(
              tabListElement.scrollWidth,
              tabListElement.scrollLeft + tabListElement.clientWidth
            );
            tabListElement.scrollTo({
              left: scrollValue,
              behavior: "smooth"
            });
          }
        },
        onPrevClick: () => {
          if (tabListElement) {
            const scrollValue = Math.max(
              0,
              tabListElement.scrollLeft - tabListElement.clientWidth
            );
            tabListElement.scrollTo({
              left: scrollValue,
              behavior: "smooth"
            });
          }
        },
        content: items?.[index]?.children,
        onChange: (i) => {
          onClick(i);
          props.onChange?.(i);
        }
      }
    }
  );
};

const Component$F = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$B;
  const { overflow = "scroll", appearance = "undefined", onChange = noop, onScroll = noop, onPrevClick = noop, onNextClick = noop, previousButtonAriaLabel = "Previous Tab", nextButtonAriaLabel = "Next Tab", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ overflow, appearance, onChange, onScroll, onPrevClick, onNextClick, previousButtonAriaLabel, nextButtonAriaLabel, ...rest }, componentTag },
    "JDSTabsDesktop",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const Tabs = withLogic$B(Component$F);
Tabs.displayName = "Tabs";
Tabs.slotName = "jds_tabs_desktop";

const sdl$A = { "metadata": { "version": "1.0.0", "id": "tag-1.0.0", "name": "JDSTag", "layerName": "jds_tag", "description": "Tags are keywords used to describe, categorize, or filter content.", "usage": "Use tags when content is mapped to multiple categories, and the user needs a way to differentiate between them." }, "hierarchy": { "container": ["jds-text", "icon"] }, "base": { "container": { "hidden": false, "display": "flex", "flex-direction": "{t_0}", "justify-content": "{t_1}", "align-items": "{t_2}", "padding-top": "{t_3}", "padding-left": "{t_4}", "padding-right": "{t_5}", "padding-bottom": "{t_6}", "gap": "{t_7}", "background-color": "{t_8}", "border-radius": "{t_9}", "border-width": "{t_10}", "border-color": "{t_11}", "opacity": "{t_30}", "behavior": { "active": { "border-color": "{t_13}" }, "focus": { "border-color": "{t_14}", "border-width": "{t_15}" }, "hover": { "border-color": "{t_12}" } } }, "icon": { "hidden": true, "size": "{t_16}", "color": "{t_17}", "behavior": { "hover": { "color": "{t_18}" }, "active": { "color": "{t_19}" }, "focus": { "color": "{t_20}" } } }, "jds-text": { "font-family": "{bodyS}", "color": "{primaryGrey100}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "max-lines": 1, "hidden": false, "maxLines": 1, "behavior": { "hover": { "color": "{sparkle80}" }, "active": { "color": "{sparkle80}" }, "focus": { "color": "{sparkle80}" } } } }, "variant": { "size": { "small": { "container": { "padding-top": "{t_31}", "padding-left": "{t_32}", "padding-right": "{t_33}", "padding-bottom": "{t_34}" }, "jds-text": { "font-family": "{bodyXs}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}" } } }, "kind": { "filter": { "icon": { "hidden": false } } }, "active": { "true": { "container": { "background-color": "{t_23}", "border-width": "{t_21}", "border-color": "{t_22}", "behavior": { "hover": { "background-color": "{t_24}" }, "active": { "background-color": "{t_25}", "border-color": "{t_26}", "border-width": 1 }, "focus": { "background-color": "{t_27}" } } }, "icon": { "color": "{t_28}", "value": "ic_close" }, "jds-text": { "color": "{sparkle80}" } } }, "disabled": { "true": { "container": { "disabled": true, "opacity": "{t_29}" } } } }, "combination": [{}], "combination_config": [[]], "api": { "data": { "icon": { "value": { "type": "icon", "name": "icon", "function": true } }, "jds-text": { "value": { "type": "string", "name": "label", "doc_description": "It displays label of Tag." } } }, "config": { "size": { "values": ["medium", "small"], "doc_description": "It can be used to control size of Tag." }, "kind": { "values": ["toggle", "filter"], "doc_description": "It can be used to switch between 2 variants of Tag." }, "disabled": { "values": [false, true], "doc_description": "It can be used to enable or disable Tag." }, "active": { "values": [false, true], "doc_description": "This can be used to activate Tag." } }, "events": { "container": { "onClick": "onClick" } }, "a11y": { "container": { "properties": { "role": { "value": "button" }, "aria-label": { "name": "ariaLabel", "prop": "label" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" }, "aria-pressed": { "name": "_ariaPressed", "prop": "active" } } } } } };

const withLogic$A = (Component) => (props) => {
  const { selected, toggle } = useToggle(
    props.active,
    props.kind !== "normal",
    props.onClick
  );
  const icon = selected ? "IcClose" : typeof props.icon === "string" ? props.icon : "IcAdd";
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        onClick: toggle,
        active: selected,
        icon
      }
    }
  );
};

const Component$E = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$A;
  const { size = "medium", kind = "toggle", disabled = false, active = false, onClick = noop, ariaLabel = props.label?.toString(), _ariaPressed = props.active?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ size, kind, disabled, active, onClick, ariaLabel, _ariaPressed, ...rest }, componentTag },
    "JDSTag",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const Tag = withLogic$A(Component$E);
Tag.displayName = "Tag";
Tag.slotName = "jds_tag";

const sdl$z = { "metadata": { "version": "1.0.0", "id": "toast-1.0.0", "name": "JDSToast", "layerName": "jds_toast" }, "hierarchy": { "root-container": [{ "base-container": ["left-slot", { "center-container": ["heading-jds-text", "support-jds-text"] }, "close-jds_notification_button", "right-slot"] }, { "buttons-container": ["secondary-jds_notification_button", "primary-jds_notification_button"] }] }, "base": { "root-container": { "width": "{t_0}", "max-width": "{t_1}", "border-radius": "{t_2}", "background-color": "{t_3}", "flex-direction": "{t_4}", "gap": "{t_5}", "padding-top": "{t_6}", "padding-right": "{t_7}", "padding-bottom": "{t_8}", "padding-left": "{t_9}", "enter-animation-name": "slideVerticallyUp", "exit-animation-name": "slideVerticallyDown", "enter-animation-curve": "entrance_ease", "exit-animation-curve": "exit_ease", "enter-animation-duration": 500, "exit-animation-duration": 500, "transition": { "property": ["translate-x", "translate-y"], "duration": "{medium}", "timing-function": "{easeJoyfulExit}" }, "hidden": true }, "base-container": { "gap": "{t_10}", "flex-direction": "{t_12}", "justify-content": "{t_13}", "align-items": "{t_14}", "width": "{t_11}" }, "center-container": { "flex-direction": "{t_15}", "justify-content": "{t_16}", "align-items": "{t_17}", "gap": "{t_18}", "flex": 1 }, "close-jds_notification_button": { "hidden": false, "icon": "ic_close", "kind": "tertiary" }, "buttons-container": { "gap": "{t_20}", "flex-direction": "{t_21}", "justify-content": "{t_22}", "width": "{t_19}" }, "secondary-jds_notification_button": { "kind": "tertiary" }, "right-slot": { "hidden": true }, "heading-jds-text": { "font-family": "{bodySBold}", "color": "{primaryBackground}", "font-size": "{bodySBold}", "line-height": "{bodySBold}", "letter-spacing": "{bodySBold}", "font-weight": "{bodySBold}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "max-lines": 2, "maxLines": 2 }, "support-jds-text": { "font-family": "{bodyXs}", "color": "{primaryGrey20}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "max-lines": 2, "maxLines": 2 } }, "variant": { "open": { "true": { "root-container": { "hidden": false, "transition": { "timing-function": "{easeJoyfulEntrance}" } } } }, "showClose": { "false": { "close-jds_notification_button": { "hidden": true }, "right-slot": { "hidden": false } } }, "_platform": { "tablet": { "root-container": { "max-width": "{t_23}" } }, "desktop": { "root-container": { "max-width": "{t_24}" } } }, "_hasCTA": { "false": { "buttons-container": { "hidden": true } } }, "_hasDescription": { "false": { "support-jds-text": { "hidden": true } } } }, "combination": [{ "false": { "mobile": { "root-container": { "translate-y": "{size.max}" } }, "tablet": { "root-container": { "translate-x": "{size.negativeMax}" } }, "desktop": { "root-container": { "translate-x": "{size.negativeMax}" } } }, "true": { "mobile": { "root-container": { "translate-y": 0 } }, "tablet": { "root-container": { "translate-x": 0 } }, "desktop": { "root-container": { "translate-x": 0 } } } }], "combination_config": [["open", "_platform"]], "api": { "config": { "open": { "values": [false, true] }, "showClose": { "values": [true, false], "doc_description": "This shows close button on Toast when true." }, "_platform": { "values": ["mobile", "tablet", "desktop"] }, "_hasCTA": { "values": [true, false] }, "_hasDescription": { "values": [true, false] } }, "data": { "root-container": { "_nudge.id": { "type": "NotificationId", "name": "id", "required": true, "doc_description": "It will hold the reference of Toast" }, "dismissAfter": { "type": "number", "name": "dismissAfter" } }, "secondary-jds_notification_button": { "label": { "type": "string", "name": "secondaryCTA", "doc_description": "It displays label of secondary button of Toast." } }, "primary-jds_notification_button": { "label": { "type": "string", "name": "primaryCTA", "doc_description": "It displays label of primary button of Toast." } }, "heading-jds-text": { "value": { "type": "string", "name": "title", "doc_description": "It displays the title of Toast." } }, "support-jds-text": { "value": { "type": "string", "name": "description", "doc_description": "It can be used to add description to the Toast." } } }, "events": { "root-container": { "onShow": "onShow", "onUpdate": { "name": "onUpdate", "platform": "android" }, "onHover": { "name": "onHover", "platform": "web" }, "onHoverEnd": { "name": "onHoverEnd", "platform": "web" }, "onSwipeDown": "onClose" }, "close-jds_notification_button": { "onClick": "onClose" }, "secondary-jds_notification_button": { "onClick": "onSecondaryClick" }, "primary-jds_notification_button": { "onClick": "onPrimaryClick" } }, "children": { "left-slot": { "accepts": ["jds_icon", "jds_avatar"], "max": 1, "name": "prefix", "doc_description": "It takes 'icon', 'avatar' as prefix." }, "right-slot": { "accepts": ["jds_notification_button"], "max": 1, "name": "suffix", "doc_description": "It takes 'jds_notification_button' as suffix." } }, "a11y": { "root-container": { "properties": { "role": { "value": "alertdialog" }, "aria-label": { "name": "ariaLabel", "prop": "title" } } } } } };

const Component$D = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$z;
  const { open = false, showClose = true, onShow = noop, onUpdate = noop, onHover = noop, onHoverEnd = noop, onClose = noop, onSecondaryClick = noop, onPrimaryClick = noop, ariaLabel = props.title?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ open, showClose, onShow, onUpdate, onHover, onHoverEnd, onClose, onSecondaryClick, onPrimaryClick, ariaLabel, ...rest }, componentTag },
    "JDSToast",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const Toast = withLogic$W(Component$D);
Toast.displayName = "Toast";
Toast.slotName = "jds_toast";

const sdl$y = { "metadata": { "version": "1.0.0", "id": "tooltip-1.0.0", "name": "JDSTooltip", "layerName": "jds_tooltip", "description": "Tooltips are floating elements primarily used for accessibility as its function. It is used to display additional information about a user interface element or feature.", "usage": "The information included should be contextual, helpful, and nonessential while providing that extra ability to communicate and give clarity to a user." }, "hierarchy": { "popup": [{ "popup-container": ["jds_tooltip_internal"] }] }, "base": { "popup": { "passive": true, "hidden": true, "priority": 30 }, "popup-container": { "flex-direction": "{t_0}", "justify-content": "{t_1}", "align-items": "{t_2}" }, "jds_tooltip_internal": {} }, "variant": { "position": { "right_start": { "jds_tooltip_internal": { "position": "right_start" } }, "right_end": { "jds_tooltip_internal": { "position": "right_end" } }, "left": { "jds_tooltip_internal": { "position": "left" } }, "left_start": { "jds_tooltip_internal": { "position": "left_start" } }, "left_end": { "jds_tooltip_internal": { "position": "left_end" } }, "top": { "jds_tooltip_internal": { "position": "top" } }, "top_start": { "jds_tooltip_internal": { "position": "top_start" } }, "top_end": { "jds_tooltip_internal": { "position": "top_end" } }, "bottom": { "jds_tooltip_internal": { "position": "bottom" } }, "bottom_start": { "jds_tooltip_internal": { "position": "bottom_start" } }, "bottom_end": { "jds_tooltip_internal": { "position": "bottom_end" } } }, "open": { "true": { "popup": { "hidden": false } } }, "_platform": { "desktop": { "jds_tooltip_internal": { "_platform": "desktop" } } } }, "api": { "config": { "position": { "values": ["right", "right_start", "right_end", "bottom", "bottom_start", "bottom_end", "left", "left_start", "left_end", "top", "top_start", "top_end"], "doc-description": "It can be used to give certain position to the Tooltip." }, "open": { "values": [false, true], "doc_description": "It can be used to progamtically open and close Tooltip." }, "_platform": { "values": ["mobile", "desktop"] } }, "data": { "jds_tooltip_internal": { "label": { "type": "string", "name": "label", "doc_description": "It displays label of Tooltip." }, "triggerRef": { "type": "ref", "name": "triggerRef" }, "width": { "type": "size", "name": "width" }, "triggerSpacing": { "type": "size", "name": "triggerSpacing", "function": true } }, "popup-container": { "padding-left": { "type": "size", "name": "offsetX" }, "padding-top": { "type": "size", "name": "offsetY" } } }, "events": { "jds_tooltip_internal": { "onAppear": { "name": "_onAppear", "platform": "ios" }, "onTextLayout": { "name": "onTextLayout", "platform": "android" } }, "popup": { "onHover": { "name": "onHover", "platform": "web" } } }, "a11y": { "jds_tooltip_internal": { "properties": { "ariaLabel": "ariaLabel", "ariaDescribedby": { "name": "ariaDescribedby", "platform": "web,ios" } } } } } };

function calculateOffsets(position, anchorRect, tooltipRect, gap) {
  let offsetX = "";
  let offsetY = "";
  const halfAnchorWidth = anchorRect.width / 2;
  const halfAnchorHeight = anchorRect.height / 2;
  const halfTooltipWidth = tooltipRect.width / 2;
  const halfTooltipHeight = tooltipRect.height / 2;
  const tipSize = 24;
  const tipSpace = 4;
  const verticalCenterX = anchorRect.left + halfAnchorWidth - halfTooltipWidth;
  const verticalEndX = anchorRect.right - tooltipRect.width - tipSpace;
  const verticalStartX = anchorRect.left + halfAnchorWidth - tipSize + tipSpace;
  const horizontalCenterY = anchorRect.top + halfAnchorHeight - halfTooltipHeight;
  const horizontalEndY = anchorRect.bottom - tooltipRect.height - tipSpace;
  const horizontalStartY = anchorRect.top + halfAnchorHeight - tipSize + tipSpace;
  const bottomY = anchorRect.bottom + gap;
  const topY = anchorRect.top - tooltipRect.height - gap;
  const leftX = anchorRect.left - tooltipRect.width - gap;
  const rightX = anchorRect.right + gap;
  switch (position) {
    case "bottom":
      offsetX = `${verticalCenterX}px`;
      offsetY = `${bottomY}px`;
      break;
    case "bottom_end":
      offsetX = `${verticalEndX}px`;
      offsetY = `${bottomY}px`;
      break;
    case "bottom_start":
      offsetX = `${verticalStartX}px`;
      offsetY = `${bottomY}px`;
      break;
    case "top":
      offsetX = `${verticalCenterX}px`;
      offsetY = `${topY}px`;
      break;
    case "top_end":
      offsetX = `${verticalEndX}px`;
      offsetY = `${topY}px`;
      break;
    case "top_start":
      offsetX = `${verticalStartX}px`;
      offsetY = `${topY}px`;
      break;
    case "left":
      offsetX = `${leftX}px`;
      offsetY = `${horizontalCenterY}px`;
      break;
    case "left_end":
      offsetX = `${leftX}px`;
      offsetY = `${horizontalEndY}px`;
      break;
    case "left_start":
      offsetX = `${leftX}px`;
      offsetY = `${horizontalStartY}px`;
      break;
    case "right":
      offsetX = `${rightX}px`;
      offsetY = `${horizontalCenterY}px`;
      break;
    case "right_end":
      offsetX = `${rightX}px`;
      offsetY = `${horizontalEndY}px`;
      break;
    case "right_start":
      offsetX = `${rightX}px`;
      offsetY = `${horizontalStartY}px`;
      break;
  }
  return { offsetX, offsetY };
}
const SPACE_AVAILABILITY_ORDER = {
  bottom_start: ["top_start", "bottom", "bottom_end", "top", "top_end"],
  bottom_end: ["top_end", "bottom", "bottom_start", "top", "top_start"],
  top_start: ["bottom_start", "top", "top_end", "bottom", "bottom_end"],
  top_end: ["bottom_end", "top", "top_start", "bottom", "bottom_start"],
  right_end: ["left_end", "right", "right_start", "left", "left_start"],
  right_start: ["left_start", "right", "right_end", "left", "left_end"],
  left_end: ["right_end", "left", "left_start", "right", "right_start"],
  left_start: ["right_start", "left", "left_end", "right", "right_end"],
  top: ["bottom", "top_start", "top_end", "bottom_start", "bottom_end"],
  bottom: ["top", "bottom_start", "bottom_end", "top_start", "top_end"],
  left: ["right", "left_start", "left_end", "right_start", "right_end"],
  right: ["left", "right_start", "right_end", "left_start", "left_end"]
};
function isTooltipPositionFit(position, anchorRect, tooltipRect, gap) {
  const { offsetX, offsetY } = calculateOffsets(
    position,
    anchorRect,
    tooltipRect,
    gap
  );
  const positionX = parseInt(offsetX);
  const positionY = parseInt(offsetY);
  const { right, bottom } = tooltipRect;
  const { innerWidth: screenWidth, innerHeight: screenHeight } = window;
  switch (position) {
    case "top":
      return positionY > 0 && positionX > 0 && right < screenWidth;
    case "top_start":
      return positionY > 0 && right < screenWidth;
    case "top_end":
      return positionY > 0 && positionX > 0;
    case "right_start":
      return bottom < screenHeight && right < screenWidth;
    case "right_end":
      return positionY > 0 && right < screenWidth;
    case "right":
      return positionY > 0 && bottom < screenHeight && right < screenWidth;
    case "bottom_start":
      return bottom < screenHeight && right < screenWidth;
    case "bottom_end":
      return bottom < screenHeight && positionX > 0;
    case "bottom":
      return bottom < screenHeight && positionX > 0 && right < screenWidth;
    case "left_start":
      return bottom < screenHeight && positionX > 0;
    case "left_end":
      return positionY > 0 && positionX > 0;
    case "left":
      return bottom < screenHeight && positionY > 0 && positionX > 0;
    default:
      return true;
  }
}
function getFlippedPosition(position, anchorRect, tooltipRect, gap) {
  if (isTooltipPositionFit(position, anchorRect, tooltipRect, gap)) {
    return position;
  }
  const alternativePosition = SPACE_AVAILABILITY_ORDER[position].find(
    (alternativePosition2) => {
      return isTooltipPositionFit(
        alternativePosition2,
        anchorRect,
        tooltipRect,
        gap
      );
    }
  );
  return alternativePosition || position;
}
const LONG_PRESS_DELAY = 1e3;
const SUSTAIN_TIME = 3e3;
const getPosition = (anchor, tooltip, position = "right", TIP_OFFSET = Devices.isTablet() ? 20 : 8, isDesktop) => {
  if (anchor && tooltip) {
    const anchorRect = anchor.getBoundingClientRect();
    const tooltipRect = tooltip.getBoundingClientRect();
    const resolvedOffset = typeof TIP_OFFSET === "string" ? parseInt(TIP_OFFSET.replace("px", "")) : TIP_OFFSET;
    const maxOffset = isDesktop ? 8 : 20;
    const clampedffset = clamp$1(resolvedOffset, 0, maxOffset);
    const currentPosition = getFlippedPosition(
      position,
      anchorRect,
      tooltipRect,
      clampedffset
    );
    const { offsetX, offsetY } = calculateOffsets(
      currentPosition,
      anchorRect,
      tooltipRect,
      clampedffset
    );
    return {
      offsetX: offsetX.replace("px", ""),
      offsetY: offsetY.replace("px", ""),
      newPosition: currentPosition
    };
  }
  return { offsetX: 0, offsetY: 0 };
};

const legacyTooltipPositions = [
  "right-start",
  "right-end",
  "bottom-start",
  "bottom-end",
  "left-start",
  "left-end",
  "top-start",
  "top-end"
];
const PROP_MAP$8 = (props) => {
  if (legacyTooltipPositions.includes(
    props.position
  )) {
    console.warn(
      "these values for the position prop are deprecated",
      legacyTooltipPositions
    );
  }
  return {
    position: {
      variations: {
        "right-start": {
          position: "right_start"
        },
        "left-start": {
          position: "left_start"
        },
        "bottom-start": {
          position: "bottom_start"
        },
        "top-start": {
          position: "top_start"
        },
        "left-end": {
          position: "left_end"
        },
        "right-end": {
          position: "right_end"
        },
        "top-end": {
          position: "top_end"
        },
        "bottom-end": {
          position: "bottom_end"
        },
        left: {
          position: "left"
        },
        right: {
          position: "right"
        },
        top: {
          position: "top"
        },
        bottom: {
          position: "bottom"
        }
      }
    }
  };
};

const withLogic$z = (Component) => (userProps) => {
  const props = modifyProps(userProps, PROP_MAP$8);
  const { children, ...rest } = props;
  const ref = useRef(null);
  const { toggle, selected, close } = useToggle(props.open);
  const [element, setElement] = useState(null);
  const triggerRef = useCallback((element2) => {
    if (element2) {
      setElement(element2);
    }
  }, []);
  const { desktop } = Devices.useMedia();
  const { offsetX, offsetY, newPosition } = getPosition(
    ref.current,
    element,
    rest.position,
    props.triggerSpacing,
    desktop
  );
  const timerRef = useRef();
  const isTouchActive = useRef(false);
  useScrollClose(close);
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(
      Component,
      {
        ...{
          ...rest,
          offsetX,
          offsetY,
          _platform: getPlatform(),
          width: "300px",
          position: newPosition || props.position,
          open: Boolean(selected),
          triggerRef
        }
      }
    ),
    /* @__PURE__ */ jsx(
      "div",
      {
        onMouseEnter: () => {
          if (!(window && "ontouchstart" in window)) {
            toggle();
          }
        },
        onMouseLeave: close,
        onTouchStart: () => {
          if (window && "ontouchstart" in window && Devices.isMobile()) {
            isTouchActive.current = true;
            timerRef.current = setTimeout(toggle, LONG_PRESS_DELAY);
          }
        },
        onTouchEnd: () => {
          if (Devices.isMobile()) {
            isTouchActive.current = false;
            if (selected) {
              setTimeout(close, SUSTAIN_TIME);
            } else {
              if (timerRef.current) {
                clearTimeout(timerRef.current);
              }
            }
          }
        },
        ref,
        style: { width: "fit-content" },
        children
      }
    )
  ] });
};

const Component$C = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$y;
  const { position = "right", open = false, onTextLayout = noop, onHover = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ position, open, onTextLayout, onHover, ...rest }, componentTag },
    "JDSTooltip",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const Tooltip = withLogic$z(Component$C);
Tooltip.displayName = "Tooltip";
Tooltip.slotName = "jds_tooltip";

const sdl$x = { "metadata": { "version": "1.0.0", "id": "tooltip-1.0.0", "name": "JDSTooltipInternal", "layerName": "jds_tooltip_internal", "description": "Tooltips are floating elements primarily used for accessibility as its function. It is used to display additional information about a user interface element or feature.", "usage": "The information included should be contextual, helpful, and nonessential while providing that extra ability to communicate and give clarity to a user.", "internal": true }, "hierarchy": { "root-container": ["start-tooltip", { "text-container": ["jds-text"] }, "end-tooltip"] }, "base": { "root-container": { "flex-direction": "{t_3}", "justify-content": "{t_4}", "align-items": "{t_5}", "overflow": "{tooltip_base_root-container-overflow}" }, "text-container": { "border-radius": "{t_7}", "border-width": "{t_8}", "background-color": "{t_9}", "padding-left": "{t_12}", "padding-right": "{t_13}", "padding-top": "{t_14}", "padding-bottom": "{t_15}", "min-height": "{t_40}", "align-items": "{t_41}" }, "start-tooltip": { "color": "{t_10}", "position": "right", "hidden": false }, "end-tooltip": { "color": "{t_11}", "position": "right", "hidden": true }, "jds-text": { "font-family": "{bodyS}", "color": "{primaryBackground}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" } }, "variant": { "position": { "right_start": { "root-container": { "align-items": "{t_16}" }, "start-tooltip": { "position": "right_start", "padding-top": "{t_17}", "hidden": false }, "end-tooltip": { "hidden": true } }, "right_end": { "root-container": { "align-items": "{t_18}" }, "start-tooltip": { "position": "right_end", "padding-bottom": "{t_19}", "hidden": false }, "end-tooltip": { "hidden": true } }, "left": { "start-tooltip": { "hidden": true }, "end-tooltip": { "position": "left", "hidden": false } }, "left_start": { "root-container": { "align-items": "{t_20}" }, "start-tooltip": { "hidden": true }, "end-tooltip": { "position": "left_start", "padding-top": "{t_21}", "hidden": false } }, "left_end": { "root-container": { "align-items": "{t_22}" }, "start-tooltip": { "hidden": true }, "end-tooltip": { "position": "left_end", "padding-bottom": "{t_23}", "hidden": false } }, "top": { "root-container": { "flex-direction": "{t_24}", "align-items": "{t_25}" }, "start-tooltip": { "hidden": true }, "end-tooltip": { "position": "top", "hidden": false } }, "top_start": { "root-container": { "flex-direction": "{t_26}", "align-items": "{t_27}" }, "start-tooltip": { "hidden": true }, "end-tooltip": { "position": "top_start", "padding-left": "{t_28}", "hidden": false } }, "top_end": { "root-container": { "flex-direction": "{t_29}", "align-items": "{t_30}" }, "start-tooltip": { "hidden": true }, "end-tooltip": { "position": "top_end", "padding-right": "{t_31}", "hidden": false } }, "bottom": { "root-container": { "flex-direction": "{t_32}", "align-items": "{t_33}" }, "start-tooltip": { "position": "bottom", "hidden": false }, "end-tooltip": { "hidden": true } }, "bottom_start": { "root-container": { "flex-direction": "{t_34}", "align-items": "{t_35}" }, "start-tooltip": { "padding-left": "{t_36}", "position": "bottom_start", "hidden": false }, "end-tooltip": { "hidden": true } }, "bottom_end": { "root-container": { "flex-direction": "{t_37}", "align-items": "{t_38}" }, "start-tooltip": { "position": "bottom_end", "padding-right": "{t_39}", "hidden": false }, "end-tooltip": { "hidden": true } } }, "_platform": { "desktop": { "jds-text": { "font-family": "{bodyXxs}", "font-size": "{bodyXxs}", "line-height": "{bodyXxs}", "letter-spacing": "{bodyXxs}", "font-weight": "{bodyXxs}" } } } }, "api": { "config": { "position": { "values": ["right", "right_start", "right_end", "bottom", "bottom_start", "bottom_end", "left", "left_start", "left_end", "top", "top_start", "top_end"], "doc-description": "It can be used to give certain position to the Tooltip." }, "_platform": { "values": ["mobile", "desktop"] } }, "data": { "root-container": { "elementRef": { "type": "ref", "name": "triggerRef" }, "max-width": { "type": "size", "name": "width" }, "spacing": { "type": "size", "name": "triggerSpacing", "function": true } }, "jds-text": { "value": { "type": "string", "name": "label", "doc_description": "It displays label of Tooltip." } } }, "events": { "root-container": { "onAppear": { "name": "onAppear", "platform": "ios" } }, "jds-text": { "onTextLayout": { "name": "onTextLayout", "platform": "android" } } }, "a11y": { "root-container": { "properties": { "role": { "value": "tooltip" }, "aria-label": { "name": "ariaLabel", "prop": "label" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" } } } } } };

const withLogic$y = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$B = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$x;
  const { position = "right", onAppear = noop, onTextLayout = noop, ariaLabel = props.label?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ position, onAppear, onTextLayout, ariaLabel, ...rest }, componentTag },
    "JDSTooltipInternal",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const TooltipInternal = withLogic$y(Component$B);
TooltipInternal.displayName = "TooltipInternal";
TooltipInternal.slotName = "jds_tooltip_internal";

const sdl$w = { "metadata": { "version": "1.0.0", "id": "stepper-vertical-step-item-1.0.0", "name": "JDSVerticalStepItem", "layerName": "jds_vertical_step_item", "internal": true }, "hierarchy": { "stepper-outer-container": [{ "step-dot-container": ["jds_stepper_dot", "label-jds-text"] }, { "step-indicator-container": ["end-jds_divider", { "content-container": [{ "content-child-container": ["content-slot"] }] }] }] }, "base": { "stepper-outer-container": { "flex-direction": "{v_0}", "justify-content": "{v_1}", "align-items": "{v_2}", "gap": "{v_3}", "size": "{v_4}" }, "end-container": { "hidden": false, "flex": 1, "opacity": "{v_5}" }, "content-child-container": { "flex-direction": "{v_6}", "justify-content": "{v_7}", "align-items": "{v_8}", "hidden": false }, "end-jds_divider": { "pad": "none", "withLabel": false, "orientation": "vertical" }, "step-indicator-container": { "height": "{v_9}", "flex-direction": "{v_10}", "justify-content": "{v_11}", "align-items": "{v_12}", "padding-left": 15, "min-height": "{v_13}" }, "step-dot-container": { "flex-direction": "{v_15}", "justify-content": "{v_16}", "align-items": "{v_17}", "gap": "{v_18}" }, "content-container": { "padding-top": "{v_19}", "padding-left": 31, "padding-bottom": "{v_20}", "enter-animation-name": "slideVerticallyDown", "exit-animation-name": "slideVerticallyUp", "enter-animation-curve": "entrance_ease", "exit-animation-curve": "exit_ease", "enter-animation-duration": 500, "exit-animation-duration": 500, "hidden": true, "overflow": "hidden", "transition": { "property": ["max-height", "padding-top", "padding-bottom"], "duration": "{medium}", "timing-function": "{easeExit}" } }, "label-jds-text": { "font-family": "{headingXxs}", "color": "{primaryGrey100}", "font-size": "{headingXxs}", "line-height": "{headingXxs}", "letter-spacing": "{headingXxs}", "font-weight": "{headingXxs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "language": "en", "padding-top": 0 } }, "variant": { "_hideChild": { "true": { "content-container": { "hidden": false, "padding-top": "{verticalstepitem_variant__hideChild_true_content-container_padding-top}", "padding-bottom": "{verticalstepitem_variant__hideChild_true_content-container_padding-bottom}", "transition": { "timing-function": "{easeEntrance}" } } } }, "state": { "complete": { "end-jds_divider": { "variant": "stepper" } }, "disabled": { "stepper-outer-container": { "disabled": true }, "jds_stepper_dot": { "state": "disabled" } } }, "direction": { "start": { "end-jds_divider": { "opacity": "{v_24}" } } } }, "api": { "children": { "content-slot": { "name": "content", "accepts": ["template"], "max": 1 } }, "config": { "state": { "type": "JDSStepperDot.state", "values": ["inactive", "active", "complete", "disabled"] }, "direction": { "values": ["both", "start", "end"] }, "_hideChild": { "values": [true, false] } }, "data": { "jds_stepper_dot": { "index": { "type": "string", "name": "index" }, "icon": { "type": "icon", "name": "icon" }, "state": { "type": "JDSStepperDot.state", "name": "state" }, "itemsType": { "type": "JDSStepperDot.itemsType", "name": "itemsType" }, "activeState": { "type": "JDSStepperDot.activeState", "name": "activeState" } }, "content-container": { "max-height": { "name": "_contentHeight", "type": "size" } }, "label-jds-text": { "value": { "name": "label", "type": "string" } } }, "a11y": { "stepper-outer-container": { "properties": { "role": { "value": "listitem" }, "aria-label": { "name": "ariaLabel", "prop": "label" }, "aria-current": { "name": "ariaCurrent" } } } } } };

const withLogic$x = (Component) => (props) => {
  const active = props.state === "active";
  const { element, rootRef } = useRootRef();
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        rootRef,
        _hideChild: active,
        _contentHeight: active ? element?.querySelector(
          'div[data-testid="JDSVerticalStepItem-content-container"]'
        )?.scrollHeight : 0
      }
    }
  );
};

const Component$A = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$w;
  const { state = "undefined", direction = "both", ariaLabel = props.label?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ state, direction, ariaLabel, ...rest }, componentTag },
    "JDSVerticalStepItem",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const VerticalStepItem = withLogic$x(Component$A);
VerticalStepItem.displayName = "VerticalStepItem";
VerticalStepItem.slotName = "jds_vertical_step_item";

const v1Map = {
  jds_text: () => Text,
  jds_tag: () => Tag,
  jds_icon: () => Icon,
  jds_skeleton: () => Skeleton,
  jds_badge: () => Badge,
  jds_toast: () => Toast,
  jds_nudge: () => Nudge,
  jds_fab: () => FAB,
  jds_fab_internal: () => FABInternal,
  jds_selector_item: () => SelectorItem,
  jds_table_cell: () => TableCell,
  jds_table_row: () => TableRow,
  jds_table_body: () => TableBody,
  jds_selector_button: () => SelectorButton,
  jds_menu_block_item: () => MenuBlockItem,
  jds_notification_button: () => NotificationButton,
  jds_action_button: () => ActionButton,
  jds_tab_item: () => TabItem,
  jds_feedback_block: () => FeedbackBlock,
  jds_link: () => Link,
  jds_bottom_footer_link_item: () => BottomFooterLinkItem,
  jds_bottom_sheet: () => BottomSheet,
  jds_desktop_bottom_sheet_internal: () => DesktopBottomSheetInternal,
  jds_mobile_bottom_sheet_internal: () => MobileBottomSheetInternal,
  jds_divider: () => Divider,
  jds_image: () => Image,
  jds_footer_links: () => FooterLinks,
  jds_footer_icon_links: () => FooterIconLinks,
  jds_footer_market_links: () => FooterMarketLinks,
  jds_footer_links_grid: () => FooterLinksGrid,
  jds_bottom_footer: () => BottomFooter,
  jds_content_block: () => ContentBlock,
  jds_search_result_item: () => SearchResultItem,
  jds_search_results_internal: () => SearchResultsInternal,
  jds_avatar: () => Avatar,
  jds_segmented_ring_item: () => SegmentedRingItem,
  jds_avatar_v2: () => AvatarV2,
  jds_avatar_v2_segmented_ring: () => AvatarV2SegmentedRing,
  jds_avatar_v2_progress_ring: () => AvatarV2ProgressRing,
  jds_avatar_v2_complete_ring: () => AvatarV2CompleteRing,
  jds_avatar_v2_default: () => AvatarV2Default,
  jds_avatar_v2_information: () => AvatarV2Information,
  jds_avatar_v2_status: () => AvatarV2Status,
  jds_avatar_v2_notification: () => AvatarV2Notification,
  jds_button: () => Button,
  jds_accordion: () => AccordionPanel,
  jds_mega_menu_item: () => MegaMenuItem,
  jds_mega_menu_block: () => MegaMenuBlock,
  jds_search_box: () => SearchBox,
  jds_modal_desktop_internal: () => ModalDesktopInternal,
  jds_modal_mobile_internal: () => ModalMobileInternal,
  jds_modal_desktop: () => Modal,
  jds_side_panel_item: () => SidePanelItem,
  jds_side_panel_internal: () => SidePanelInternal,
  jds_header: () => Header,
  jds_mega_menu: () => MegaMenu,
  jds_bottom_navigation_item: () => BottomNavigationItem,
  jds_bottom_navigation2: () => BottomNavigation2,
  jds_carousel_pagination_item: () => CarouselPaginationItem,
  jds_carousel_pagination: () => CarouselPagination,
  jds_carousel_slide: () => CarouselSlide,
  jds_datepicker_button: () => DatepickerButton,
  jds_datepicker_calendar_button: () => DatepickerCalendarButton,
  jds_datepicker_view_button: () => DatepickerViewButton,
  jds_datepicker_calendar_row: () => DatepickerCalendarRow,
  jds_datepicker_calendar: () => DatepickerCalendar,
  jds_datepicker_year_view: () => DatepickerYearView,
  jds_datepicker_calendar_header: () => DatepickerCalendarHeader,
  jds_datepicker_header: () => DatepickerHeader,
  jds_datepicker_month_view: () => DatepickerMonthView,
  jds_dropdown_menu_item: () => DropdownMenuItem,
  jds_dropdown_menu_group: () => DropdownMenuGroup,
  jds_dropdown_menu: () => DropdownMenu,
  jds_dropdown_menu_submenu: () => DropdownMenuSubMenu,
  jds_dropdown_menu_sub_menu_internal: () => DropdownMenuSubMenuInternal,
  jds_dropdown_menu_internal: () => DropdownMenuInternal,
  jds_pagination_button: () => PaginationButton,
  jds_datepicker: () => DatePicker,
  jds_datepicker_desktop_internal: () => DatepickerDesktopInternal,
  jds_datepicker_mobile_internal: () => DatepickerDesktopInternal,
  jds_menu_block: () => MenuBlock,
  jds_menu_block_internal: () => MenuBlockInternal,
  jds_list_block: () => ListBlock,
  jds_input: () => Input,
  jds_input_code_item: () => InputCodeItem,
  jds_tab_bar: () => TabBar,
  jds_search_results: () => SearchResults,
  jds_search_result_text: () => SearchResultText,
  jds_stepper_dot: () => StepperDot,
  jds_step_item_vertical: () => VerticalStepItem,
  jds_step_item_horizontal: () => HorizontalStepItem,
  jds_spinner: () => Spinner,
  jds_tooltip: () => Tooltip,
  jds_tooltip_internal: () => TooltipInternal,
  jds_checkbox: () => InputCheckbox,
  swadesh_checkbox: () => InputCheckbox,
  swadesh_text: () => Text,
  jds_rating_bar_item: () => RatingBarItem,
  jds_file_uploader_control: () => FileUploaderControl,
  jds_file_uploader_panel: () => FileUploaderPanel,
  jds_file_uploader_item: () => FileUploaderItem,
  jds_file_uploader_list: () => FileUploaderList,
  jds_progress_bar: () => ProgressBar,
  jds_input_phone_dropdown: () => InputPhoneDropdown,
  jds_badge_v2: () => BadgeV2,
  jds_badge_v2_status: () => BadgeV2Status,
  jds_badge_v2_information: () => BadgeV2Information,
  jds_badge_v2_notification: () => BadgeV2Notification,
  jds_badge_v2_brand: () => BadgeV2Brand,
  jds_tabs_desktop: () => Tabs,
  jds_megamenu_internal: () => MegaMenuInternal
};
const componentsMap = {
  ...v1Map
};

const Component$z = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$2c;
  const { size = "medium", color = "primary_50", kind = "default", onClick = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ size, color, kind, onClick, ...rest }, componentTag },
    "JDSIcon",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const Icon = withLogic$2e(Component$z);
Icon.displayName = "Icon";
Icon.slotName = "jds_icon";

const _NotificationService = class {
  constructor(args) {
    _NotificationService.args = args;
  }
};
let NotificationService = _NotificationService;
NotificationService.eventName = "notification";
const _NotificationCloseService = class {
  constructor(args) {
    _NotificationCloseService.args = args;
  }
};
let NotificationCloseService = _NotificationCloseService;
NotificationCloseService.eventName = "close-notifications";
const _NotificationController = class {
  static updateNotifications(type) {
    if (type === "nudge") {
      publish(
        new NotificationService({
          type,
          notifications: [..._NotificationController.nudges]
        })
      );
      return;
    }
    publish(
      new NotificationService({
        type,
        notifications: [..._NotificationController.toasts]
      })
    );
  }
  static createID(type) {
    const id = (/* @__PURE__ */ new Date()).getTime() + Math.random().toString();
    return this.getNotificationIndex(type, id) < 0 ? id : this.createID(type);
  }
  static getNotificationIndex(type, id) {
    if (type === "nudge")
      return _NotificationController.nudges.findIndex((item) => item.id === id);
    return _NotificationController.toasts.findIndex((item) => item.id === id);
  }
  static getNotification(id, type) {
    const index = _NotificationController.getNotificationIndex(type, id);
    if (this.isActive(id, type) && index >= 0) {
      if (type === "nudge")
        return _NotificationController.nudges[index];
      return _NotificationController.toasts[index];
    }
  }
  static nudge(props) {
    if (!props.title) {
      console.warn(
        "Notification: [Nudge] cannot be created as title was not provided"
      );
      return "";
    }
    const index = this.getNotificationIndex("nudge", props.id);
    let ID = props.id;
    if (index < 0) {
      ID = props.id || this.createID("nudge");
      if (!_NotificationController.isActive(ID, "nudge")) {
        const nudgeItem = { showClose: true, ...props, id: ID };
        _NotificationController.nudges.push(nudgeItem);
        this.updateNotifications("nudge");
      }
      return ID;
    }
    return ID;
  }
  static toast(props) {
    if (!props.title) {
      console.warn(
        "Notification: [Toast] cannot be created as title was not provided"
      );
      return "";
    }
    const index = this.getNotificationIndex("toast", props.id);
    let ID = props.id;
    if (index < 0) {
      ID = props.id || this.createID("toast");
      if (!_NotificationController.isActive(ID, "toast")) {
        const toastItem = { showClose: true, ...props, id: ID };
        _NotificationController.toasts.push(toastItem);
        this.updateNotifications("toast");
      }
      return ID;
    }
    return ID;
  }
  static dismiss(id, type) {
    if (this.isActive(id, type)) {
      publish(new NotificationCloseService({ [id]: type }));
      setTimeout(() => {
        if (type === "nudge") {
          const newNudgeList = _NotificationController.nudges.filter(
            (item) => item.id !== id
          );
          _NotificationController.nudges = newNudgeList;
        } else {
          const newToastList = _NotificationController.toasts.filter(
            (item) => item.id !== id
          );
          _NotificationController.toasts = newToastList;
        }
        this.updateNotifications(type);
      }, 500);
    }
    return id;
  }
  static update(id, type, props) {
    const notificationIndex = this.getNotificationIndex(type, id);
    if (notificationIndex >= 0) {
      if (this.isActive(id, type)) {
        if (type === "nudge") {
          const currentNudge = _NotificationController.nudges.findIndex(
            (nudge2) => nudge2.id === id
          );
          const updatedNudgeItem = {
            ..._NotificationController.nudges[currentNudge],
            ...props
          };
          _NotificationController.nudges[currentNudge] = updatedNudgeItem;
        } else {
          const currentToast = _NotificationController.toasts.findIndex(
            (toast2) => toast2.id === id
          );
          const updatedToastItem = {
            ..._NotificationController.toasts[currentToast],
            ...props
          };
          _NotificationController.toasts[currentToast] = updatedToastItem;
        }
        this.updateNotifications(type);
      }
    }
  }
  static isActive(id, type) {
    const exists = type === "nudge" ? _NotificationController.nudges.findIndex(
      (nudgeItem) => nudgeItem.id === id
    ) >= 0 : _NotificationController.toasts.findIndex(
      (toastItem) => toastItem.id === id
    ) >= 0;
    return exists;
  }
  static dismissAll(type) {
    const activeIds = {};
    _NotificationController.nudges.forEach((noti) => {
      if (noti.id)
        activeIds[noti.id] = "nudge";
    });
    _NotificationController.toasts.forEach((noti) => {
      if (noti.id)
        activeIds[noti.id] = "toast";
    });
    publish(new NotificationCloseService(activeIds));
    setTimeout(() => {
      if (type === "nudge") {
        _NotificationController.nudges = [];
      } else {
        _NotificationController.toasts = [];
      }
      this.updateNotifications(type);
    }, 500);
  }
};
let NotificationController = _NotificationController;
NotificationController.nudges = [];
NotificationController.toasts = [];
const createProps = (props) => typeof props === "string" ? { title: props } : props;
const nudge = (props) => NotificationController.nudge(createProps(props));
nudge.update = (id, props) => NotificationController.update(id, "nudge", createProps(props));
nudge.dismiss = (id) => NotificationController.dismiss(id, "nudge");
nudge.dismissAll = () => NotificationController.dismissAll("nudge");
nudge.isActive = (id) => NotificationController.isActive(id, "nudge");
nudge.get = (id) => NotificationController.getNotification(id, "nudge");
const toast = (props) => NotificationController.toast(createProps(props));
toast.update = (id, props) => NotificationController.update(id, "toast", createProps(props));
toast.dismissAll = () => NotificationController.dismissAll("toast");
toast.dismiss = (id) => NotificationController.dismiss(id, "toast");
toast.info = (props) => NotificationController.toast({
  ...createProps(props),
  icon: /* @__PURE__ */ jsx(Icon, { ic: /* @__PURE__ */ jsx(IcInfo, {}), size: "l" })
});
toast.error = (props) => NotificationController.toast({
  ...createProps(props),
  icon: /* @__PURE__ */ jsx(Icon, { ic: /* @__PURE__ */ jsx(IcErrorColored, {}), size: "l" })
});
toast.success = (props) => NotificationController.toast({
  ...createProps(props),
  icon: /* @__PURE__ */ jsx(Icon, { ic: /* @__PURE__ */ jsx(IcSuccessColored, {}), size: "l" })
});
toast.warning = (props) => NotificationController.toast({
  ...createProps(props),
  icon: /* @__PURE__ */ jsx(Icon, { ic: /* @__PURE__ */ jsx(IcWarningColored, {}), size: "l" })
});
toast.isActive = (id) => NotificationController.isActive(id, "toast");
toast.get = (id) => NotificationController.getNotification(id, "toast");

const sdl$v = { "metadata": { "version": "1.0.0", "id": "notification-banner-1.0.0", "name": "JDSNotificationBanner", "layerName": "jds_notification_banner" }, "hierarchy": { "root-container": [{ "main-container": [{ "jds-icon-container": ["jds-icon"] }, { "text-container": ["heading-jds-text", "support-jds-text"] }, { "button-container": ["cta-jds_button", "close-jds_button"] }] }, { "bottom-container": ["bottom-cta-jds_button"] }] }, "base": { "root-container": { "hidden": false, "min-height": "{n_0}", "width": "{n_1}", "flex-direction": "{n_2}", "justify-content": "{n_3}", "align-items": "{n_4}", "padding-top": "{n_5}", "padding-right": "{n_6}", "padding-bottom": "{n_7}", "padding-left": "{n_8}", "gap": "{n_9}", "border-radius": "{n_10}", "background-color": "{n_11}", "enter-animation-name": "slideVerticallyDown", "exit-animation-name": "slideVerticallyUp", "enter-animation-curve": "entrance_ease", "exit-animation-curve": "exit_ease", "enter-animation-duration": 500, "exit-animation-duration": 500, "translate-y": 0, "transition": { "property": ["translate-y"], "duration": "{medium}", "timing-function": "{easeJoyfulEntrance}" } }, "main-container": { "flex-direction": "{n_12}", "justify-content": "{n_13}", "align-items": "{n_14}", "width": "{n_15}", "gap": "{n_16}" }, "text-container": { "flex": 1, "justify-content": "{n_17}", "align-items": "{n_18}", "flex-direction": "{n_19}", "gap": "{n_20}" }, "button-container": { "flex-direction": "{n_21}", "gap": "{n_22}" }, "cta-jds_button": { "hidden": false, "size": "small", "kind": "secondary" }, "close-jds_button": { "size": "small", "kind": "tertiary", "icon": "ic_close" }, "bottom-container": { "hidden": true, "flex-direction": "{n_24}", "justify-content": "{n_25}", "align-items": "{n_26}", "width": "{n_23}" }, "bottom-cta-jds_button": { "size": "small", "kind": "secondary" }, "jds-icon": { "size": "{l}", "color": "{primary50}" }, "jds-icon-container": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{l}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}" }, "heading-jds-text": { "font-family": "{bodySBold}", "color": "{primaryGrey100}", "font-size": "{bodySBold}", "line-height": "{bodySBold}", "letter-spacing": "{bodySBold}", "font-weight": "{bodySBold}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "max-lines": 1, "maxLines": 1 }, "support-jds-text": { "font-family": "{bodyXs}", "color": "{primaryGrey80}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "max-lines": 4, "maxLines": 4 } }, "variant": { "ctaPosition": { "bottom": { "cta-jds_button": { "hidden": true }, "bottom-container": { "hidden": false } } }, "open": { "false": { "root-container": { "hidden": true, "translate-y": "{size.negativeMax}", "transition": { "timing-function": "{easeJoyfulExit}" } } } }, "_showClose": { "false": { "close-jds_button": { "hidden": true } } }, "_hasDescription": { "false": { "main-container": { "align-items": "{n_27}" }, "support-jds-text": { "hidden": true } } } }, "combination": [{ "true": { "desktop": { "root-container": { "padding-left": "{n_28}", "padding-right": "{n_29}", "border-radius": 0 } }, "mobile": { "root-container": { "padding-left": "{n_30}", "padding-right": "{n_31}", "border-radius": 0 } }, "tablet": { "root-container": { "padding-left": "{n_32}", "padding-right": "{n_33}", "border-radius": 0 } } } }], "combination_config": [["global", "_platform"]], "api": { "config": { "global": { "values": [false, true] }, "open": { "values": [true, false] }, "closeOnSuffixClick": { "values": [true, false] }, "ctaPosition": { "values": ["inline", "bottom"] }, "_showClose": { "values": [true, false] }, "_platform": { "values": ["desktop", "tablet", "mobile"] }, "_hasDescription": { "values": [true, false] } }, "data": { "cta-jds_button": { "label": { "type": "string", "name": "cta" } }, "close-jds_button": { "icon": { "type": "icon", "name": "suffix" } }, "bottom-cta-jds_button": { "label": { "type": "string", "name": "cta" } }, "jds-icon": { "value": { "type": "icon", "name": "prefix" }, "ic": { "type": "icon", "name": "prefix" } }, "heading-jds-text": { "value": { "type": "string", "name": "title" } }, "support-jds-text": { "value": { "type": "string", "name": "description" } } }, "events": { "cta-jds_button": { "onClick": "onCTAClick" }, "bottom-cta-jds_button": { "onClick": "onCTAClick" }, "close-jds_button": { "onClick": "onSuffixClick" } }, "a11y": { "root-container": { "properties": { "role": { "value": "banner" }, "aria-label": { "name": "ariaLabel", "prop": "title" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" } } }, "cta-jds_button": { "properties": { "ariaLabel": "ctaAriaLabel", "ariaDescribedby": { "name": "ctaAriaDescribedby", "platform": "web,ios" } } }, "close-jds_button": { "properties": { "ariaLabel": { "name": "closeButtonAriaLabel", "value": "Close Button" }, "ariaDescribedby": { "name": "closeButtonAriaDescribedby", "platform": "web,ios" } } }, "bottom-cta-jds_button": { "properties": { "ariaLabel": "ctaAriaLabel", "ariaDescribedby": { "name": "ctaAriaDescribedby", "platform": "web,ios" } } } } } };

const PROP_MAP$7 = (props) => {
  if (typeof props.description === "object") {
    console.warn("Passing Listblock props is deprecated. Please pass a string");
  }
  return {
    cta: {
      properties: {
        cta: resolvePropObjectKeys(props.cta, "title", ""),
        onCTAClick: props.cta?.onClick ?? props.onCTAClick
      }
    }
  };
};
const withLogic$w = (Component) => (userProps) => {
  const props = modifyProps(userProps, PROP_MAP$7);
  const [open, setOpen] = useState(props.open);
  const [internalOpen, setInternalOpen] = useState(props.open);
  useEffect(() => {
    if (props.open) {
      setOpen(true);
      setTimeout(() => {
        setInternalOpen(true);
      }, 10);
    } else {
      setOpen(false);
      setTimeout(() => setInternalOpen(false), 500);
    }
  }, [props.open]);
  const getPlatform = () => {
    if (Devices.isMobile()) {
      return "mobile";
    }
    if (Devices.isTablet())
      return "tablet";
    return "desktop";
  };
  const expandedClass = internalOpen && open ? "expanded" : "";
  const classes = [expandedClass];
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        open: open || internalOpen,
        _showClose: !(props.suffix === null),
        _platform: getPlatform(),
        className: classes.join(" "),
        suffix: ["", void 0].includes(props.suffix) ? "IcClose" : props.suffix,
        onSuffixClick: (ev) => {
          if (props.closeOnSuffixClick) {
            setOpen(false);
            setTimeout(() => {
              setInternalOpen(false);
            }, 500);
          }
          props.onSuffixClick?.(ev);
        }
      }
    }
  );
};

const Component$y = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$v;
  const { global = false, open = true, closeOnSuffixClick = true, ctaPosition = "inline", onCTAClick = noop, onSuffixClick = noop, ariaLabel = props.title?.toString(), closeButtonAriaLabel = "Close Button", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ global, open, closeOnSuffixClick, ctaPosition, onCTAClick, onSuffixClick, ariaLabel, closeButtonAriaLabel, ...rest }, componentTag },
    "JDSNotificationBanner",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const NotificationBanner = withLogic$w(Component$y);
NotificationBanner.displayName = "NotificationBanner";
NotificationBanner.slotName = "jds_notification_banner";

const sdl$u = { "metadata": { "version": "1.0.0", "id": "nudge-1.0.0", "name": "JDSNudgeContainer", "layerName": "jds_nudge_container" }, "hierarchy": { "popup": [{ "popup-container": [{ "root-container": ["jds_nudge"] }] }] }, "base": { "popup": { "priority": 70, "passive": true }, "popup-container": { "flex-direction": "{n_0}", "size": "{n_1}", "padding-top": "{n_2}", "padding-right": "{n_3}", "padding-bottom": "{n_4}", "padding-left": "{n_5}" }, "root-container": { "flex-direction": "{n_6}", "justify-content": "{n_7}", "align-items": "{n_8}", "size": "{n_9}", "gap": "{n_10}" } }, "variant": {}, "combination": [{}], "combination_config": [[]], "api": { "data": { "root-container": { "value": { "type": "list", "name": "activeNudges", "object": { "title": "string", "description": "string", "primaryCTA": "string", "secondaryCTA": "string", "showClose": "boolean", "id": "string", "prefix": "string" } } }, "jds_nudge": { "prefix": { "type": "string", "name": "activeNudges.prefix" }, "title": { "type": "string", "name": "activeNudges.title" }, "description": { "type": "string", "name": "activeNudges.description" }, "primaryCTA": { "type": "string", "name": "activeNudges.primaryCTA" }, "secondaryCTA": { "type": "string", "name": "activeNudges.secondaryCTA" }, "showClose": { "type": "string", "name": "activeNudges.showClose" }, "id": { "type": "string", "name": "activeNudges.id" }, "suffix": { "type": "slot", "name": "activeNudges.suffix" }, "maxLines": { "type": "number", "name": "activeNudges.maxLines" } } }, "events": { "jds_nudge": { "onClose": "onClose", "onPrimaryClick": "onPrimaryClick", "onSecondaryClick": "onSecondaryClick", "onShow": "onShow" } }, "a11y": { "jds_nudge": { "properties": { "ariaLabel": "ariaLabel" } } } } };

const withLogic$v = (Component) => (props) => {
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        activeNudges: props.nudges.map((n) => ({
          ...n,
          prefix: n.prefix || n.icon
        }))
      }
    }
  );
};

const Component$x = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$u;
  const { onClose = noop, onPrimaryClick = noop, onSecondaryClick = noop, onShow = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ onClose, onPrimaryClick, onSecondaryClick, onShow, ...rest }, componentTag },
    "JDSNudgeContainer",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const NudgeContainer = withLogic$v(Component$x);
NudgeContainer.displayName = "NudgeContainer";
NudgeContainer.slotName = "jds_nudge_container";

const sdl$t = { "metadata": { "version": "1.0.0", "id": "toast-1.0.0", "name": "JDSToastContainer", "layerName": "jds_toast_container" }, "hierarchy": { "popup": [{ "popup-container": [{ "root-container": ["jds_toast"] }] }] }, "base": { "popup": { "priority": 70, "passive": true }, "popup-container": { "flex-direction": "{t_0}", "size": "{t_1}", "padding-top": "{t_2}", "padding-right": "{t_3}", "padding-bottom": "{t_4}", "padding-left": "{t_5}" }, "root-container": { "flex-direction": "{t_6}", "justify-content": "{t_7}", "align-items": "{t_8}", "size": "{t_9}", "gap": "{t_10}" } }, "variant": {}, "combination": [{}], "combination_config": [[]], "api": { "data": { "root-container": { "value": { "type": "list", "name": "activeToasts", "object": { "title": "string", "description": "string", "primaryCTA": "string", "secondaryCTA": "string", "showClose": "boolean", "dismissAfter": "number", "id": "string", "prefix": "string" } } }, "jds_toast": { "prefix": { "type": "string", "name": "activeToasts.prefix" }, "title": { "type": "string", "name": "activeToasts.title" }, "description": { "type": "string", "name": "activeToasts.description" }, "primaryCTA": { "type": "string", "name": "activeToasts.primaryCTA" }, "secondaryCTA": { "type": "string", "name": "activeToasts.secondaryCTA" }, "showClose": { "type": "string", "name": "activeToasts.showClose" }, "id": { "type": "string", "name": "activeToasts.id" }, "dismissAfter": { "type": "number", "name": "activeToasts.dismissAfter" }, "suffix": { "type": "slot", "name": "activeToasts.suffix" } } }, "events": { "jds_toast": { "onClose": "onClose", "onPrimaryClick": "onPrimaryClick", "onSecondaryClick": "onSecondaryClick", "onShow": "onShow" } }, "a11y": { "jds_toast": { "properties": { "ariaLabel": "ariaLabel" } } } } };

const withLogic$u = (Component) => (props) => {
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        activeToasts: props.toasts.map((t) => ({
          ...t,
          prefix: t.prefix || t.icon
        }))
      }
    }
  );
};

const Component$w = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$t;
  const { onClose = noop, onPrimaryClick = noop, onSecondaryClick = noop, onShow = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ onClose, onPrimaryClick, onSecondaryClick, onShow, ...rest }, componentTag },
    "JDSToastContainer",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const ToastContainer = withLogic$u(Component$w);
ToastContainer.displayName = "ToastContainer";
ToastContainer.slotName = "jds_toast_container";

const NotificationContainer = (props) => {
  const { className, onShow, onClose, ...rest } = props;
  const classes = [className, "j-notificationContainer"].join(" ");
  const notificationContRef = useRef(null);
  const [nudges, setNudges] = useState([]);
  const [toasts, setToasts] = useState([]);
  const maxOnScreen = Devices.isMobile() ? 1 : 5;
  useEffect(() => {
    const { unsubscribe: nudgeUnsubscribe } = subscribe(
      NotificationService,
      (data) => {
        if (data.type === "nudge")
          setNudges(data.notifications);
      }
    );
    const { unsubscribe: toastUnsubscribe } = subscribe(
      NotificationService,
      (data) => {
        if (data.type === "toast")
          setToasts(data.notifications);
      }
    );
    return () => {
      nudge.dismissAll();
      nudgeUnsubscribe();
      toast.dismissAll();
      toastUnsubscribe();
    };
  }, []);
  return /* @__PURE__ */ jsxs("div", { className: classes, ...rest, ref: notificationContRef, children: [
    /* @__PURE__ */ jsx(
      NudgeContainer,
      {
        onShow,
        onClose,
        nudges: nudges.slice(0, maxOnScreen).reverse()
      }
    ),
    /* @__PURE__ */ jsx(
      ToastContainer,
      {
        onShow,
        onClose,
        toasts: toasts.slice(0, maxOnScreen).reverse()
      }
    )
  ] });
};
NotificationContainer.displayName = "NotificationContainer";
NotificationContainer.defaultProps = {};

const sdl$s = { "metadata": { "version": "1.0.0", "id": "accordion-list-1.0.0", "name": "JDSAccordionList", "layerName": "jds_accordion_list" }, "hierarchy": { "root-container": [{ "container": ["jds_accordion"] }, "content-slot"] }, "base": { "root-container": { "flex-direction": "{a_0}", "width": "{a_1}" }, "container": { "hidden": true, "flex-direction": "{a_2}", "width": "{a_3}" }, "content-slot": { "hidden": false } }, "variant": { "_hasItems": { "true": { "content-slot": { "hidden": true }, "container": { "hidden": false } } } }, "api": { "data": { "container": { "value": { "type": "list", "name": "items", "function": true, "object": { "children": "slot", "prefix": "slot", "expandedPanel": "boolean", "showDivider": "boolean", "disabled": "boolean", "title": "string", "subtitle": "string", "onClick": "event" } } }, "jds_accordion": { "iconType": { "type": "JDSAccordion.iconType", "name": "iconType" }, "children": { "type": "slot", "name": "items.children" }, "prefix": { "type": "slot", "name": "items.prefix" }, "expandedPanel": { "type": "boolean", "name": "items.expandedPanel" }, "disabled": { "type": "boolean", "name": "items.disabled" }, "title": { "type": "string", "name": "items.title" }, "showDivider": { "type": "boolean", "name": "items.showDivider" }, "subtitle": { "type": "string", "name": "items.subtitle" }, "onClick": { "type": "event", "name": "items.onClick" } } }, "config": { "iconType": { "type": "JDSAccordion.iconType", "values": ["chevron", "plus"] }, "allowMultiple": { "values": [false, true] }, "_hasItems": { "values": [false, true] } }, "children": { "content-slot": { "name": "children", "accepts": ["jds_accordion"] } }, "a11y": { "container": { "name": "items", "repeating": { "ariaLabel": "ariaLabel", "ariaDescribedby": "ariaDescribedby" } }, "jds_accordion": { "properties": { "ariaLabel": "items.ariaLabel", "ariaDescribedby": "items.ariaDescribedby" } } } } };

const getAllowedPanels = (panels, allowMultiple) => {
  if (!panels)
    return [];
  if (allowMultiple) {
    return panels;
  }
  return [panels[0]];
};
const withLogic$t = (Component) => (props) => {
  const { allowMultiple, children, onChange, iconType } = props;
  const [selected, setSelected] = useState(
    getAllowedPanels(props.expanded, allowMultiple)
  );
  useEffect(() => {
    setSelected(getAllowedPanels(props.expanded, allowMultiple));
  }, [props.expanded, allowMultiple]);
  const childrenArray = useMemo(() => {
    if (!children)
      return [];
    if (Array.isArray(children))
      return children;
    if (children.type === Symbol.for("react.fragment")) {
      const validChild = children.props.children;
      return Array.isArray(validChild) ? validChild : [validChild];
    }
    return [children];
  }, [children]);
  const handleSelected = useCallback(
    (i) => {
      let newSelected = [...selected];
      if (selected.includes(i)) {
        const idx = newSelected.findIndex((s) => s === i);
        if (allowMultiple) {
          if (idx >= 0)
            newSelected.splice(idx, 1);
        } else {
          newSelected = [];
        }
      } else {
        if (!allowMultiple) {
          newSelected = [i];
        } else {
          newSelected.push(i);
        }
      }
      setSelected(newSelected);
      onChange?.(newSelected);
    },
    [selected, allowMultiple, onChange]
  );
  const expandedChildren = useMemo(
    () => childrenArray?.map((c, i) => {
      return cloneElement(c, {
        ...c.props,
        iconType: iconType || c.props.iconType,
        onClick: (e) => {
          handleSelected(i);
          c.props.onClick?.(e);
        },
        expandedPanel: c?.props?.expandedPanel || selected.includes(i),
        disabled: Boolean(c.props?.disabled)
      });
    }),
    [childrenArray, handleSelected, iconType, selected]
  );
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        _hasItems: Boolean(props.items?.length),
        items: props?.items?.map((item, i) => {
          return {
            ...item,
            key: item?.title ?? "" + i,
            iconType,
            onClick: (e) => {
              handleSelected(i);
              item.onClick?.(e);
            },
            expandedPanel: item?.expandedPanel || selected.includes(i),
            disabled: Boolean(item?.disabled)
          };
        })
      },
      children: expandedChildren
    }
  );
};

const Component$v = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$s;
  const { iconType = "undefined", allowMultiple = false, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ iconType, allowMultiple, ...rest }, componentTag },
    "JDSAccordionList",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const Accordion = withLogic$t(Component$v);
Accordion.displayName = "Accordion";
Accordion.slotName = "jds_accordion_list";

const sdl$r = { "metadata": { "version": "1.0.0", "id": "base-icon-1.0.0", "name": "JDSBaseIcon", "layerName": "jds_base_icon" }, "hierarchy": { "icon": [] }, "base": { "icon": { "size": "{b_0}", "color": "{b_1}" } }, "variant": { "color": { "primary_30": { "icon": { "color": "{b_2}" } }, "primary_60": { "icon": { "color": "{b_3}" } }, "primary_70": { "icon": { "color": "{b_4}" } }, "primary_background": { "icon": { "color": "{b_5}" } }, "secondary_50": { "icon": { "color": "{b_6}" } }, "sparkle_50": { "icon": { "color": "{b_7}" } }, "primary_grey_60": { "icon": { "color": "{b_8}" } }, "primary_grey_80": { "icon": { "color": "{b_9}" } }, "primary_grey_100": { "icon": { "color": "{b_10}" } }, "feedback_success": { "icon": { "color": "{b_11}", "value": "ic_success_colored" } }, "feedback_error": { "icon": { "color": "{b_12}", "value": "ic_error_colored" } }, "feedback_warning": { "icon": { "color": "{b_13}", "value": "ic_warning_colored" } }, "feedback_success_50": { "icon": { "color": "{b_11}" } }, "feedback_error_50": { "icon": { "color": "{b_12}" } }, "feedback_warning_50": { "icon": { "color": "{b_13}" } }, "white": { "icon": { "color": "{b_14}" } }, "none": { "icon": { "color": "{b_15}" } } } }, "api": { "config": { "color": { "values": ["primary_50", "primary_30", "primary_60", "primary_70", "primary_background", "secondary_50", "sparkle_50", "primary_grey_60", "primary_grey_80", "primary_grey_100", "feedback_success", "feedback_error", "feedback_warning", "feedback_success_50", "feedback_error_50", "feedback_warning_50", "white", "none"] } }, "data": { "icon": { "size": { "type": "size", "default": 16, "name": "size", "function": true, "doc_description": "It can take the integer size user wants to pass." }, "value": { "type": "icon", "name": "ic", "function": true, "doc_description": "It can take the icon user wants to pass or the name of icon. e.g. `ic='IcFavorite'`. User can also pass any custom icon he may have stored locally." } } } } };

const withLogic$s = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$u = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$r;
  const { color = "primary_50", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ color, ...rest }, componentTag },
    "JDSBaseIcon",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const BaseIcon = withLogic$s(Component$u);
BaseIcon.displayName = "BaseIcon";
BaseIcon.slotName = "jds_base_icon";

const sdl$q = { "metadata": { "version": "1.0.0", "id": "bottom-navigation-1.0.0", "name": "JDSBottomNavigation", "layerName": "jds_bottom_navigation" }, "hierarchy": { "container": ["jds_bottom_navigation_item"] }, "base": { "container": { "width": "{b_0}", "flex-direction": "{b_1}", "justify-content": "{b_2}", "align-items": "{b_3}", "background-color": "{b_4}", "padding-left": "{b_5}", "padding-top": "{b_6}", "padding-right": "{b_7}", "padding-bottom": "{b_8}", "gap": "{b_9}", "box-shadow": { "x": "{b_10}", "y": "{b_11}", "blur": "{b_12}", "spread": "{b_13}", "color": "{b_15}" } }, "jds_bottom_navigation_item": { "flex": "{b_14}" } }, "variant": { "multiLine": { "true": { "jds_bottom_navigation_item": { "multiLine": true } }, "false": { "jds_bottom_navigation_item": { "multiLine": false } } } }, "api": { "config": { "multiLine": { "values": [false, true] } }, "data": { "container": { "value": { "type": "list", "name": "items", "object": { "icon": "icon", "label": "string", "disabled": "boolean" }, "doc_description": "It shows list of items." } }, "jds_bottom_navigation_item": { "selectedIndex": { "type": "number", "name": "activeIndex", "doc_description": "It can be used to change the current active index." }, "icon": { "type": "icon", "name": "items.icon" }, "label": { "type": "string", "name": "items.label" }, "disabled": { "type": "boolean", "name": "items.disabled" }, "linkProps": { "type": "object", "name": "items.linkProps" }, "showLabel": { "type": "boolean", "name": "showLabel", "doc_description": "Shows label below icon if true,by default it is false." } } }, "events": { "jds_bottom_navigation_item": { "onItemClick": "onChange" } }, "a11y": { "container": { "properties": { "role": { "value": "tablist" } }, "name": "items", "repeating": { "ariaLabel": "navAriaLabel", "ariaDescribedby": { "name": "navAriaDescribedby", "platform": "web,ios" } } }, "jds_bottom_navigation_item": { "properties": { "ariaLabel": "items.navAriaLabel", "ariaDescribedby": "items.navAriaDescribedby" } } } } };

const PROP_MAP$6 = (props = {}) => {
  return {
    items: {
      properties: {
        items: props?.items?.map((i) => ({
          ...i,
          label: i.label || i.title
        }))
      }
    }
  };
};
const withLogic$r = (Component) => (userProps) => {
  const props = modifyProps(userProps, PROP_MAP$6);
  const { activeIndex, items = [], onChange, ...rest } = props;
  const { index, onClick } = useSelected(activeIndex);
  const navItems = items.map((item, i) => ({
    ...item,
    linkProps: {
      href: item["href"],
      provider: item["provider"],
      target: item["target"],
      newTab: item["newTab"]
    },
    showLabel: props.showLabel,
    onClick: (ev) => {
      if (!item.disabled) {
        item["onClick"]?.(ev);
        onClick(i);
        onChange?.(i);
      }
    }
  }));
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...rest,
        items: navItems,
        activeIndex: index,
        selectedIndex: index
      }
    }
  );
};

const Component$t = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$q;
  const { multiLine = false, onChange = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ multiLine, onChange, ...rest }, componentTag },
    "JDSBottomNavigation",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const BottomNav = withLogic$r(Component$t);
BottomNav.displayName = "BottomNav";
BottomNav.slotName = "jds_bottom_navigation";

const sdl$p = { "metadata": { "version": "1.0.0", "id": "breadcrumbs-1.0.0", "name": "JDSBreadcrumbs", "layerName": "jds_breadcrumbs", "platform": "web", "description": "Breadcrumbs are a navigation system used to show hierarchy and navigational context for a user's location on a website. It helps users to understand where they are within a website's structure and move between levels.", "usage": "Breadcrumbs are used to categorize information in the search results and thus help the SEO of the site." }, "hierarchy": { "container": [{ "link-container": ["jds_link", { "jds-icon-container": ["jds-icon"] }] }, "jds-text", "jds_menu_block"] }, "base": { "container": { "flex-direction": "{b_0}", "justify-content": "{b_1}", "align-items": "{b_2}", "height": "{b_3}" }, "link-container": { "flex-direction": "{b_4}", "justify-content": "{b_5}", "align-items": "{b_6}" }, "jds-icon": { "size": "{m}", "color": "{primaryGrey80}", "value": "ic_chevron_right", "ic": "ic_chevron_right" }, "jds-icon-container": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{m}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}", "ic": "ic_chevron_right" }, "jds-text": { "font-family": "{bodySBold}", "color": "{primaryGrey80}", "font-size": "{bodySBold}", "line-height": "{bodySBold}", "letter-spacing": "{bodySBold}", "font-weight": "{bodySBold}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" } }, "api": { "data": { "link-container": { "value": { "type": "list", "name": "shownLinks", "object": { "newTab": "boolean", "href": "string", "title": "string", "routerLinkProps": "object", "provider": "object", "onClick": "event" } } }, "jds_link": { "title": { "type": "string", "name": "shownLinks.title" }, "newTab": { "type": "string", "name": "shownLinks.newTab", "platform": "web" }, "href": { "type": "string", "name": "shownLinks.href" }, "routerLinkProps": { "type": "RouterLinkProps", "name": "shownLinks.routerLinkProps", "platform": "angular" }, "onClick": { "type": "event", "name": "shownLinks.onClick" }, "provider": { "type": "event", "name": "shownLinks.provider", "platform": "react" } }, "jds_menu_block": { "items": { "type": "list", "name": "hiddenLinks" }, "open": { "type": "boolean", "name": "open" }, "maxWidth": { "type": "size", "name": "maxWidth" }, "offsetX": { "type": "size", "name": "_offsetX" }, "offsetY": { "type": "size", "name": "_offsetY" }, "maxHeight": { "type": "size", "name": "_maxHeight" } }, "jds-text": { "value": { "type": "string", "name": "currentPage" } } }, "events": { "jds_link": { "onClick": "onClick" }, "jds_menu_block": { "onSelect": "onSelect", "onClose": "onClose" } }, "a11y": { "container": { "properties": { "role": { "value": "navigation" } } }, "link-container": { "name": "shownLinks", "repeating": { "ariaLabel": "linkAriaLabel", "ariaDescribedby": { "name": "linkAriaDescribedby", "platform": "web,ios" } } }, "jds_link": { "properties": { "ariaLabel": "shownLinks.linkAriaLabel", "ariaDescribedby": "shownLinks.linkAriaDescribedby" } } } } };

const withLogic$q = (Component) => (props) => {
  const { children = [], links: linksArray = [] } = props;
  const { element, rootRef } = useRootRef();
  const [open, setOpen] = useState(false);
  const truncatedRef = useRef(false);
  const [position, setPosition] = useState({ x: 0, y: 0, height: 0 });
  const normalizedChildren = React.Children.toArray(children);
  const allowedLinkIndices = useMemo(() => {
    const lastIndex = normalizedChildren.length - 1 || linksArray.length - 1 || 0;
    return [0, lastIndex];
  }, [normalizedChildren, linksArray]);
  const hiddenLinks = normalizedChildren.map((l, i) => {
    if (!allowedLinkIndices.includes(i)) {
      return {
        label: l.props?.title || linksArray?.[i]?.title
      };
    }
    return null;
  }).filter((i) => !!i);
  const getShownLinks = useMemo(() => {
    if (normalizedChildren.length > 1 && (element?.offsetWidth && element.offsetWidth > window.innerWidth / 2 || truncatedRef.current)) {
      truncatedRef.current = true;
      return allowedLinkIndices.map((index, i) => {
        if (i === 1) {
          return {
            title: "...",
            onClick: (ev) => {
              setOpen(true);
              const { target } = ev;
              const { left, top, height } = setPositions(
                target,
                void 0
              );
              setPosition({ x: left, y: top, height });
            }
          };
        }
        return normalizedChildren[index]?.props || linksArray?.[index];
      });
    } else if (!truncatedRef.current) {
      truncatedRef.current = false;
      return linksArray.length ? linksArray : normalizedChildren.map((l) => l.props);
    }
  }, [element, normalizedChildren, allowedLinkIndices, linksArray]);
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        hiddenLinks,
        shownLinks: getShownLinks,
        rootRef,
        open,
        _offsetX: position.x,
        _offsetY: position.y,
        _maxHeight: position.height,
        maxWidth: "fit-content",
        onClose: () => setOpen(false),
        children: null
      }
    }
  );
};

const Component$s = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$p;
  const { onClick = noop, onSelect = noop, onClose = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ onClick, onSelect, onClose, ...rest }, componentTag },
    "JDSBreadcrumbs",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const Breadcrumbs = withLogic$q(Component$s);
Breadcrumbs.displayName = "Breadcrumbs";
Breadcrumbs.slotName = "jds_breadcrumbs";

const sdl$o = { "metadata": { "version": "1.0.0", "id": "carousel-1.0.0", "name": "JDSCarousel", "layerName": "jds_carousel", "description": "Carousel is a component for cycling through a series of content slides that can be composed of a combination of images, text and cards.", "usage": "Carousels are used to promote multiple items of conent within a single area on a screen." }, "hierarchy": { "container": [{ "slider-container": ["carousel-slot"] }, { "control-container": [{ "left-container": [{ "progress-container": ["jds_spinner", "prefix-jds_action_button"] }, { "prefix-container": ["title-jds-text", "subtitle-jds-text"] }] }, "jds_carousel_pagination", { "right-container": ["back-jds_action_button", "next-jds_action_button"] }] }] }, "base": { "container": { "flex-direction": "{c_0}", "justify-content": "{c_1}", "align-items": "{c_2}", "gap": "{c_3}", "width": "{c_4}" }, "slider-container": { "width": "{c_5}" }, "control-container": { "flex-direction": "{c_6}", "justify-content": "{c_7}", "align-items": "{c_8}", "gap": "{c_9}", "width": "{c_10}" }, "left-container": { "flex": 1, "max-width": "{c_11}", "flex-direction": "{c_12}", "justify-content": "{c_13}", "align-items": "{c_14}", "gap": "{c_15}", "padding-top": "{c_16}", "padding-bottom": "{c_17}", "show": true }, "progress-container": { "hidden": true, "flex-direction": "{c_21}", "justify-content": "{c_22}", "align-items": "{c_23}" }, "prefix-jds_action_button": { "icon": "ic_play", "size": "medium", "kind": "secondary", "z-index": 0 }, "jds_spinner": { "hidden": true, "kind": "normal", "z-index": 0 }, "prefix-container": { "hidden": true, "flex-direction": "{c_18}", "justify-content": "{c_19}", "align-items": "{c_20}" }, "right-container": { "flex": 1, "max-width": "{c_27}", "flex-direction": "{c_28}", "justify-content": "{c_29}", "align-items": "{c_30}", "gap": "{c_31}", "padding-top": "{c_32}", "padding-bottom": "{c_33}", "show": true }, "back-jds_action_button": { "hidden": true, "icon": "ic_back", "size": "medium", "kind": "secondary" }, "next-jds_action_button": { "hidden": true, "icon": "ic_next", "size": "medium", "kind": "secondary" }, "jds_carousel_pagination": { "hidden": false }, "title-jds-text": { "font-family": "{bodyXsBold}", "color": "{primaryGrey100}", "font-size": "{bodyXsBold}", "line-height": "{bodyXsBold}", "letter-spacing": "{bodyXsBold}", "font-weight": "{bodyXsBold}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "value": "Label", "text": "Label" }, "subtitle-jds-text": { "font-family": "{bodyXs}", "color": "{primaryGrey80}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" } }, "variant": { "density": { "condensed": { "container": { "gap": "{c_34}" }, "prefix-jds_action_button": { "size": "small" }, "back-jds_action_button": { "size": "small" }, "next-jds_action_button": { "size": "small" }, "jds_carousel_pagination": { "density": "condensed" } } }, "indicatorType": { "label": { "left-container": { "hidden": false }, "prefix-container": { "hidden": false }, "jds_carousel_pagination": { "hidden": true } }, "dot_label": { "left-container": { "hidden": false }, "prefix-container": { "hidden": false }, "jds_carousel_pagination": { "hidden": false } }, "none": { "prefix-container": { "hidden": true }, "jds_carousel_pagination": { "hidden": true } } }, "autoPlay": { "false": { "left-container": { "hidden": false } }, "true": { "progress-container": { "hidden": false } } }, "showArrows": { "true": { "back-jds_action_button": { "hidden": false }, "next-jds_action_button": { "hidden": false } } }, "playing": { "true": { "prefix-jds_action_button": { "icon": "ic_pause" } } } }, "combination": [{ "true": { "true": { "prefix-jds_action_button": { "z-index": 1, "kind": "tertiary" }, "jds_spinner": { "hidden": false } } } }, { "true": { "true": { "back-jds_action_button": { "hidden": true } } } }, { "true": { "false": { "progress-container": { "hidden": true } } } }], "combination_config": [["autoPlay", "showDurationProgress"], ["showArrows", "hideLeftArrow"], ["playing", "showPlayPause"]], "api": { "config": { "density": { "type": "JDSCarouselPaginationItem.density", "values": ["relaxed", "condensed"] }, "indicatorType": { "values": ["dot", "label", "dot_label", "none"] }, "showArrows": { "values": [false, true] }, "hideLeftArrow": { "values": [false, true], "doc_description": "only used to hide the left arrow, no op when showArrows = false" }, "hideNextSlide": { "values": [false, true], "doc_description": "only used to hide the left arrow, no op when showArrows = false" }, "autoPlay": { "values": [false, true], "doc_description": "hide autoplay button when autoPlay=false" }, "showPlayPause": { "values": [true, false], "doc_description": "hide autoplay button when showPlayPause=false" }, "playing": { "values": [false, true] }, "showDurationProgress": { "values": [false, true] } }, "data": { "jds_carousel_pagination": { "selectedIndex": { "type": "number", "name": "selectedIndex" }, "count": { "type": "number", "name": "totalSlides", "doc_description": "to be used when number of children != total slides (e.g. when lazyloading or server pagination)" }, "items": { "type": "list", "name": "_paginationItems" } }, "jds_spinner": { "value": { "type": "number", "name": "_value" } }, "title-jds-text": { "value": { "type": "string", "name": "label", "function": true } }, "subtitle-jds-text": { "value": { "type": "string", "name": "_subtitle" } } }, "children": { "carousel-slot": { "name": "children", "accepts": ["jds_carousel_slide"] } }, "events": { "prefix-jds_action_button": { "onClick": { "name": "onPlayPause", "doc_description": "Triggered on resume/play/pause of auto playing slides." } }, "back-jds_action_button": { "onClick": "onBackBtn" }, "next-jds_action_button": { "onClick": "onNextBtn" }, "jds_carousel_pagination": { "onDotClick": { "name": "onDotClick", "doc_description": "Triggerred on click of pagination dot" } }, "slider-container": { "onClick": "onClick", "onSwipeLeft": "onNext", "onSwipeRight": "onBack" }, "carousel-slot": { "onClick": "onClick", "onSwipeLeft": "onNext", "onSwipeRight": "onBack" } }, "a11y": { "prefix-jds_action_button": { "properties": { "ariaLabel": { "name": "PlayPauseAriaLabel", "value": "Pause or Play Auto slide rotation" } } }, "back-jds_action_button": { "properties": { "ariaLabel": { "name": "backButtonAriaLabel", "value": "Previous Slide" } } }, "next-jds_action_button": { "properties": { "ariaLabel": { "name": "nextButtonAriaLabel", "value": "Next Slide" } } } } } };

const clampValue = (index, total) => {
  if (index < 0)
    return total - 1;
  if (index >= total)
    return 0;
  return index;
};
const sortedOrder = (children) => {
  children.sort((a, b) => {
    const elementA = a;
    const elementB = b;
    return (elementA.props.order || -1) - (elementB.props.order || -1);
  });
  return children;
};
const AUTOPLAY_DURATION = 3e3;
const TRANSITION_DURATION = 300;
const TOTALSPINNER_VALUE = 360;
const withLogic$p = (Component) => forwardRef((userProps, ref) => {
  const {
    activeIndex = -1,
    initialIndex = 0,
    slideDuration = AUTOPLAY_DURATION,
    hideNextSlide,
    totalSlides: slideCount = 0,
    ...props
  } = userProps;
  const SLIDE_PERCENT = Devices.isMobile() && !hideNextSlide ? 92 : 100;
  const totalSlides = slideCount || Children.count(props.children);
  const [spinnerValue, setSpinnerValue] = useState(TOTALSPINNER_VALUE);
  const { element, rootRef } = useRootRef();
  const transitionProgressRef = useRef(false);
  const intervalRef = useRef();
  const spinnerIntervalRef = useRef();
  const [selected, setSelected] = useState(props.playing);
  useEffect(() => {
    handleAutoPlay(Boolean(props.playing));
    return () => {
      clearInterval(intervalRef.current);
      clearInterval(spinnerIntervalRef.current);
    };
  }, [props.playing]);
  const [index, setIndex] = useState(0);
  const touchRef = useRef({ start: 0, end: 0, started: false, id: 0 });
  const totalDistance = useRef(0);
  const [totalTouchDistance, setTotalDistance] = useState(0);
  useEffect(() => {
    if (typeof initialIndex !== "undefined") {
      jumpToSlide(initialIndex);
    }
  }, [initialIndex]);
  useEffect(() => {
    if (element)
      jumpToSlide(activeIndex);
  }, [activeIndex]);
  const handleEndSlidePositions = (idx) => {
    const currentIndex = idx === void 0 ? index : idx;
    const slides = Array.from(
      element?.querySelectorAll("div.j-jds-carousel-slide-container") || []
    );
    const firstSlide = slides[0];
    const lastSlide = slides[slides.length - 1];
    if (firstSlide) {
      if (currentIndex === totalSlides - 1) {
        firstSlide.style.transform = `translateX(${(totalSlides || 1) * 100}%)`;
      } else {
        firstSlide.style.transform = "unset";
      }
    }
    if (lastSlide) {
      if (currentIndex === 0) {
        lastSlide.style.transform = `translateX(-${(totalSlides || 1) * 100}%)`;
      } else {
        lastSlide.style.transform = "unset";
      }
    }
  };
  const enableTransition = () => {
    const containerRef = element?.querySelector(
      'div[data-testid="JDSCarousel-slider-container"]'
    );
    if (!containerRef) {
      return;
    }
    containerRef.style.transitionDuration = TRANSITION_DURATION + "ms";
  };
  const next = () => {
    if (transitionProgressRef.current)
      return;
    const nextIndex = clampValue(index + 1, totalSlides);
    moveToPanel(nextIndex, 1);
    setTimeout(() => {
      handleEndSlidePositions(touchRef.current.id);
    }, TRANSITION_DURATION);
  };
  const prev = () => {
    if (transitionProgressRef.current)
      return;
    const nextIndex = clampValue(index - 1, totalSlides);
    moveToPanel(nextIndex, -1);
    setTimeout(() => {
      handleEndSlidePositions(touchRef.current.id);
    }, TRANSITION_DURATION);
  };
  function handleImmediateTransitionToSlide(slideIndex) {
    const containerRef = element?.querySelector(
      'div[data-testid="JDSCarousel-slider-container"]'
    );
    if (!containerRef) {
      return;
    }
    containerRef.style.transitionDuration = "0ms";
    handleEndSlidePositions(totalSlides - 1);
    setTotalDistance(slideIndex * -1 * SLIDE_PERCENT);
    setTimeout(enableTransition, TRANSITION_DURATION);
  }
  const jumpToSlide = (idx) => {
    if (transitionProgressRef.current)
      return;
    const clampedIndex = clampValue(idx, totalSlides);
    if (clampedIndex === index)
      return;
    moveToPanel(clampedIndex, 1);
    setTimeout(() => {
      handleEndSlidePositions(touchRef.current.id);
    }, TRANSITION_DURATION);
  };
  useImperativeHandle(ref, () => ({
    getCurrentIndex: () => touchRef.current.id,
    goToSlide: jumpToSlide,
    next,
    prev,
    getCaption: (currentIndex, _) => {
      return Children.toArray(props.children)[currentIndex].props.label || "";
    }
  }));
  const moveToPanel = (index2, dir = 1) => {
    let distance = 0;
    if (dir > 0) {
      if (index2 === 0) {
        distance = 0;
        transitionProgressRef.current = true;
        setTimeout(() => {
          handleImmediateTransitionToSlide(0);
          transitionProgressRef.current = false;
        }, TRANSITION_DURATION);
      } else
        distance = index2 * -1 * SLIDE_PERCENT;
    } else {
      if (totalSlides - 1 === index2) {
        distance = SLIDE_PERCENT;
        transitionProgressRef.current = true;
        setTimeout(() => {
          handleImmediateTransitionToSlide(totalSlides - 1);
          transitionProgressRef.current = false;
        }, TRANSITION_DURATION);
      } else
        distance = index2 * -1 * SLIDE_PERCENT;
    }
    setTotalDistance(distance);
    setIndex(index2);
    touchRef.current.id = index2;
  };
  const handlePointerStart = (e) => {
    handleEndSlidePositions();
    touchRef.current.started = true;
    touchRef.current.start = e.clientX;
    totalDistance.current = totalTouchDistance;
  };
  const handlePointerMove = (ev) => {
    const containerWidth = element?.offsetWidth || 1;
    if (touchRef.current.started) {
      touchRef.current.end = ev.clientX;
      const difference = 100 / containerWidth * (touchRef.current.end - touchRef.current.start);
      const aactiveSlideDistance = index * -1 * SLIDE_PERCENT;
      setTotalDistance(aactiveSlideDistance + difference);
    }
  };
  const handlePointerEnd = (ev) => {
    const difference = touchRef.current.end - touchRef.current.start;
    const diff = Math.abs(difference) / ev.currentTarget.offsetWidth * 100;
    touchRef.current = {
      start: 0,
      started: false,
      end: 0,
      id: touchRef.current.id
    };
    if (Math.abs(diff) > 30) {
      if (difference < 0) {
        next();
      } else {
        prev();
      }
    } else {
      setTotalDistance(totalDistance.current);
    }
  };
  useEffect(() => {
    if (!props.autoPlay) {
      if (intervalRef.current)
        clearInterval(intervalRef.current);
      if (spinnerIntervalRef.current)
        clearInterval(spinnerIntervalRef.current);
    }
  }, [props.autoPlay]);
  const handleAutoPlay = (selected2) => {
    console.log("handleAutoPlay called", selected2);
    setSelected(selected2);
    if (!selected2) {
      clearInterval(intervalRef.current);
      clearInterval(spinnerIntervalRef.current);
      props?.onPause?.(index);
      setSpinnerValue(0);
    } else {
      props?.onPlay?.(index);
      const animationDuration = slideDuration;
      let startTimestamp;
      const animate = (timestamp) => {
        if (!startTimestamp)
          startTimestamp = timestamp;
        const progress = timestamp - startTimestamp;
        const percentage = Math.min(progress / animationDuration, 1);
        const newValue = percentage * 360;
        setSpinnerValue(newValue);
        if (progress < animationDuration) {
          requestAnimationFrame(animate);
        } else {
          startTimestamp = 0;
          setTimeout(animate, slideDuration);
        }
      };
      intervalRef.current = setInterval(() => {
        if (transitionProgressRef.current)
          return;
        const nextIndex = clampValue(touchRef.current.id + 1, totalSlides);
        moveToPanel(nextIndex, 1);
        setTimeout(() => {
          handleEndSlidePositions(touchRef.current.id);
        }, TRANSITION_DURATION);
      }, slideDuration);
      animate(performance.now());
      spinnerIntervalRef.current = setInterval(() => {
        animate(performance.now());
      }, slideDuration);
    }
  };
  const handleDotClick = (idx) => {
    let dir = -1;
    if (idx < index)
      dir = -1;
    else
      dir = 1;
    moveToPanel(idx, dir);
    props.onPaginationClick?.();
    handleEndSlidePositions(idx);
  };
  const tokens = useTokenValues();
  const language = tokens.lang;
  const numeralList = useMemo(() => {
    return getNumbers(language);
  }, [language]);
  const localOf = getOf(language);
  const getLocalNumber = (number) => {
    const numString = number.toString();
    return numString.replace(
      /\d/g,
      (num) => numeralList[parseInt(num, 10)] ?? num
    );
  };
  return /* @__PURE__ */ jsx(
    "div",
    {
      style: {
        "--move": totalTouchDistance + "%",
        "--slide-width": SLIDE_PERCENT + "%"
      },
      children: /* @__PURE__ */ jsx(
        Component,
        {
          ...{
            ...props,
            totalSlides,
            rootRef,
            children: sortedOrder(
              Children.toArray(props.children)
            ),
            selectedIndex: index,
            count: totalSlides,
            _subtitle: `${getLocalNumber(index + 1)} ${localOf ?? "of"} ${getLocalNumber(totalSlides)}`,
            onNextBtn: () => {
              next();
            },
            onBackBtn: prev,
            onNext: (ev, { type }) => {
              if (type === "touchdown") {
                handlePointerStart(ev);
              } else {
                if (type === "touchmove") {
                  handlePointerMove(ev);
                } else {
                  handlePointerEnd(ev);
                }
              }
            },
            playing: selected,
            _value: spinnerValue,
            onPlayPause: () => handleAutoPlay(!selected),
            onDotClick: handleDotClick
          }
        }
      )
    }
  );
});

const Component$r = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$o;
  const { density = "undefined", indicatorType = "dot", showArrows = false, hideLeftArrow = false, hideNextSlide = false, autoPlay = false, showPlayPause = true, playing = false, showDurationProgress = false, onPlayPause = noop, onBackBtn = noop, onNextBtn = noop, onDotClick = noop, onClick = noop, onNext = noop, onBack = noop, PlayPauseAriaLabel = "Pause or Play Auto slide rotation", backButtonAriaLabel = "Previous Slide", nextButtonAriaLabel = "Next Slide", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ density, indicatorType, showArrows, hideLeftArrow, hideNextSlide, autoPlay, showPlayPause, playing, showDurationProgress, onPlayPause, onBackBtn, onNextBtn, onDotClick, onClick, onNext, onBack, PlayPauseAriaLabel, backButtonAriaLabel, nextButtonAriaLabel, ...rest }, componentTag },
    "JDSCarousel",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const Carousel = withLogic$p(Component$r);
Carousel.displayName = "Carousel";
Carousel.slotName = "jds_carousel";

const sdl$n = { "metadata": { "version": "1.0.0", "id": "container-1.0.0", "name": "JDSContainer", "layerName": "jds_container" }, "hierarchy": { "container": ["content-slot"] }, "base": { "container": { "show": true, "background-color": "{global.transparent}", "flex-direction": "{flexDirection.row}", "justify-content": "{justifyContent.start}", "align-items": "{alignItems.start}", "padding-left": 0, "padding-top": 0, "padding-bottom": 0, "padding-right": 0, "border-bottom-width": 0, "border-top-width": 0, "border-right-width": 0, "border-left-width": 0, "border-top-left-radius": 0, "border-top-right-radius": 0, "border-bottom-left-radius": 0, "border-bottom-right-radius": 0 } }, "variant": { "direction": { "column": { "container": { "flex-direction": "{flexDirection.column}" } }, "stack": { "container": { "flex-direction": "{flexDirection.stack}" } } } }, "combination": [{ "row": { "center": { "container": { "align-items": "{alignItems.center}" } }, "end": { "container": { "align-items": "{alignItems.end}" } }, "space-between": { "container": { "align-items": "{alignItems.spaceBetween}" } }, "space-around": { "container": { "align-items": "{alignItems.spaceAround}" } }, "space-evenly": { "container": { "align-items": "{alignItems.spaceEvenly}" } } }, "column": { "center": { "container": { "justify-content": "{justifyContent.center}" } }, "end": { "container": { "justify-content": "{justifyContent.end}" } }, "space-between": { "container": { "justify-content": "{justifyContent.spaceBetween}" } }, "space-around": { "container": { "justify-content": "{justifyContent.spaceAround}" } }, "space-evenly": { "container": { "justify-content": "{justifyContent.spaceEvenly}" } } }, "stack": { "center": { "container": { "align-items": "{alignItems.center}" } }, "end": { "container": { "align-items": "{alignItems.end}" } } } }, { "row": { "center": { "container": { "justify-content": "{justifyContent.center}" } }, "end": { "container": { "justify-content": "{justifyContent.end}" } }, "space-between": { "container": { "justify-content": "{justifyContent.spaceBetween}" } }, "space-around": { "container": { "justify-content": "{justifyContent.spaceAround}" } }, "space-evenly": { "container": { "justify-content": "{justifyContent.spaceEvenly}" } } }, "column": { "center": { "container": { "align-items": "{alignItems.center}" } }, "end": { "container": { "align-items": "{alignItems.end}" } }, "space-between": { "container": { "align-items": "{alignItems.spaceBetween}" } }, "space-around": { "container": { "align-items": "{alignItems.spaceAround}" } }, "space-evenly": { "container": { "align-items": "{alignItems.spaceEvenly}" } } }, "stack": { "center": { "container": { "justify-content": "{justifyContent.center}" } }, "end": { "container": { "justify-content": "{justifyContent.end}" } } } }], "combination_config": [["direction", "verticalAlign"], ["direction", "horizontalAlign"]], "api": { "children": { "content-slot": { "name": "children", "accepts": ["any"] } }, "config": { "verticalAlign": { "values": ["start", "center", "end", "space-between", "space-around", "space-evenly"] }, "horizontalAlign": { "values": ["start", "center", "end", "space-between", "space-around", "space-evenly"] }, "direction": { "values": ["row", "column", "stack"] } }, "data": { "container": { "width": { "type": "token", "name": "width" }, "height": { "type": "token", "name": "height" }, "background-color": { "type": "string", "name": "backgroundColor" }, "border-radius": { "type": "token", "name": "radius" }, "padding-left": { "type": "token", "name": "paddingLeft" }, "padding-right": { "type": "token", "name": "paddingRight" }, "padding-top": { "type": "token", "name": "paddingTop" }, "padding-bottom": { "type": "token", "name": "paddingBottom" }, "flex": { "type": "number", "name": "flex" }, "border-left-width": { "type": "token", "name": "borderLeftWidth" }, "border-right-width": { "type": "token", "name": "borderRightWidth" }, "border-top-width": { "type": "token", "name": "borderTopWidth" }, "border-bottom-width": { "type": "token", "name": "borderBottomWidth" }, "border-top-left-radius": { "type": "token", "name": "borderTopLeftRadius" }, "border-top-right-radius": { "type": "token", "name": "borderTopRightRadius" }, "border-bottom-left-radius": { "type": "token", "name": "borderBottomLeftRadius" }, "border-bottom-right-radius": { "type": "token", "name": "borderBottomRightRadius" }, "border-color": { "type": "string", "name": "borderColor" }, "gap": { "type": "token", "name": "gap" }, "overflow": { "type": "string", "name": "overflow", "platform": "web" } } } } };

const withLogic$o = (Component) => forwardRef((props, ref) => {
  const [borderTop, borderRight, borderBottom, borderLeft] = props.borderWidth || [];
  const allSides = props.padding?.length === 1 ? Array.from({ length: 4 }).map(() => props.padding?.[0]) : props.padding;
  const [paddingTop, paddingRight, paddingBottom, paddingLeft] = allSides || [];
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        rootRef: ref,
        children: convertTextToComponent(props.children),
        width: props.fullWidth ? "{size.max}" : props.width,
        borderTopWidth: borderTop || props.borderTopWidth,
        borderLeftWidth: borderLeft || props.borderLeftWidth,
        borderRightWidth: borderRight || props.borderLeftWidth,
        borderBottomWidth: borderBottom || props.borderLeftWidth,
        paddingTop: paddingTop || props.paddingTop,
        paddingBottom: paddingBottom || props.paddingBottom,
        paddingRight: paddingRight || props.paddingRight,
        paddingLeft: paddingLeft || props.paddingLeft,
        gap: props.gap ?? 0,
        borderBottomLeftRadius: props.borderBottomLeftRadius || props.radius,
        borderBottomRightRadius: props.borderBottomRightRadius || props.radius,
        borderTopLeftRadius: props.borderTopLeftRadius || props.radius,
        borderTopRightRadius: props.borderTopRightRadius || props.radius
      }
    }
  );
});

const Component$q = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$n;
  const { verticalAlign = "start", horizontalAlign = "start", direction = "row", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ verticalAlign, horizontalAlign, direction, ...rest }, componentTag },
    "JDSContainer",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const Container$1 = withLogic$o(Component$q);
Container$1.displayName = "Container";
Container$1.slotName = "jds_container";

const sdl$m = { "metadata": { "version": "1.0.0", "id": "content-card-1.0.0", "name": "JDSContentCard", "layerName": "jds_content_card", "description": "Content cards are blocks of content that contain various combinations of components in different structures.", "usage": "Content cards are used to organise content in meaningful blocks within a page." }, "hierarchy": { "root-container": [{ "header-container": ["header-slot"] }, { "image-content-container": ["jds_image", "jds_content_block"] }, { "children-container": ["children-slot"] }, "footer-jds-text"] }, "base": { "root-container": { "overflow": "hidden", "width": "{c_0}", "border-radius": "{c_1}", "flex-direction": "{c_2}", "justify-content": "{c_3}", "align-items": "{c_4}", "background-color": "{c_5}", "padding-bottom": "{c_29}", "gap": "{base}", "box-shadow": { "x": 0, "y": 4, "blur": 16, "spread": 0, "color": "#00000014" }, "behavior": { "hover": { "box-shadow": { "x": 0, "y": 4, "blur": 16, "spread": 0, "color": "#0000000E" } } } }, "header-container": { "hidden": false, "justify-content": "{c_6}", "align-items": "{c_7}", "width": "{c_8}", "padding-left": "{c_9}", "padding-right": "{c_10}" }, "children-container": { "hidden": false, "justify-content": "{c_12}", "align-items": "{c_13}", "width": "{c_14}", "padding-left": "{c_15}" }, "image-content-container": { "flex-direction": "{c_18}", "width": "{c_19}", "justify-content": "{c_20}", "align-items": "{c_21}", "gap": "{base}" }, "jds_image": { "aspectRatio": "horizontal_16_9", "roundedCorner": true, "imageFocus": "center" }, "jds_content_block": { "size": "xtra-small", "padding-left": "{c_24}", "padding-right": "{c_25}" }, "footer-jds-text": { "font-family": "{bodyXs}", "color": "{primaryGrey80}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "padding-left": "{c_27}", "padding-right": "{c_28}" } }, "variant": { "imageRatio": { "square": { "jds_image": { "aspectRatio": "square" } }, "landscape": { "jds_image": { "aspectRatio": "horizontal_4_3" } }, "portrait": { "jds_image": { "aspectRatio": "vertical_4_5" } } }, "shadow": { "false": { "root-container": { "box-shadow": { "x": 0, "y": 0, "blur": 0, "spread": 0, "color": "#00000000" } } } }, "_hasHeaderSlot": { "false": { "header-container": { "hidden": true }, "image-content-container": { "padding-top": 0 } } }, "_hasChildrenSlot": { "false": { "children-container": { "hidden": true } } }, "_hasContentBlockAndImageProps": { "false": { "image-content-container": { "hidden": true } } }, "_hasContentBlockProps": { "false": { "jds_content_block": { "hidden": true } } }, "_hasImageProps": { "false": { "image-content-container": { "padding-top": 0 }, "jds_image": { "hidden": true }, "jds_content_block": { "padding-top": 0 } } }, "condensed": { "true": { "jds_content_block": { "ctaWrap": "vertical" } } }, "orientation": { "horizontal": { "jds_content_block": { "padding-left": 0 } } } }, "combination": [{ "false": { "xtra-xtra-small": { "jds_content_block": { "size": "xtra-xtra-small" } }, "small": { "jds_content_block": { "size": "small" } }, "medium": { "jds_content_block": { "size": "medium" } }, "large": { "jds_content_block": { "size": "large" } }, "xtra-large": { "jds_content_block": { "size": "xtra-large" } } } }, { "true": { "horizontal": { "image-content-container": { "padding-left": "{c_30}", "padding-top": "{c_31}", "flex-direction": "{c_32}" }, "jds_image": { "flex": "0.2", "aspectRatio": "square" }, "jds_content_block": { "flex": "0.8", "size": "xtra-xtra-small" } }, "vertical": { "root-container": { "width": "{c_33}" }, "jds_image": { "aspectRatio": "square" }, "jds_content_block": { "size": "xtra-xtra-small" } } }, "false": { "horizontal": { "root-container": { "width": "{c_34}" }, "image-content-container": { "padding-left": "{c_35}", "padding-top": "{c_36}", "flex-direction": "{c_37}" }, "jds_image": { "flex": "0.3" }, "jds_content_block": { "flex": "0.7" } } } }, { "true": { "vertical": { "mobile": { "root-container": { "width": "{c_38}" } } } } }, { "horizontal": { "false": { "jds_content_block": { "flex": 1, "padding-left": 0 } } } }], "combination_config": [["condensed", "size"], ["condensed", "orientation"], ["condensed", "orientation", "_platform"], ["orientation", "_hasImageProps"]], "api": { "children": { "header-slot": { "name": "header", "accepts": ["jds_list_block"], "max": 1 }, "children-slot": { "name": "children", "accepts": ["any"], "max": 1 } }, "config": { "size": { "values": ["xtra-small", "xtra-xtra-small", "small", "medium", "large", "xtra-large"] }, "orientation": { "values": ["vertical", "horizontal"], "doc_description": "Horizontal orientation puts image and content side by side." }, "imageRatio": { "values": ["wide", "square", "landscape", "portrait"] }, "shadow": { "values": [true, false], "doc_description": "Toggle drop shadow" }, "condensed": { "values": [false, true] }, "_hasHeaderSlot": { "values": [true, false] }, "_hasChildrenSlot": { "values": [true, false] }, "_hasContentBlockAndImageProps": { "values": [true, false] }, "_hasContentBlockProps": { "values": [true, false] }, "_hasImageProps": { "values": [true, false] }, "_platform": { "values": ["desktop", "mobile"] } }, "data": { "root-container": { "fullCardCTA": { "type": "string", "name": "fullCardCTA", "doc_description": "When present, the entire card is clickable. If any other CTAs are sent, they will not be clickable." } }, "jds_content_block": { "title": { "type": "string", "name": "title" }, "description": { "type": "string", "name": "description" }, "primaryCTA": { "type": "string", "name": "primaryCTA" }, "secondaryCTA": { "type": "string", "name": "secondaryCTA" }, "caption": { "type": "slot", "name": "caption", "accepts": ["jds_badge", "jds_text", "jds_tag"], "function": true }, "ctaWrap": { "type": "JDSContentBlock.ctaWrap", "name": "ctaWrap" }, "isTertiary": { "type": "boolean", "name": "isTertiary" } }, "jds_image": { "src": { "type": "image", "name": "image" }, "alt": { "type": "string", "name": "imgAlt" }, "title": { "type": "string", "name": "imgTitle" }, "borderRadius": { "type": "size", "default": 24, "name": "borderRadius" }, "imageFocus": { "type": "JDSImage.imageFocus", "name": "imageFocus" } }, "footer-jds-text": { "value": { "type": "string", "name": "footer" } } }, "events": { "root-container": { "onClick": "onClick" }, "jds_content_block": { "onPrimaryClick": "onPrimaryClick", "onSecondaryClick": "onSecondaryClick" } }, "a11y": { "jds_image": { "properties": { "ariaLabel": "imageAriaLabel", "ariaDescribedby": { "name": "imageAriaDescribedby", "platform": "web,ios" } } }, "jds_content_block": { "properties": { "primaryCtaAriaLabel": "primaryCtaAriaLabel", "primaryCtaAriaDescribedby": { "name": "primaryCtaAriaDescribedby", "platform": "web,ios" }, "secondaryCtaAriaLabel": "secondaryCtaAriaLabel", "secondaryCtaAriaDescribedby": { "name": "secondaryCtaAriaDescribedby", "platform": "web,ios" } } } } } };

const PROP_MAP$5 = (props) => {
  if (typeof props.image === "object") {
    console.warn(
      "passing a JSX element is deprecated. pass the image source as as string"
    );
  }
  if (typeof props.footer === "object") {
    console.warn("Passing JSX.Element is deprecated. Please pass a string");
  }
  return {
    image: {
      properties: {
        image: resolvePropObjectKeys(props.image, "props.src", "")
      }
    },
    size: {
      defaultValue: "xtra-small",
      variations: {
        s: {
          size: "small"
        },
        m: {
          size: "medium"
        },
        xs: {
          size: "xtra-small"
        },
        xxs: {
          size: "xtra-xtra-small"
        },
        l: {
          size: "large"
        },
        xl: {
          size: "xtra-large"
        }
      }
    }
  };
};

const withLogic$n = (Component) => (userProps) => {
  const props = modifyProps(userProps, PROP_MAP$5);
  const hasContentBlockProps = Boolean(
    props.title || props.description || props.primaryCTA || props.secondaryCTA || props.caption
  );
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        _hasHeaderSlot: Boolean(props.header),
        _hasChildrenSlot: Boolean(props.children),
        _hasContentBlockProps: hasContentBlockProps,
        _hasImageProps: Boolean(props.image),
        _hasContentBlockAndImageProps: Boolean(
          hasContentBlockProps || props.image
        ),
        _platform: Devices.isDesktop() ? "desktop" : "mobile",
        children: props.children ? /* @__PURE__ */ jsx("div", { style: { width: "100%" }, children: props.children }) : void 0
      }
    }
  );
};

const Component$p = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$m;
  const { size = "xtra-small", orientation = "vertical", imageRatio = "wide", shadow = true, condensed = false, onClick = noop, onPrimaryClick = noop, onSecondaryClick = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ size, orientation, imageRatio, shadow, condensed, onClick, onPrimaryClick, onSecondaryClick, ...rest }, componentTag },
    "JDSContentCard",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const Card = withLogic$n(Component$p);
Card.displayName = "Card";
Card.slotName = "jds_content_card";

const YEAR_COUNT = 50;
const withLogic$m = (Component) => (props) => {
  const {
    onClose,
    monthSelectable = true,
    yearSelectable = true,
    close: userClose = true,
    open,
    ...rest
  } = props;
  const closeProp = typeof open === "undefined" ? userClose : !open;
  const [state, setState] = useState("default");
  const { day, month, year } = getNormalisedDate$1(props.value);
  const [selectedMonth, setSelectedMonth] = useState(month);
  const [selectedDate, setSelectedDate] = useState({
    date: day,
    month,
    year
  });
  const [selectedYear, setSelectedYear] = useState(year);
  const { selected, toggle, close } = useToggle(props.open, !closeProp);
  const scrollCloseListener = useCallback(() => {
    close();
    onClose?.();
  }, [close, onClose]);
  useEffect(() => {
    window.addEventListener("scroll", scrollCloseListener);
    return () => {
      window.removeEventListener("scroll", scrollCloseListener);
    };
  }, [scrollCloseListener]);
  useEffect(() => {
    const { day: day2, month: month2, year: year2 } = getNormalisedDate$1(props.value);
    setSelectedDate({ date: day2, month: month2, year: year2 });
    setSelectedYear(year2);
    setSelectedMonth(month2);
  }, [props.value]);
  const months = loadedMonths(
    selectedMonth - 1,
    selectedYear,
    monthSelectable,
    props.min,
    props.max
  );
  const tokens = useTokenValues();
  const language = tokens.lang;
  const confirmLabelLocal = useMemo(() => {
    return getConfirmLabel(language);
  }, [language]);
  if (!selected)
    return props.children;
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...rest,
        confirmDate: new Date(
          selectedDate.year,
          selectedDate.month - 1,
          selectedDate.date
        ).toLocaleDateString("en-GB", {
          weekday: "short",
          day: "2-digit",
          month: "long",
          year: "numeric"
        }),
        _confirmLabel: confirmLabelLocal,
        calendarData: {
          disabledDates: props.disabledDates,
          dateFilter: props.dateFilter,
          min: props.min,
          max: props.max
        },
        open: selected,
        value: new Date(
          selectedDate.year,
          selectedDate.month - 1,
          selectedDate.date
        ),
        onClose: () => {
          if (selected) {
            toggle();
          }
          onClose?.();
        },
        onClick: (ev) => ev.stopPropagation(),
        date: selectedDate.date,
        month: selectedMonth,
        year: selectedYear,
        monthName: [selectedMonth - 1]?.slice(0, 3),
        months,
        state,
        offsetX: 0,
        offsetY: 0,
        yearData: {
          count: YEAR_COUNT,
          min: selectedYear - YEAR_COUNT / 2,
          max: selectedYear + YEAR_COUNT / 2,
          disabled: getDisabledYears(
            selectedYear - YEAR_COUNT / 2,
            selectedYear + YEAR_COUNT / 2,
            props.min,
            props.max
          )
        },
        _onYearClick: () => setState("year_view"),
        _onMonthClick: () => setState("month_view"),
        _onBack: () => setState("default"),
        onSelect: (num, disabled) => {
          if (!disabled) {
            setSelectedDate({
              date: num,
              month: selectedMonth,
              year: selectedYear
            });
          }
          setState("default");
        },
        _onConfirm: () => {
          props.onSelect?.(
            new Date(selectedDate.year, selectedDate.month, selectedDate.date)
          );
          props.onChange?.(
            new Date(selectedDate.year, selectedDate.month, selectedDate.date)
          );
          props.onConfirm?.(
            new Date(selectedDate.year, selectedDate.month, selectedDate.date)
          );
          close();
          onClose?.();
        },
        _onMonthSelect: (i) => {
          if (monthSelectable) {
            setSelectedMonth(i);
            setState("default");
            props.onMonthSelect?.();
          }
        },
        _onYearSelect: (i) => {
          if (yearSelectable) {
            setSelectedYear(i);
            setState("default");
            props.onYearSelect?.();
          }
        },
        _onPrev: () => setSelectedMonth((m) => {
          if (m === 1) {
            setSelectedYear(selectedYear - 1);
            return 12;
          }
          return m - 1;
        }),
        _onNext: () => setSelectedMonth((m) => {
          if (m === 12) {
            setSelectedYear(selectedYear + 1);
            return 1;
          }
          return m + 1;
        })
      },
      children: props.children
    }
  );
};

const Component$o = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1M;
  const { state = "default", open = false, onClose = noop, onConfirm = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ state, open, onClose, onConfirm, ...rest }, componentTag },
    "JDSDatepickerMobile",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const DatepickerMobile = withLogic$m(Component$o);
DatepickerMobile.displayName = "DatepickerMobile";
DatepickerMobile.slotName = "jds_datepicker_mobile";

const withLogic$l = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$n = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1G;
  const { state = "default", open = false, onClose = noop, onConfirm = noop, previousButtonAriaLabel = "Tap to Return", closeAriaLabel = "Tap to Close", confirmAriaLabel = "Tap to Confirm", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ state, open, onClose, onConfirm, previousButtonAriaLabel, closeAriaLabel, confirmAriaLabel, ...rest }, componentTag },
    "JDSDatepickerMobileInternal",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const DatepickerMobileInternal = withLogic$l(Component$n);
DatepickerMobileInternal.displayName = "DatepickerMobileInternal";
DatepickerMobileInternal.slotName = "jds_datepicker_mobile_internal";

const sdl$l = { "metadata": { "version": "1.0.0", "id": "dropdown-1.0.0", "name": "JDSDropdown", "layerName": "jds_dropdown", "description": "Dropdowns allow users to choose from a list of options presented contextually as a list. A dropdown in this document is a combination of a trigger and an options popup.", "usage": "Dropdowns are used when you want users to take an action or provide input." }, "hierarchy": { "container": ["label-border-jds-text", { "field-container": ["label-jds-text", { "select-container": [{ "text-container": [{ "prefix-icon-container": ["prefix-icon"] }, "current-jds-text", "placeholder-jds-text"] }, { "chevron-jds-icon-container": ["chevron-jds-icon"] }] }] }, { "active-line-container": ["feedback-container"] }, "jds_feedback_block", "helper-jds-text", "jds_menu_block"] }, "base": { "container": { "flex-direction": "{d_0}", "gap": "{d_1}", "width": "{d_2}", "justify-content": "{d_3}", "align-items": "{d_4}", "behavior": { "hover": {} }, "opacity": "{d_37}" }, "field-container": { "flex-direction": "{d_5}", "width": "{d_6}", "align-items": "{d_7}", "justify-content": "{d_8}", "padding-bottom": "{d_9}" }, "text-container": { "flex-direction": "{d_10}", "overflow": "hidden", "flex": 1, "hidden": false, "gap": "{d_11}" }, "select-container": { "flex-direction": "{d_12}", "justify-content": "{d_13}", "width": "{d_14}", "padding-top": 20, "align-items": "{d_15}", "z-index": 0 }, "active-line-container": { "flex-direction": "{d_16}", "width": "{d_17}", "align-items": "{d_18}", "padding-top": 1, "padding-bottom": 1 }, "feedback-container": { "width": "{d_19}", "height": 2, "background-color": "{d_20}", "border-radius": 48, "show": true, "hidden": false, "behavior": { "hover": { "background-color": "{d_21}" }, "focus": { "background-color": "{d_22}" }, "active": { "background-color": "{d_23}" } } }, "jds_feedback_block": { "size": "s", "state": "none" }, "jds_menu_block": { "open": false }, "prefix-icon-container": { "hidden": true }, "prefix-icon": { "size": "{d_34}", "color": "{d_35}" }, "label-jds-text": { "font-family": "{bodyS}", "color": "{primaryGrey80}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "max-lines": 1, "maxLines": 1, "z-index": 1 }, "label-border-jds-text": { "font-family": "{bodyXs}", "color": "{primaryGrey80}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "max-lines": 1, "hidden": true, "maxLines": 1 }, "current-jds-text": { "font-family": "{bodyS}", "color": "{primaryGrey100}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "max-lines": 1, "hidden": true, "maxLines": 1 }, "placeholder-jds-text": { "font-family": "{bodyS}", "color": "{primaryGrey80}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" }, "chevron-jds-icon": { "size": "{m}", "color": "{primaryGrey80}", "value": "ic_chevron_down", "ic": "ic_chevron_down" }, "chevron-jds-icon-container": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{m}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}", "ic": "ic_chevron_down" }, "helper-jds-text": { "font-family": "{bodyS}", "color": "{primaryGrey80}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" } }, "variant": { "border": { "true": { "feedback-container": { "hidden": true }, "field-container": { "label-jds_text": { "hidden": true } }, "select-container": { "height": "{d_51}", "border-width": "{d_24}", "border-color": "{d_25}", "border-radius": "{d_26}", "background-color": "{d_50}", "padding-top": "{d_27}", "padding-bottom": "{d_28}", "padding-left": "{d_29}", "padding-right": "{d_30}", "behavior": { "hover": { "background-color": "{d_31}" }, "focus": { "background-color": "{d_32}" }, "active": { "background-color": "{d_33}" } } }, "label-jds-text": { "hidden": true }, "label-border-jds-text": { "hidden": false } } }, "open": { "true": { "jds_menu_block": { "open": true }, "chevron-jds-icon": { "value": "ic_chevron_up", "ic": "ic_chevron_up" }, "chevron-jds-icon-container": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{m}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}", "ic": "ic_chevron_up" } } }, "disabled": { "true": { "container": { "disabled": true, "opacity": "{d_36}" }, "select-container": { "disabled": true } } }, "state": { "success": { "feedback-container": { "background-color": "{d_38}", "behavior": { "hover": { "background-color": "{d_39}" }, "focus": { "background-color": "{d_40}" }, "active": { "background-color": "{d_41}" } } }, "select-container": { "border-color": "{d_38}" }, "jds_feedback_block": { "state": "success" } }, "error": { "feedback-container": { "background-color": "{d_42}", "behavior": { "hover": { "background-color": "{d_43}" }, "focus": { "background-color": "{d_44}" }, "active": { "background-color": "{d_45}" } } }, "select-container": { "border-color": "{d_42}" }, "jds_feedback_block": { "state": "error" } }, "warning": { "feedback-container": { "background-color": "{d_46}", "behavior": { "hover": { "background-color": "{d_47}" }, "focus": { "background-color": "{d_48}" }, "active": { "background-color": "{d_49}" } } }, "select-container": { "border-color": "{d_46}" }, "jds_feedback_block": { "state": "warning" } } }, "_isLabelEmpty": { "true": { "label-jds-text": { "hidden": true } } }, "_isPlaceHolderEmpty": { "true": { "placeholder-jds-text": { "hidden": true } } }, "_isValueEmpty": { "false": { "current-jds-text": { "hidden": false }, "placeholder-jds-text": { "hidden": true } } } }, "combination": [{ "true": { "true": { "field-container": { "align-items": "{d_52}" }, "prefix-icon-container": { "hidden": false }, "label-jds-text": { "font-family": "{bodyXs}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}", "padding-left": 0 } }, "false": { "field-container": { "align-items": "{d_53}" }, "label-jds-text": { "font-family": "{bodyXs}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}", "padding-left": 0 } } }, "false": { "true": { "field-container": { "align-items": "{d_54}" }, "prefix-icon-container": { "hidden": false }, "label-jds-text": { "padding-left": "{d_55}" } }, "false": { "field-container": { "align-items": "{d_56}" }, "label-jds-text": { "padding-left": 0 } } } }, { "none": { "true": { "feedback-container": { "background-color": "{d_58}" } } } }, { "false": { "true": { "select-container": { "padding-left": "{d_57}" } } } }], "combination_config": [["_labelFocus", "_hasPrefix"], ["state", "_inputFocus"], ["_hasPrefix", "border"]], "api": { "config": { "open": { "values": [false, true] }, "border": { "values": [false, true] }, "disabled": { "values": [false, true] }, "state": { "type": "JDSFeedbackBlock.state", "values": ["none", "success", "error", "warning"] }, "_labelFocus": { "values": [false, true] }, "_inputFocus": { "values": [false, true] }, "_hasPrefix": { "values": [false, true] }, "_isLabelEmpty": { "values": [false, true] }, "_isPlaceHolderEmpty": { "values": [false, true] }, "_isValueEmpty": { "values": [false, true] } }, "data": { "jds_feedback_block": { "stateText": { "type": "string", "name": "stateText" } }, "prefix-icon": { "value": { "type": "icon", "name": "prefix" } }, "jds_menu_block": { "items": { "type": "list", "name": "items", "doc_description": "This should pass down values to MenuBlock’s items prop. selected determines the default selected value currently.", "object": { "type": "JDSMenuBlockItem.type", "label": "string", "value": "string", "prefix": "icon", "suffix": "icon", "disabled": "boolean" } }, "selectedIndex": { "type": "number", "name": "selectedIndex" }, "offsetX": { "type": "size", "name": "_offsetX" }, "offsetY": { "type": "size", "name": "_offsetY" }, "minWidth": { "type": "size", "name": "_minWidth" }, "maxWidth": { "type": "size", "name": "_maxWidth" }, "maxHeight": { "type": "size", "name": "_maxHeight" } }, "label-jds-text": { "value": { "type": "string", "name": "label" } }, "label-border-jds-text": { "value": { "type": "string", "name": "label" } }, "current-jds-text": { "value": { "type": "string", "name": "current" } }, "placeholder-jds-text": { "value": { "type": "string", "name": "placeholder" } }, "helper-jds-text": { "value": { "type": "string", "name": "helperText" } } }, "events": { "active-line-container": { "onAppear": { "name": "_onAppear", "platform": "ios" } }, "select-container": { "onClick": "onOpen" }, "jds_menu_block": { "onSelect": "onSelect", "onClose": "onClose" } }, "a11y": { "select-container": { "properties": { "role": { "value": "combobox" }, "aria-label": { "name": "ariaLabel", "prop": "label" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" }, "aria-expanded": { "name": "_ariaExpanded", "prop": "open" }, "aria-controls": { "name": "ariaControls", "value": "container" } } }, "jds_menu_block": { "name": "items", "repeating": { "ariaLabel": "itemAriaLabel", "ariaDescribedby": { "name": "itemAriaDescribedby", "platform": "web,ios" } } } } } };

const PROP_MAP$4 = (props) => {
  return {
    state: {
      properties: {
        state: props.state
      },
      variations: {
        error: {
          stateText: props.stateConfig?.errorText || props.stateText
        },
        success: {
          stateText: props.stateConfig?.successText || props.stateText
        },
        warning: {
          stateText: props.stateConfig?.warningText || props.stateText
        },
        required: {
          stateText: props.stateConfig?.requiredText
        }
      }
    },
    items: {
      properties: {
        items: props.items || []
      }
    }
  };
};
const SELECT_CONTAINER_SELECTOR = 'div[data-testid="JDSDropdown-select-container"]';
const OFFSET = 12;
const withLogic$k = (Component) => (userProps) => {
  const props = modifyProps(userProps, PROP_MAP$4);
  const [distance, setDistance] = useState({
    x: 0,
    y: 0,
    width: 0,
    height: 0
  });
  const [isPositionReady, setIsPositionReady] = useState(false);
  const { selectedIndex, items = [], onSelect } = props;
  const { index, onClick } = useSelected(selectedIndex);
  const { selected, toggle, close } = useToggle(false);
  const { element, rootRef } = useRootRef();
  const selectContainer = element?.querySelector(
    SELECT_CONTAINER_SELECTOR
  );
  const calculatePositions = () => {
    if (selectContainer) {
      const {
        height,
        left: x,
        top: y,
        width = 0
      } = setPositions(selectContainer, void 0);
      setDistance({ x, y, width, height });
      setIsPositionReady(true);
    }
  };
  const handleOpen = () => {
    calculatePositions();
    toggle(true);
  };
  useEffect(() => {
    if (!selected) {
      setIsPositionReady(false);
      selectContainer?.focus?.();
    }
  }, [selected]);
  const hasPrefix = Boolean(props.prefix);
  const currentIdx = props.value ? items.findIndex((item) => item.value === props.value) : index;
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        label: getRequiredLabel(props.label, props.required),
        current: items[currentIdx]?.label,
        open: selected && isPositionReady,
        onSelect: (index2) => {
          onClick(index2);
          onSelect?.(
            index2,
            items[index2]?.value || items[index2]?.label
          );
        },
        rootRef,
        _hasPrefix: hasPrefix,
        _inputFocus: currentIdx >= 0,
        selectedIndex: currentIdx,
        onClose: () => {
          close();
          props.onClose?.();
        },
        onOpen: () => {
          handleOpen();
          props.onOpen?.();
        },
        _labelFocus: Boolean(currentIdx >= 0 || props.placeholder),
        _offsetX: distance.x,
        _offsetY: distance.y + OFFSET,
        _maxWidth: distance.width,
        _maxHeight: distance.height,
        _isValueEmpty: !items[currentIdx]?.label,
        _isPlaceHolderEmpty: !props.placeholder
      }
    }
  );
};

const Component$m = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$l;
  const { open = false, border = false, disabled = false, state = "undefined", onOpen = noop, onSelect = noop, onClose = noop, ariaLabel = props.label?.toString(), ariaControls = "container", _ariaExpanded = props.open?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ open, border, disabled, state, onOpen, onSelect, onClose, ariaLabel, ariaControls, _ariaExpanded, ...rest }, componentTag },
    "JDSDropdown",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const InputDropdown = withLogic$k(Component$m);
InputDropdown.displayName = "InputDropdown";
InputDropdown.slotName = "jds_dropdown";

const sdl$k = { "metadata": { "version": "1.0.0", "id": "dropdown-menu-item-1.0.0", "name": "JDSDropdownMenuItemMobile", "platform": "android", "layerName": "jds_dropdown_menu_item_mobile", "internal": true }, "hierarchy": { "root-container": [{ "container": [{ "prefix-container": ["prefix-slot"] }, { "content-container": ["label-jds-text", "description-jds-text"] }, { "suffix-container": ["suffix-jds-text", "icon"] }] }, { "jds_dropdown_menu_submenu": ["menu-group-slot"] }] }, "base": { "root-container": { "hidden": false, "width": "{d_24}" }, "container": { "hidden": false, "flex-direction": "{d_1}", "align-items": "{d_16}", "gap": "{d_3}", "background-color": "{d_4}", "width": "{d_0}", "padding-top": "{d_8}", "padding-right": "{d_9}", "padding-bottom": "{d_10}", "padding-left": "{d_11}", "opacity": "", "behavior": { "hover": { "background-color": "{d_5}" }, "active": { "background-color": "{d_6}" }, "focus": { "border-radius": "{d_23}" } } }, "menu-group-slot": { "hidden": false }, "suffix-container": { "hidden": false }, "prefix-container": { "hidden": false, "align-self": "{d_17}" }, "prefix-slot": { "hidden": false }, "content-container": { "hidden": false, "flex": 1, "overflow": "hidden", "justify-content": "{d_14}", "align-items": "{d_15}", "flex-direction": "{d_2}" }, "icon": { "size": "{d_19}", "color": "{d_18}", "value": "ic_chevron_right", "behavior": { "active": { "color": "{d_20}" } }, "hidden": true }, "jds_dropdown_menu_submenu": { "hidden": true }, "label-jds-text": { "font-family": "{bodyS}", "color": "{primaryGrey100}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": false, "behavior": { "active": { "color": "{primaryInverse}" } } }, "description-jds-text": { "font-family": "{bodyXxs}", "color": "{primaryGrey100}", "font-size": "{bodyXxs}", "line-height": "{bodyXxs}", "letter-spacing": "{bodyXxs}", "font-weight": "{bodyXxs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": false, "behavior": { "active": { "color": "{primaryInverse}" } } }, "suffix-jds-text": { "font-family": "{bodyXxs}", "color": "{primaryGrey80}", "font-size": "{bodyXxs}", "line-height": "{bodyXxs}", "letter-spacing": "{bodyXxs}", "font-weight": "{bodyXxs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": false, "behavior": { "active": { "color": "{primaryInverse}" } } } }, "variant": { "_labelTextWrap": { "false": { "label-jds-text": { "max-lines": 1, "maxLines": 1 } } }, "disabled": { "true": { "container": { "disabled": true, "opacity": "{d_22}" } } }, "selected": { "true": { "container": { "background-color": "{d_12}", "behavior": { "hover": { "background-color": "{d_13}" } } }, "icon": { "color": "{d_21}" }, "label-jds-text": { "color": "{primaryInverse}" }, "description-jds-text": { "color": "{primaryInverse}" }, "suffix-jds-text": { "color": "{primaryInverse}" } } }, "_hasSubMenu": { "true": { "icon": { "hidden": false }, "suffix-jds-text": { "hidden": true } } } }, "api": { "children": { "prefix-slot": { "name": "prefix", "accepts": ["jds_image", "jds_avatar", "jds_icon"], "max": 1 }, "menu-group-slot": { "name": "children", "accepts": ["jds_dropdown_menu_group"] } }, "events": { "container": { "onClick": "onClick" } }, "data": { "jds_dropdown_menu_submenu": { "offsetX": { "type": "string", "name": "_offsetX" }, "offsetY": { "type": "string", "name": "_offsetY" }, "children": { "type": "slot", "name": "children" } }, "label-jds-text": { "value": { "type": "string", "name": "label" } }, "description-jds-text": { "value": { "type": "string", "name": "description" } }, "suffix-jds-text": { "value": { "type": "string", "name": "suffix" } } }, "config": { "selected": { "values": [false, true] }, "disabled": { "values": [false, true] }, "_hasSubMenu": { "values": [false, true] }, "_labelTextWrap": { "values": [true, false] } }, "a11y": { "container": { "properties": { "role": { "value": "menuitem" }, "aria-label": { "name": "ariaLabel", "prop": "label" }, "aria-haspopup": { "name": "_ariaHaspopup", "prop": "_hasSubMenu" }, "aria-expanded": { "name": "_ariaExpanded", "prop": "selected" } } } } } };

const withLogic$j = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$l = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$k;
  const { selected = false, disabled = false, onClick = noop, ariaLabel = props.label?.toString(), _ariaHaspopup = props._hasSubMenu?.toString(), _ariaExpanded = props.selected?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ selected, disabled, onClick, ariaLabel, _ariaHaspopup, _ariaExpanded, ...rest }, componentTag },
    "JDSDropdownMenuItemMobile",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const DropdownMenuItemMobile = withLogic$j(Component$l);
DropdownMenuItemMobile.displayName = "DropdownMenuItemMobile";
DropdownMenuItemMobile.slotName = "jds_dropdown_menu_item_mobile";

const sdl$j = { "metadata": { "version": "1.0.0", "id": "file-uploader-1.0.0", "name": "JDSFileUploader", "layerName": "jds_file_uploader" }, "hierarchy": { "container": ["jds_file_uploader_control", "jds_file_uploader_panel"] }, "base": { "container": { "flex-direction": "{f_0}", "justify-content": "{f_1}", "align-items": "{f_2}", "width": "{f_3}", "gap": "{f_4}", "opacity": "{f_5}" } }, "variant": { "kind": { "collapsible": { "jds_file_uploader_panel": { "kind": "collapsible" } } } }, "combination": [{}], "combination_config": [[]], "api": { "config": { "kind": { "type": "JDSFileUploaderPanel.kind", "values": ["classic", "collapsible"] }, "expanded": { "values": [false, true] }, "showDivider": { "values": [true, false] } }, "data": { "jds_file_uploader_control": { "label": { "type": "string", "name": "label" }, "helperText": { "type": "string", "name": "helperText" }, "uploadButtonLabel": { "type": "string", "name": "uploadButtonLabel" } }, "jds_file_uploader_panel": { "message": { "type": "string", "name": "message" }, "value": { "type": "float", "name": "value" }, "showDivider": { "type": "boolean", "name": "showDivider" }, "expanded": { "type": "boolean", "name": "expanded" }, "items": { "type": "list", "name": "items", "object": { "state": "JDSFileUploaderItem.state", "message": "string" } } } }, "events": { "jds_file_uploader_control": { "onInfoClick": "onInfoClick", "onClick": "onClick" }, "jds_file_uploader_panel": { "onClick": "onExpand", "onClose": "onClose" } }, "a11y": { "jds_file_uploader_control": { "properties": { "uploadButtonAriaLabel": "uploadButtonAriaLabel" } }, "jds_file_uploader_panel": { "properties": { "panelAriaLabel": "panelAriaLabel", "panelAriaDescribedBy": { "name": "panelAriaDescribedBy", "platform": "web,ios" }, "panelSuffixAriaLabel": "panelSuffixAriaLabel" }, "name": "items", "repeating": { "ariaLabel": "itemAriaLabel", "ariaDescribedby": { "name": "itemAriaDescribedby", "platform": "web,ios" } } } } } };

const withLogic$i = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$k = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$j;
  const { kind = "undefined", expanded = false, showDivider = true, onInfoClick = noop, onClick = noop, onExpand = noop, onClose = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ kind, expanded, showDivider, onInfoClick, onClick, onExpand, onClose, ...rest }, componentTag },
    "JDSFileUploader",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const FileUploader = withLogic$i(Component$k);
FileUploader.displayName = "FileUploader";
FileUploader.slotName = "jds_file_uploader";

const sdl$i = { "metadata": { "version": "1.0.0", "id": "footer-1.0.0", "name": "JDSFooter", "layerName": "jds_footer", "platform": "web" }, "hierarchy": { "container": [{ "main-container": [{ "content-container": ["content-slot"] }, { "social-links-container": ["jds_footer_icon_links", "jds_footer_market_links"] }] }, { "bottom-container": ["jds_divider", "jds_bottom_footer"] }] }, "base": { "container": { "flex-direction": "{f_0}", "align-items": "{f_1}", "size": "{f_2}", "background-color": "{f_3}" }, "main-container": { "flex-direction": "{f_4}", "justify-content": "{f_5}", "align-items": "{f_6}", "gap": "{f_7}", "size": "{f_8}", "padding-top": "{f_9}", "padding-bottom": "{f_10}", "padding-left": "{f_11}", "padding-right": "{f_12}" }, "social-links-container": { "padding-top": "{f_13}", "flex-direction": "{f_14}", "gap": "{f_15}", "width": "{f_28}" }, "bottom-container": { "flex-direction": "{f_16}", "align-items": "{f_17}", "width": "{f_18}", "gap": 0 }, "jds_divider": { "pad": "none" }, "jds_bottom_footer": { "_platform": "desktop" }, "content-container": { "width": "{f_19}" }, "content-slot": { "width": "{f_20}" } }, "variant": { "_platform": { "mobile": { "bottom-container": { "gap": "{f_21}" }, "jds_bottom_footer": { "_platform": "mobile" }, "main-container": { "flex-direction": "{f_22}", "justify-content": "{f_23}", "padding-top": "{f_24}", "padding-bottom": "{f_25}", "padding-left": "{f_26}", "padding-right": "{f_27}" } } }, "_hasMainContainerProps": { "false": { "main-container": { "hidden": true } } }, "_hasContentSlot": { "false": { "content-container": { "hidden": true } } }, "_hasSocialLinksContainer": { "false": { "social-links-container": { "hidden": true } } }, "_hasFooterIconLinks": { "false": { "jds_footer_icon_links": { "hidden": true } } } }, "api": { "config": { "_platform": { "values": ["desktop", "mobile"] }, "_hasMainContainerProps": { "values": [true, false] }, "_hasContentSlot": { "values": [true, false] }, "_hasSocialLinksContainer": { "values": [true, false] }, "_hasFooterIconLinks": { "values": [true, false] } }, "children": { "content-slot": { "name": "children", "accepts": ["any"] } }, "data": { "main_container": { "value": { "name": "links", "type": "object", "object": { "links": "list" } } }, "social-links-container": { "marketplace": { "type": "object", "name": "marketplace", "object": { "assets": "JDSFooterMarketLinks.assets", "title": "string" } }, "social": { "type": "object", "name": "social", "object": { "links": "JDSFooterIconLinks.links", "title": "string" } } }, "jds_footer_icon_links": { "links": { "name": "social.links", "type": "list" }, "title": { "name": "social.title", "type": "string" } }, "jds_footer_market_links": { "assets": { "name": "marketplace.assets", "type": "list" }, "title": { "name": "marketplace.title", "type": "string" } }, "jds_bottom_footer": { "copyright": { "type": "JDSBottomFooter.copyright", "name": "copyright" }, "copyrightText": { "type": "string", "name": "copyrightText" }, "informationalLinks": { "type": "JDSBottomFooter.informationalLinks", "name": "bottomLinks" }, "logo": { "type": "icon", "name": "logo" } } }, "a11y": { "container": { "properties": { "role": { "name": "role" }, "aria-label": { "name": "ariaLabel", "value": "Footer" } } }, "jds_bottom_footer": { "properties": { "copyRightAriaLabel": "copyRightAriaLabel", "copyRightAriaDescribedby": { "name": "copyRightAriaDescribedby", "platform": "web,ios" } } } } } };

const PROP_MAP$3 = (props) => ({
  marketplace: {
    properties: {
      title: props.marketplace?.title,
      assets: props.marketplace?.stores?.map((store) => ({
        image: store.badgeAsset,
        href: store.href
      }))
    }
  },
  mainLinks: {
    properties: {
      links: props.mainLinks?.map((l) => ({
        title: l.heading,
        subLinks: l.links
      }))
    }
  }
});

const FooterAccordion = (props) => {
  return /* @__PURE__ */ jsx(Accordion, { allowMultiple: true, children: props.links?.map((link) => /* @__PURE__ */ jsx(AccordionPanel, { header: link.title, children: /* @__PURE__ */ jsx(FooterLinks, { links: link.subLinks }) }, link.title)) });
};

const withLogic$h = (Component) => (userProps) => {
  const props = modifyProps(userProps, PROP_MAP$3);
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        _platform: Devices.isDesktop() ? "desktop" : "mobile",
        _hasMainContainerProps: Boolean(
          props.marketplace || props.links || props.social
        ),
        copyright: props.copyright,
        _hasContentSlot: Boolean(props.links),
        _hasFooterIconLinks: Boolean(props.social),
        _hasSocialLinksContainer: Boolean(props.social || props.marketplace),
        children: Devices.isDesktop() ? /* @__PURE__ */ jsx(FooterLinksGrid, { links: props.links }) : /* @__PURE__ */ jsx(FooterAccordion, { links: props.links })
      }
    }
  );
};

const Component$j = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$i;
  const { ariaLabel = "Footer", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ ariaLabel, ...rest }, componentTag },
    "JDSFooter",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const Footer = withLogic$h(Component$j);
Footer.displayName = "Footer";
Footer.slotName = "jds_footer";

const sdl$h = { "metadata": { "version": "1.0.0", "id": "header-mobile-1.0.0", "name": "JDSHeaderMobile", "layerName": "jds_header_mobile" }, "hierarchy": { "container": [{ "header-container": [{ "left-container": ["prefix-jds_button", { "prefix-container": [{ "logo-container": ["logo-slot", "logo-jds-text"] }, "prefix-slot", "name-jds-text"] }] }, { "right-container": ["jds_search_box", { "suffix-container": ["search-jds_action_button", { "icon-links-container": ["icon-links-jds_button"] }, "avatar-slot"] }, "suffix-jds_action_button", "suffix-slot"] }] }, "jds_search_results", "tabs-slot"] }, "base": { "container": { "min-width": "{h_0}", "flex-direction": "{h_1}" }, "header-container": { "min-width": "{h_2}", "width": "{h_3}", "background-color": "{h_4}", "flex-direction": "{h_5}", "justify-content": "{h_6}", "align-items": "{h_7}", "padding-left": "{h_43}", "padding-top": "{h_9}", "padding-right": "{h_44}", "padding-bottom": "{h_11}", "height": "{h_13}", "gap": "{h_45}" }, "left-container": { "flex-direction": "{h_14}", "justify-content": "{h_15}", "align-items": "{h_16}" }, "prefix-container": { "flex-direction": "{h_18}", "justify-content": "{h_19}", "align-items": "{h_20}", "gap": "{h_21}" }, "prefix-jds_button": { "size": "medium" }, "logo-container": { "hidden": false, "flex-direction": "{h_22}", "justify-content": "{h_23}", "align-items": "{h_24}", "gap": "{h_25}" }, "jds_search_box": { "prefix": "ic_search", "kind": "header", "flex": 1 }, "right-container": { "flex-direction": "{h_31}", "justify-content": "{h_32}", "align-items": "{h_33}", "gap": "{h_47}" }, "suffix-container": { "flex-direction": "{h_35}", "justify-content": "{h_36}", "align-items": "{h_37}", "gap": "{h_48}" }, "suffix-jds_action_button": { "hidden": true, "icon": "ic_close", "size": "medium" }, "icon-links-container": { "flex-direction": "{h_39}", "justify-content": "{h_40}", "align-items": "{h_41}", "gap": "{h_42}", "hidden": false }, "icon-links-jds_button": { "size": "medium" }, "search-jds_action_button": { "hidden": true, "icon": "ic_search", "size": "medium" }, "jds_search_results": { "open": false, "_maxWidth": 784 }, "logo-jds-text": { "font-family": "{headingXxs}", "color": "{primaryInverse}", "font-size": "{headingXxs}", "line-height": "{headingXxs}", "letter-spacing": "{headingXxs}", "font-weight": "{headingXxs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" }, "name-jds-text": { "font-family": "{bodyS}", "color": "{primaryInverse}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "max-lines": 1, "maxLines": 1 } }, "variant": { "_variant": { "active_search": { "prefix-slot": { "hidden": true }, "avatar-slot": { "hidden": true }, "suffix-jds_action_button": { "hidden": false }, "jds_search_box": { "prefix": "ic_search", "flex": 1 }, "left-container": { "hidden": true }, "icon-links-container": { "hidden": true }, "suffix-slot": { "hidden": true }, "jds_search_results": { "open": true }, "prefix-jds_button": { "hidden": true }, "name-jds-text": { "hidden": true }, "logo-jds-text": { "hidden": true } } }, "search": { "false": { "left-container": { "flex": 1 }, "jds_search_box": { "hidden": true }, "search-jds_action_button": { "hidden": true } } }, "_IsLinksEmpty": { "true": { "icon-links-container": { "hidden": true } } }, "_isBrandMissing": { "true": { "logo-container": { "hidden": true } } }, "_isPrefixButtonMissing": { "true": { "header-container": { "padding-left": "{h_50}" } } } }, "combination": [{ "true": { "false": { "left-container": { "flex": 1 }, "jds_search_box": { "hidden": true }, "search-jds_action_button": { "hidden": false } } } }], "combination_config": [["search", "expandedSearch"]], "api": { "config": { "_variant": { "values": ["default", "active_search"] }, "search": { "values": [true, false] }, "expandedSearch": { "values": [true, false] }, "searchActive": { "values": [false, true] }, "_IsLinksEmpty": { "values": [false, true] }, "_isBrandMissing": { "values": [false, true] }, "_isPrefixButtonMissing": { "values": [false, true] } }, "data": { "prefix-jds_button": { "icon": { "name": "prefix", "type": "icon" } }, "icon-links-container": { "value": { "type": "list", "name": "icons", "object": { "icon": "icon", "onClick": "event" } } }, "icon-links-jds_button": { "icon": { "name": "icons.icon", "type": "icon" } }, "jds_search_box": { "label": { "type": "string", "name": "searchLabel" }, "suffix": { "type": "icon", "name": "searchSuffix", "function": true }, "value": { "type": "string", "name": "query" }, "showBack": { "type": "boolean", "name": "searchShowBack" }, "focusRequester": { "type": "focusRequester", "name": "focusRequester", "platform": "android" }, "imeAction": { "type": "imeAction", "name": "imeAction", "platform": "android" } }, "jds_search_results": { "offsetX": { "type": "number", "name": "_offsetX" }, "offsetY": { "type": "number", "name": "_offsetY" }, "results": { "type": "list", "name": "searchResults", "object": { "icon": "icon", "label": "string" } }, "header": { "type": "string", "name": "searchResultHeader" }, "query": { "type": "string", "name": "query" }, "headerAction": { "type": "string", "name": "searchResultHeaderAction" } }, "logo-jds-text": { "value": { "type": "string", "name": "brandLabel" } }, "name-jds-text": { "value": { "type": "string", "name": "pageTitle" } } }, "children": { "avatar-slot": { "name": "avatar", "accepts": ["jds_avatar", "jds_link"], "max": 1 }, "prefix-slot": { "name": "pageTitlePrefix", "accepts": ["jds_avatar", "jds_icon", "jds_image"], "max": 1 }, "tabs-slot": { "name": "tabs", "accepts": ["jds_tab"], "max": 1 }, "suffix-slot": { "name": "suffix", "accepts": ["jds_text", "jds_button", "jds_link"], "max": 1 }, "logo-slot": { "name": "logo", "accepts": ["jds_icon", "jds_image", "jds_link"], "max": 1 } }, "events": { "container": { "_searchActive.onSearchActiveChange": "onSearchActiveChange" }, "header-container": { "onAppear": { "name": "_onAppear", "platform": "ios" } }, "logo-container": { "onClick": "logoOnClick" }, "avatar-slot": { "onClick": "avatarOnClick" }, "prefix-jds_button": { "onClick": "prefixOnClick" }, "suffix-jds_action_button": { "onClick": "suffixOnClick" }, "jds_search_box": { "onBlur": "onSearchBlur", "onFocus": "onSearchFocus", "onChange": "onSearchChange", "onSuffixClick": "onSearchBoxSuffixClick", "onBack": "onSearchBoxPrefixClick" }, "search-jds_action_button": { "onClick": "onSearchIconClick" }, "jds_search_results": { "onHeaderActionClick": "onSearchResultHeaderActionClick", "onClick": "onSearchResultClick" } }, "a11y": { "icon-links-container": { "name": "icons", "repeating": { "ariaLabel": "iconLinkAriaLabel", "ariaDescribedby": { "name": "iconLinkAriaDescribedby", "platform": "web,ios" } } }, "jds_search_results": { "name": "searchResults", "repeating": { "ariaLabel": "searchResultAriaLabel", "ariaDescribedby": { "name": "searchResultAriaDescribedby", "platform": "web,ios" } } }, "icon-links-jds_button": { "properties": { "ariaLabel": "icons.iconLinkAriaLabel", "ariaDescribedby": "icons.iconLinkAriaDescribedby" } }, "prefix-jds_button": { "properties": { "ariaLabel": "prefixAriaLabel", "ariaDescribedby": { "name": "prefixAriaDescribedby", "platform": "web,ios" } } }, "suffix-jds_action_button": { "properties": { "ariaLabel": "suffixAriaLabel", "ariaDescribedby": { "name": "suffixAriaDescribedby", "platform": "web,ios" } } }, "jds_search_box": { "properties": { "prefixAriaLabel": "searchBoxPrefixAriaLabel", "suffixAriaLabel": "searchBoxSuffixAriaLabel", "ariaLabel": "searchAriaLabel" } }, "search-jds_action_button": { "properties": { "ariaLabel": { "name": "searchButtonAriaLabel", "prop": "dynamicButtonText" }, "ariaDescribedby": { "name": "searchButtonAriaDescribedby", "platform": "web,ios" } } } } } };

const withLogic$g = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$i = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$h;
  const { search = true, expandedSearch = true, searchActive = false, onSearchActiveChange = noop, logoOnClick = noop, avatarOnClick = noop, prefixOnClick = noop, suffixOnClick = noop, onSearchBlur = noop, onSearchFocus = noop, onSearchChange = noop, onSearchBoxSuffixClick = noop, onSearchBoxPrefixClick = noop, onSearchIconClick = noop, onSearchResultHeaderActionClick = noop, onSearchResultClick = noop, searchButtonAriaLabel = props.dynamicButtonText?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ search, expandedSearch, searchActive, onSearchActiveChange, logoOnClick, avatarOnClick, prefixOnClick, suffixOnClick, onSearchBlur, onSearchFocus, onSearchChange, onSearchBoxSuffixClick, onSearchBoxPrefixClick, onSearchIconClick, onSearchResultHeaderActionClick, onSearchResultClick, searchButtonAriaLabel, ...rest }, componentTag },
    "JDSHeaderMobile",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const HeaderMobile = withLogic$g(Component$i);
HeaderMobile.displayName = "HeaderMobile";
HeaderMobile.slotName = "jds_header_mobile";

const sdl$g = { "metadata": { "version": "1.0.0", "id": "input-code-1.0.0", "name": "JDSInputCode", "layerName": "jds_input_code" }, "hierarchy": { "container": [{ "field-container": ["jds_input_code_item"] }, "jds_feedback_block", "helper-jds-text"] }, "base": { "container": { "flex-direction": "{i_0}", "justify-content": "{i_1}", "align-items": "{i_2}", "width": "{i_3}", "gap": "{i_4}", "opacity": "{i_11}" }, "field-container": { "flex-direction": "{i_5}", "justify-content": "{i_6}", "align-items": "{i_7}", "width": "{i_8}", "gap": "{i_9}" }, "jds_input_code_item": { "flex": 1 }, "jds_feedback_block": { "size": "s", "state": "none" }, "helper-jds-text": { "font-family": "{bodyXs}", "color": "{primaryGrey80}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" } }, "variant": { "disabled": { "true": { "container": { "disabled": true, "opacity": "{i_10}" } } }, "state": { "success": { "jds_feedback_block": { "state": "success" } }, "error": { "jds_feedback_block": { "state": "error" } }, "warning": { "jds_feedback_block": { "state": "warning" } } }, "autoComplete": { "true": { "jds_input_code_item": { "autoComplete": "true" } } } }, "combination": [{}], "combination_config": [[]], "api": { "config": { "disabled": { "values": [false, true] }, "autoComplete": { "values": [false, true], "doc_description": "It can be used to enable or disable the autocomplete feature in the inputcode.", "platform": "web" }, "autofocus": { "values": [false, true], "doc_description": "It can be used to Focus on the Inputcode.", "platform": "web" }, "state": { "type": "JDSFeedbackBlock.state", "values": ["none", "success", "error", "warning"] } }, "data": { "container": { "_codes.value": { "type": "string", "name": "value" }, "_codes.placeholder": { "type": "string", "name": "placeholder" } }, "field-container": { "value": { "type": "list", "name": "_codes", "object": { "value": "string", "placeholder": "string" } }, "length": { "type": "number", "name": "codeLength", "doc_description": "It can be used to control length of Code." } }, "jds_input_code_item": { "state": { "type": "JDSFeedbackBlock.state", "name": "state", "doc_description": "It can be used to choose between states i.e. 'success','warning','error','none'.By default it is 'none'." }, "disabled": { "type": "boolean", "name": "disabled", "doc_description": "It can be used to enable or disable Code." }, "autofocus": { "type": "boolean", "name": "autofocus", "doc_description": "It can be used to enable the autoFocus on InputCode.", "platform": "web" }, "value": { "type": "string", "name": "codes.value" }, "placeholder": { "type": "string", "name": "codes.placeholder" }, "required": { "type": "boolean", "name": "required", "doc_description": "It can be used to make input required." }, "secureText": { "type": "boolean", "name": "secureText" }, "focusRequester": { "type": "focusRequester", "name": "focusRequester", "platform": "android" } }, "jds_feedback_block": { "stateText": { "type": "string", "name": "stateText", "doc_description": "It displays message with respect to its [state] selected." } }, "helper-jds-text": { "value": { "type": "string", "name": "helperText", "doc_description": "It displays helper text of Code." } } }, "events": { "jds_input_code_item": { "onFocus": "onFocus", "onBlur": "onBlur", "onChange": "onChange", "onBackPress": { "name": "onBackPress", "platform": "android" }, "onSubmit": "onSubmit", "onKeydown": { "name": "onKeydown", "platform": "web" }, "onPaste": "onPaste", "onInvalid": "onInvalid" } }, "a11y": { "container": { "properties": { "role": { "value": "input" }, "aria-label": { "name": "ariaLabel" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" } } }, "jds_input_code_item": { "properties": { "ariaLabel": { "name": "codeAriaLabel", "platform": "android" } } } } } };

const withLogic$f = (Component) => (props) => {
  const { value: propValue, onChange, autofocus, ...rest } = props;
  const [element, setElement] = useState(null);
  const rootRef = useCallback((element2) => {
    if (element2) {
      setElement(element2);
    }
  }, []);
  const { inputState, stateText, onInvalid } = useInputState(
    props.state,
    props.required,
    props.onInvalid,
    props.stateConfig,
    props.stateText
  );
  const [value, setValue] = useState(propValue?.split("") || []);
  useState(propValue || "");
  const [updatedValue, setUpdatedValue] = useState("");
  const inputs = Array.from(element?.getElementsByTagName("input") || []);
  const autofocusExecuted = useRef(false);
  useEffect(() => {
    if (autofocus && !autofocusExecuted.current && inputs.length > 0) {
      autofocusExecuted.current = true;
      inputs[0]?.focus();
      inputs[0]?.select();
    }
  }, [autofocus, inputs]);
  useEffect(() => {
    setValue(propValue?.split("") || []);
    setUpdatedValue(propValue || "");
  }, [propValue]);
  const focusNext = (i) => {
    if (i + 1 < inputs.length) {
      inputs[i + 1]?.focus();
      inputs[i + 1]?.select();
    }
  };
  const focusPrev = (i) => {
    if (i > 0) {
      inputs[i - 1]?.focus();
      inputs[i - 1]?.select();
    } else {
      inputs[0]?.focus();
      inputs[0]?.select();
    }
  };
  const handleChange = (ev, i) => {
    const inputValue = ev.target.value;
    const newValue = [...value];
    if (inputValue.length > 1) {
      Array.from({ length: inputValue.length }).forEach((_, idx) => {
        newValue[idx] = inputValue[idx];
      });
      const lastUpdatedIndex = i + inputValue.length - 1;
      inputs[lastUpdatedIndex]?.focus();
      inputs[lastUpdatedIndex]?.select();
    } else {
      newValue[i] = inputValue.slice(-1) || "";
      focusNext(i);
    }
    setValue(newValue);
    setUpdatedValue(newValue.join(""));
    if (props.onChange) {
      const event = {
        ...ev,
        target: {
          ...ev.target,
          value: newValue.join("")
        }
      };
      props.onChange(event);
    }
  };
  const handleFocus = (ev, i) => {
    const target = ev.target;
    const selectValue = () => {
      if (document.activeElement === target) {
        target.select();
        setTimeout(selectValue, 0);
      }
    };
    selectValue();
  };
  const handleKeyDown = (ev, i) => {
    const allowedKeys = [
      "Backspace",
      "Delete",
      "ArrowLeft",
      "ArrowRight",
      "Tab"
    ];
    const isPasteShortcut = (ev.ctrlKey || ev.metaKey) && ev.key.toLowerCase() === "v";
    if (!/^\d$/.test(ev.key) && !allowedKeys.includes(ev.key) && !isPasteShortcut) {
      ev.preventDefault();
      return;
    }
    switch (ev.key) {
      case "Backspace":
      case "Delete": {
        const newValue = [...value];
        if (!ev.currentTarget.value && i > 0) {
          newValue[i - 1] = "";
          focusPrev(i);
        } else {
          newValue[i] = "";
        }
        setValue(newValue);
        setUpdatedValue(newValue.join(""));
        if (props.onChange) {
          props.onChange({
            ...ev,
            target: {
              ...ev.target,
              value: newValue.join("")
            }
          });
        }
        ev.preventDefault();
        break;
      }
      case "ArrowLeft":
        focusPrev(i);
        ev.preventDefault();
        break;
      case "ArrowRight":
        focusNext(i);
        ev.preventDefault();
        break;
      case "Tab":
        if (ev.shiftKey) {
          focusPrev(i);
        } else {
          focusNext(i);
        }
        ev.preventDefault();
        break;
    }
  };
  const handlePaste = (ev, i) => {
    ev.preventDefault();
    const clipboardValue = ev.clipboardData.getData("text").replace(/\D/g, "").split("").slice(0, props.codeLength);
    const newValue = [...Array(props.codeLength).fill(""), ...value].slice(
      0,
      props.codeLength
    );
    let lastIndex = i;
    clipboardValue.forEach((char, idx) => {
      if (i + idx < newValue.length) {
        newValue[i + idx] = char;
        lastIndex = i + idx;
      }
    });
    setValue(newValue);
    setUpdatedValue(newValue.join(""));
    if (props.onChange) {
      props.onChange({
        ...ev,
        target: {
          ...ev.target,
          value: newValue.join("")
        }
      });
    }
    setTimeout(() => {
      inputs[lastIndex]?.focus();
      inputs[lastIndex]?.select();
    }, 0);
  };
  const handleInput = (ev, i) => {
    const inputValue = ev.target.value;
    if (inputValue.length > 1) {
      const autofillValues = inputValue.split("").slice(0, props.codeLength);
      const newValue = autofillValues.concat(
        value.slice(autofillValues.length)
      );
      setValue(newValue);
      setUpdatedValue(newValue.join(""));
      const lastIndex = autofillValues.length - 1;
      inputs[lastIndex]?.focus();
      inputs[lastIndex]?.select();
      if (props.onChange) {
        const event = {
          ...ev,
          target: {
            ...ev.target,
            value: newValue.join("")
          }
        };
        props.onChange(event);
      }
    } else if (inputValue) {
      const newValue = [...value];
      newValue[i] = inputValue.slice(-1);
      setValue(newValue);
      setUpdatedValue(newValue.join(""));
      const nextFocusIndex = Math.min(
        newValue.join("").length,
        props.codeLength - 1
      );
      inputs[nextFocusIndex]?.focus();
      inputs[nextFocusIndex]?.select();
      if (props.onChange) {
        const event = {
          ...ev,
          target: {
            ...ev.target,
            value: newValue.join("")
          }
        };
        props.onChange(event);
      }
    } else {
      handleChange(ev, i);
    }
  };
  const codes = Array.from({ length: props.codeLength || 6 }).map((_, i) => ({
    placeholder: props.placeholder?.[i] || (i + 1).toString(),
    value: value[i] || "",
    onChange: (ev) => handleChange(ev, i),
    onFocus: (ev) => handleFocus(ev),
    onKeyDown: (ev) => handleKeyDown(ev, i),
    onPaste: (ev) => handlePaste(ev, i),
    onInput: (ev) => handleInput(ev, i)
  }));
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...rest,
        rootRef,
        state: inputState,
        stateText,
        onInvalid,
        _codes: codes,
        ariaLabel: props.ariaLabel || `Input code of length ${props.codeLength}`
      }
    }
  );
};

const Component$h = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$g;
  const { disabled = false, autoComplete = false, autofocus = false, state = "undefined", onFocus = noop, onBlur = noop, onChange = noop, onBackPress = noop, onSubmit = noop, onPaste = noop, onInvalid = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ disabled, autoComplete, autofocus, state, onFocus, onBlur, onChange, onBackPress, onSubmit, onPaste, onInvalid, ...rest }, componentTag },
    "JDSInputCode",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const InputCode = withLogic$f(Component$h);
InputCode.displayName = "InputCode";
InputCode.slotName = "jds_input_code";

const sdl$f = { "metadata": { "version": "1.0.0", "id": "input-date-1.0.0", "name": "JDSInputDate", "layerName": "jds_input_date", "description": "", "usage": "Input date component is used to help users enter a memorable date or one they can easily look up for example a date of birth or an expiration date of the credit card." }, "hierarchy": { "container": [{ "outer-container": [{ "field-container": ["label-jds-text", { "input-container": [{ "dd-container": ["dd-jds_input", { "dd-active-line-container": ["dd-feedback-container"] }] }, "left-slash-container", { "mm-container": ["mm-jds_input", { "mm-active-line-container": ["mm-feedback-container"] }] }, "right-slash-container", { "yy-container": ["yy-jds_input", { "yy-active-line-container": ["yy-feedback-container"] }] }] }] }, { "calendar-container": ["calendar-jds_action_button"] }] }, { "bottom-container": ["jds_feedback_block", "helper-jds-text", "jds_datepicker"] }] }, "base": { "container": { "flex-direction": "{i_0}", "align-items": "{i_1}", "gap": "{i_2}", "width": "{i_3}" }, "outer-container": { "flex-direction": "{i_4}", "width": "{i_5}", "align-items": "{i_6}" }, "field-container": { "flex": 1, "flex-direction": "{i_7}", "width": "{i_8}", "align-items": "{i_9}" }, "input-container": { "width": "{i_10}", "gap": "{i_11}", "height": 36, "align-items": "{i_12}" }, "dd-container": { "flex-direction": "{i_13}", "flex": 1, "gap": "{i_14}", "align-items": "{i_15}" }, "dd-jds_input": { "disabled": false, "type": "number", "textAlign": "{i_16}", "maxLength": 2, "placeholder": "dd" }, "dd-active-line-container": { "width": "{i_17}", "padding-top": 1, "padding-bottom": 1 }, "dd-feedback-container": { "height": 2, "width": "{i_18}", "background-color": "{i_19}", "show": true }, "left-slash-container": { "width": 1, "height": 35, "rotate": 10, "background-color": "{i_20}", "show": true }, "mm-container": { "flex-direction": "{i_21}", "flex": 1, "gap": "{i_22}", "align-items": "{i_23}" }, "mm-jds_input": { "disabled": false, "type": "number", "textAlign": "{i_24}", "maxLength": 2, "placeholder": "mm" }, "mm-active-line-container": { "width": "{i_25}", "padding-top": 1, "padding-bottom": 1 }, "mm-feedback-container": { "height": 2, "width": "{i_26}", "background-color": "{i_27}", "show": true }, "right-slash-container": { "width": 1, "height": 35, "rotate": 10, "background-color": "{i_28}", "show": true }, "yy-container": { "flex-direction": "{i_29}", "flex": 1, "gap": "{i_30}", "align-items": "{i_31}" }, "yy-jds_input": { "disabled": false, "type": "number", "textAlign": "{i_32}", "maxLength": 4, "placeholder": "yyyy" }, "yy-active-line-container": { "width": "{i_33}", "padding-top": 1, "padding-bottom": 1 }, "yy-feedback-container": { "height": 2, "width": "{i_34}", "background-color": "{i_35}", "show": true }, "calendar-container": { "hidden": false, "justify-content": "{i_36}", "align-items": "{i_37}" }, "calendar-jds_action_button": { "kind": "tertiary", "size": "medium", "icon": "ic_calendar" }, "bottom-container": { "flex-direction": "{i_38}", "align-items": "{i_39}", "gap": "{i_40}", "width": "{i_41}" }, "jds_feedback_block": { "size": "s", "state": "none" }, "label-jds-text": { "font-family": "{bodyXs}", "color": "{primaryGrey80}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "max-lines": 1, "maxLines": 1 }, "helper-jds-text": { "font-family": "{bodyXs}", "color": "{primaryGrey80}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" } }, "variant": { "disabled": { "true": { "field-container": { "opacity": "{i_42}", "disabled": true }, "bottom-container": { "opacity": "{i_43}", "disabled": true }, "dd-jds_input": { "disabled": true }, "mm-jds_input": { "disabled": true }, "yy-jds_input": { "disabled": true }, "calendar-jds_action_button": { "state": "disabled" } } }, "error": { "true": { "jds_feedback_block": { "state": "error" }, "dd-feedback-container": { "background-color": "{i_44}" }, "mm-feedback-container": { "background-color": "{i_45}" }, "yy-feedback-container": { "background-color": "{i_46}" } } }, "ddError": { "true": { "jds_feedback_block": { "state": "error" }, "dd-feedback-container": { "background-color": "{i_47}" } } }, "mmError": { "true": { "jds_feedback_block": { "state": "error" }, "mm-feedback-container": { "background-color": "{i_48}" } } }, "yyError": { "true": { "jds_feedback_block": { "state": "error" }, "yy-feedback-container": { "background-color": "{i_49}" } } }, "showCalendar": { "false": { "calendar-container": { "hidden": true } } } }, "combination": [{}], "combination_config": [[]], "api": { "config": { "disabled": { "values": [false, true], "doc_description": "Determines the disabled input field" }, "error": { "values": [false, true], "doc_description": "The error state of the input" }, "ddError": { "values": [false, true] }, "mmError": { "values": [false, true] }, "yyError": { "values": [false, true] }, "showCalendar": { "values": [true, false] } }, "data": { "dd-jds_input": { "value": { "type": "number", "name": "ddValue" } }, "mm-jds_input": { "value": { "type": "number", "name": "mmValue" } }, "yy-jds_input": { "value": { "type": "number", "name": "yyValue" } }, "jds_feedback_block": { "stateText": { "type": "string", "name": "errorText", "doc_description": "The error text to display" } }, "jds_datepicker": { "open": { "type": "boolean", "name": "_datepickerOpen" }, "offsetX": { "type": "string", "name": "_offsetX" }, "offsetY": { "type": "string", "name": "_offsetY" }, "triggerRef": { "type": "ref", "name": "triggerRef" }, "min": { "type": "date", "name": "min", "doc_description": "Defines the min date possible" }, "max": { "type": "date", "name": "max", "doc_description": "Defines the max date possible" }, "value": { "type": "date", "name": "_calendarValue" } }, "label-jds-text": { "value": { "type": "string", "name": "label", "doc_description": "Determines the label" } }, "helper-jds-text": { "value": { "type": "string", "name": "helperText", "doc_description": "The helper text to display" } } }, "events": { "calendar-jds_action_button": { "onClick": "onCalendarClick" }, "dd-jds_input": { "onChange": "onDateChange", "onSubmit": "onDateSubmit", "onKeydown": { "name": "onDateKeydown", "platform": "web" }, "onBlur": "onDateBlur" }, "mm-jds_input": { "onChange": "onMonthChange", "onSubmit": "onMonthSubmit", "onKeydown": { "name": "onMonthKeydown", "platform": "web" }, "onBlur": "onMonthBlur" }, "yy-jds_input": { "onChange": "onYearChange", "onSubmit": "onYearSubmit", "onKeydown": { "name": "onYearKeydown", "platform": "web" }, "onBlur": "onYearBlur" }, "jds_datepicker": { "onClose": "onDatepickerClose", "onSelect": "onDatepickerSelect", "onConfirm": "onDatepickerSelect" } }, "a11y": { "dd-jds_input": { "properties": { "ariaLabel": { "name": "dateAriaLabel", "value": "Insert day" } } }, "mm-jds_input": { "properties": { "ariaLabel": { "name": "monthAriaLabel", "value": "Insert month" } } }, "yy-jds_input": { "properties": { "ariaLabel": { "name": "yearAriaLabel", "value": "Insert year" } } }, "calendar-jds_action_button": { "properties": { "ariaLabel": { "name": "datepickerAriaLabel", "value": "Launch datepicker" } } } } } };

const DATEPICKER_LAYER_ID = ".j-JDSInputDate-calendar-container";
const getNormalisedDate = (value) => {
  if (!value)
    return { day: void 0, month: void 0, year: void 0 };
  const date = new Date(value);
  if (!date.getTime()) {
    return { day: void 0, month: void 0, year: void 0 };
  }
  return {
    day: date.getDate(),
    month: date.getMonth() + 1,
    year: date.getFullYear()
  };
};
const validateYear = (value, min, max) => {
  const { year = 0 } = value;
  const { year: minYear = 0 } = getNormalisedDate(min);
  const { year: maxYear = 0 } = getNormalisedDate(max);
  if (min && year) {
    if (year < minYear) {
      return false;
    }
  }
  if (max && year) {
    if (year > maxYear) {
      return false;
    }
  }
  return true;
};
const validateMonth = (value, min, max) => {
  if (!validateYear(value, min, max))
    return false;
  const { year, month } = value;
  if (!month || month < 1 || month > 12)
    return false;
  const { year: minYear, month: minMonth = 0 } = getNormalisedDate(min);
  const { year: maxYear, month: maxMonth = 0 } = getNormalisedDate(max);
  if (year === minYear && month < minMonth)
    return false;
  if (year === maxYear && month > maxMonth)
    return false;
  return true;
};
const validateDate = (value, min, max) => {
  const { day, month, year } = value;
  if (!day || !month || !year)
    return true;
  const currentDate = new Date(year, month - 1, day);
  const minDate = min ? new Date(min) : null;
  const maxDate = max ? new Date(max) : null;
  const isLeapYear = (year2) => {
    return year2 % 4 === 0;
  };
  const monthsWith30Days = [4, 6, 9, 11];
  if (month < 1 || month > 12 || day < 1)
    return false;
  if (monthsWith30Days.includes(month) && day > 30)
    return false;
  if (month === 2) {
    if (isLeapYear(year) && day > 29)
      return false;
    if (!isLeapYear(year) && day > 28)
      return false;
  } else if (day > 31) {
    return false;
  }
  if (minDate && currentDate < minDate)
    return false;
  if (maxDate && currentDate > maxDate)
    return false;
  if (minDate && year === minDate.getFullYear()) {
    if (month < minDate.getMonth() + 1)
      return false;
    if (month === minDate.getMonth() + 1 && day < minDate.getDate())
      return false;
  }
  if (maxDate && year === maxDate.getFullYear()) {
    if (month > maxDate.getMonth() + 1)
      return false;
    if (month === maxDate.getMonth() + 1 && day > maxDate.getDate())
      return false;
  }
  return true;
};
const nodeJump = (key, sourceNode, nextNode, prevNode, sourceNodeError) => {
  switch (key) {
    case "Backspace":
      if (!sourceNode?.value && !sourceNodeError)
        setTimeout(() => prevNode?.select());
      break;
    case "ArrowLeft":
      if (document.getSelection()?.toString() === sourceNode?.value && !sourceNodeError) {
        setTimeout(() => prevNode?.select?.());
      }
      break;
    case "ArrowRight":
      if (document.getSelection()?.toString() === sourceNode?.value && !sourceNodeError) {
        setTimeout(() => nextNode?.select?.());
      }
      break;
  }
};
const getDateFromObject = (obj) => new Date(obj.year || 0, obj.month || 0, obj.day);
const getDateStringFromObject = (obj) => `${obj.year || ""}/${(obj.month || "").toString().padStart(2, "0")}/${(obj.day || "").toString().padStart(2, "0")}`;
const getDisabledsDays = (date, step) => {
  if (!step)
    return [];
  const { month = 0, year = 0 } = date;
  const daysInMonth = new Date(year, month, 0).getDate();
  const numbers = Array.from({ length: daysInMonth }).map((_, i) => i + 1);
  const filteredNumbers = numbers.filter((i) => {
    return i % step === 0;
  });
  return filteredNumbers.map((i) => new Date(year, month - 1, i));
};
const withLogic$e = (Component) => (props) => {
  const {
    value,
    datePicker,
    min,
    max,
    error,
    errorText,
    errorFieldsObject,
    setValidity,
    setCustomValidity,
    onChange,
    step,
    ...rest
  } = props;
  const { selected, toggle, close } = useToggle(false);
  const [date, setDate] = useState(getNormalisedDate(value));
  const [element, setElement] = useState(null);
  useEffect(() => {
    if (value === "") {
      setDate({ day: void 0, month: void 0, year: void 0 });
    } else {
      setDate(getNormalisedDate(value));
    }
  }, [value]);
  const [focus, setFocus] = useState({
    dd: false,
    mm: false,
    yy: false
  });
  const { day, month, year } = date;
  const rootRef = useCallback((element2) => {
    if (element2)
      setElement(element2);
  }, []);
  const datePickerLayer = element?.querySelector(DATEPICKER_LAYER_ID);
  const inputs = Array.from(
    element?.querySelectorAll(
      "input"
    ) || []
  );
  const ddInput = inputs.find((input) => input.placeholder === "dd");
  const mmInput = inputs.find((input) => input.placeholder === "mm");
  const yyyInput = inputs.find((input) => input.placeholder === "yyyy");
  const { dd, mm, yyyy, errorLocalText } = setCustomValidity?.(
    new Date(date.year || 0, date.month || 0, date.day)
  ) || {};
  const userValidated = setValidity?.(getDateFromObject(date));
  const dayError = !focus.dd && (userValidated || dd || errorFieldsObject?.dd || error || date.day && !validateDate(date, min, max) || rest.required && !date.day);
  const monthError = !focus.mm && (userValidated || mm || errorFieldsObject?.mm || error || date.month && !validateMonth(date, min, max) || rest.required && !date.month);
  const yearError = !focus.yy && (userValidated || yyyy || errorFieldsObject?.yyyy || error || date.year && !validateYear(date, min, max) || rest.required && !date.year);
  const getCurrentDate = () => {
    const now = /* @__PURE__ */ new Date();
    return {
      day: now.getDate(),
      month: now.getMonth() + 1,
      year: now.getFullYear()
    };
  };
  const isInvalidDate = (date2) => {
    return !date2 || isNaN(date2.day ?? NaN) || date2.day === 0 || !validateDate(date2) || !validateMonth(date2) || isNaN(date2.month ?? NaN) || date2.month === 0 || isNaN(date2.year ?? NaN) || date2.year === 0;
  };
  const formatDate = (date2) => {
    const mm2 = String(date2.month).padStart(2, "0");
    const dd2 = String(date2.day).padStart(2, "0");
    const yyyy2 = date2.year;
    return `${mm2}-${dd2}-${yyyy2}`;
  };
  const [calendarValue, setCalendarValue] = useState(
    formatDate(getCurrentDate())
  );
  useEffect(() => {
    setCalendarValue(
      formatDate(isInvalidDate(date) ? getCurrentDate() : date)
    );
  }, [date]);
  console.log(date, "test 1");
  console.log(calendarValue, "test 2");
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...rest,
        min,
        max,
        errorText: errorLocalText || errorText,
        _datepickerOpen: selected,
        dateAriaLabel: props.dateAriaLabel || "Input date",
        monthAriaLabel: props.monthAriaLabel || "Input month",
        yearAriaLabel: props.yearAriaLabel || "Input year",
        datepickerAriaLabel: props.datepickerAriaLabel || "Launch datepicker",
        onMonthKeydown: (ev) => {
          nodeJump(ev.key, mmInput, yyyInput, ddInput, monthError);
        },
        onDateKeydown: (ev) => {
          nodeJump(ev.key, ddInput, mmInput, void 0, dayError);
        },
        onYearKeydown: (ev) => {
          nodeJump(ev.key, yyyInput, void 0, mmInput, yearError);
        },
        showCalendar: datePicker,
        onCalendarClick: toggle,
        onDatepickerClose: close,
        rootRef,
        disabledDates: getDisabledsDays(date, parseInt(step)),
        ddValue: focus.dd ? day : day?.toString().padStart(2, "0") || "",
        mmValue: focus.mm ? month : month?.toString().padStart(2, "0") || "",
        yyValue: focus.yy ? year : year?.toString().padStart(4, "0") || "",
        _calendarValue: calendarValue,
        onDatepickerSelect: (value2) => {
          const date2 = getNormalisedDate(value2);
          setDate(date2);
          onChange?.(getDateStringFromObject(date2));
        },
        triggerRef: { current: datePickerLayer },
        ddError: dayError,
        mmError: monthError,
        yyError: yearError,
        onDateChange: (ev) => {
          setFocus({ ...focus, dd: true });
          const currentValue = { ...date, day: parseInt(ev.target.value) };
          setDate(currentValue);
          onChange?.(getDateStringFromObject(currentValue));
          if (ev.target.value.length === 2 && !dayError)
            setTimeout(() => mmInput?.select?.());
        },
        onMonthChange: (ev) => {
          setFocus({ ...focus, mm: true });
          const currentValue = { ...date, month: parseInt(ev.target.value) };
          setDate(currentValue);
          onChange?.(getDateStringFromObject(currentValue));
          if (ev.target.value.length === 2 && !monthError)
            setTimeout(() => yyyInput?.select?.());
        },
        onYearChange: (ev) => {
          setFocus({ ...focus, yy: true });
          const currentValue = { ...date, year: parseInt(ev.target.value) };
          setDate(currentValue);
          onChange?.(getDateStringFromObject(currentValue));
        },
        onDateBlur: () => {
          setFocus({ ...focus, dd: false });
        },
        onMonthBlur: () => {
          setFocus({ ...focus, mm: false });
        },
        onYearBlur: () => {
          setFocus({ ...focus, yy: false });
        }
      }
    }
  );
};

const Component$g = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$f;
  const { disabled = false, error = false, ddError = false, mmError = false, yyError = false, showCalendar = true, onCalendarClick = noop, onDateChange = noop, onDateSubmit = noop, onDateKeydown = noop, onDateBlur = noop, onMonthChange = noop, onMonthSubmit = noop, onMonthKeydown = noop, onMonthBlur = noop, onYearChange = noop, onYearSubmit = noop, onYearKeydown = noop, onYearBlur = noop, onDatepickerClose = noop, onDatepickerSelect = noop, dateAriaLabel = "Insert day", monthAriaLabel = "Insert month", yearAriaLabel = "Insert year", datepickerAriaLabel = "Launch datepicker", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ disabled, error, ddError, mmError, yyError, showCalendar, onCalendarClick, onDateChange, onDateSubmit, onDateKeydown, onDateBlur, onMonthChange, onMonthSubmit, onMonthKeydown, onMonthBlur, onYearChange, onYearSubmit, onYearKeydown, onYearBlur, onDatepickerClose, onDatepickerSelect, dateAriaLabel, monthAriaLabel, yearAriaLabel, datepickerAriaLabel, ...rest }, componentTag },
    "JDSInputDate",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const InputDate = withLogic$e(Component$g);
InputDate.displayName = "InputDate";
InputDate.slotName = "jds_input_date";

const sdl$e = { "metadata": { "version": "1.0.0", "id": "input-field-1.0.0", "name": "JDSInputField", "layerName": "jds_input_field", "description": "A input field give context to the information that a user needs to input. They're commonly used in forms." }, "hierarchy": { "container": [{ "field-container": ["input_label-jds-text", { "input-container": [{ "prefix-container": ["prefix-slot"] }, "jds_input", "suffix-slot"] }] }, { "active-line-container": ["feedback-container"] }, "jds_feedback_block", "helper-jds-text"] }, "base": { "container": { "flex-direction": "{i_0}", "gap": "{i_1}", "width": "{i_2}", "justify-content": "{i_3}", "align-items": "{i_4}", "opacity": "{i_30}", "behavior": { "hover": {} } }, "field-container": { "flex-direction": "{i_5}", "width": "{i_6}", "align-items": "{i_7}", "justify-content": "{i_8}", "padding-bottom": "{i_9}", "animate-stack-alignment": true }, "input-container": { "flex-direction": "{i_10}", "justify-content": "{i_11}", "width": "{i_12}", "gap": "{i_13}", "padding-top": 20, "align-items": "{i_14}", "z-index": 0 }, "prefix-container": { "hidden": false }, "jds_input": { "disabled": false, "type": "text", "textAlign": "{i_17}", "rows": 1, "flex": 1 }, "active-line-container": { "flex-direction": "{i_21}", "width": "{i_22}", "align-items": "{i_23}", "padding-bottom": 1, "padding-top": 1 }, "feedback-container": { "width": "{i_24}", "height": 2, "background-color": "{i_25}", "border-radius": 48, "show": true, "behavior": { "hover": { "background-color": "{i_26}" }, "focus": { "background-color": "{i_27}" }, "active": { "background-color": "{i_28}" } } }, "jds_feedback_block": { "size": "s", "state": "none" }, "prefix-slot": { "disabled": false }, "suffix-slot": { "disabled": false }, "input_label-jds-text": { "font-family": "{bodyS}", "color": "{primaryGrey80}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "max-lines": 1, "textType": "label", "maxLines": 1, "z-index": 1, "animate-padding-left": true }, "helper-jds-text": { "font-family": "{bodyXs}", "color": "{primaryGrey80}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" } }, "variant": { "disabled": { "true": { "container": { "opacity": "{i_29}", "disabled": true }, "jds_input": { "disabled": true }, "prefix-slot": { "disabled": true }, "suffix-slot": { "disabled": true } } }, "state": { "success": { "feedback-container": { "background-color": "{i_31}", "behavior": { "hover": { "background-color": "{i_32}" }, "focus": { "background-color": "{i_33}" }, "active": { "background-color": "{i_34}" } } }, "jds_feedback_block": { "state": "success" } }, "error": { "feedback-container": { "background-color": "{i_35}", "behavior": { "hover": { "background-color": "{i_36}" }, "focus": { "background-color": "{i_37}" }, "active": { "background-color": "{i_38}" } } }, "jds_feedback_block": { "state": "error" } }, "warning": { "feedback-container": { "background-color": "{i_39}", "behavior": { "hover": { "background-color": "{i_40}" }, "focus": { "background-color": "{i_41}" }, "active": { "background-color": "{i_42}" } } }, "jds_feedback_block": { "state": "warning" } } }, "type": { "email": { "jds_input": { "type": "email" } }, "number": { "jds_input": { "type": "number" } }, "password": { "jds_input": { "type": "password" } }, "phone": { "jds_input": { "type": "phone" } } }, "_hasSuffix": { "true": { "suffix-icon-container": { "hidden": false } } } }, "combination": [{ "true": { "true": { "field-container": { "align-items": "{i_43}" }, "prefix-icon-container": { "hidden": false }, "input_label-jds-text": { "font-family": "{bodyXs}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}", "padding-left": 0 } }, "false": { "field-container": { "align-items": "{i_44}" }, "input_label-jds-text": { "font-family": "{bodyXs}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}", "padding-left": 0 } } }, "false": { "true": { "field-container": { "align-items": "{i_45}" }, "prefix-icon-container": { "hidden": false } }, "false": { "field-container": { "align-items": "{i_47}" }, "input_label-jds-text": { "padding-left": 0 } } } }, { "none": { "true": { "feedback-container": { "background-color": "{i_48}" } } } }], "combination_config": [["_labelFocus", "_hasPrefix"], ["state", "_inputFocus"]], "api": { "children": { "prefix-slot": { "name": "prefix", "accepts": ["jds_dropdown", "jds_icon", "jds_input_phone_dropdown", "jds_text"], "max": 1, "doc_description": "It takes 'icon' or 'dropdown' as prefix." }, "suffix-slot": { "name": "suffix", "accepts": ["jds_dropdown", "jds_icon", "jds_spinner"], "max": 1, "doc_description": "It takes 'icon' or 'dropdown' as suffix." } }, "config": { "disabled": { "values": [false, true], "doc_description": "It can be used to enable or disable InputField." }, "state": { "type": "JDSFeedbackBlock.state", "doc_description": "It can be used to choose between states i.e. 'success','warning','error','none'.By default it is 'none'.", "values": ["none", "success", "error", "warning"] }, "type": { "type": "JDSInput.type", "function": true, "values": ["text", "email", "number", "password", "textarea", "pin", "phone"] }, "_labelFocus": { "values": [false, true] }, "_inputFocus": { "values": [false, true] }, "_hasPrefix": { "values": [false, true] }, "_hasSuffix": { "values": [false, true] } }, "data": { "jds_input": { "id": { "type": "string", "name": "id", "platform": "web" }, "value": { "type": "string", "name": "value", "doc_description": "It takes value from user for the Input field." }, "name": { "type": "string", "name": "name" }, "autocomplete": { "type": "string", "name": "autocomplete", "platform": "web" }, "autoFocus": { "type": "boolean", "name": "autoFocus", "platform": "web,ios" }, "placeholder": { "type": "string", "name": "placeholder", "doc_description": "It displays the placeholder of Input field." }, "maxLength": { "type": "number", "name": "maxLength", "doc_description": "It can be used to bound user's input within a maximum character limit." }, "pattern": { "type": "string", "name": "pattern" }, "required": { "type": "boolean", "name": "required", "doc_description": "It can be used to make input field required." }, "focusRequester": { "type": "focusRequester", "name": "focusRequester", "platform": "android" }, "imeAction": { "type": "imeAction", "name": "imeAction", "platform": "android" }, "capitalization": { "type": "keyboardCapitalization", "name": "capitalization", "platform": "android" }, "semantics": { "type": "string", "name": "semantics", "platform": "android" } }, "jds_feedback_block": { "stateText": { "type": "string", "name": "stateText", "doc_description": "It displays message with respect to its [state] selected." } }, "input_label-jds-text": { "value": { "type": "string", "name": "label", "function": true }, "id": { "type": "string", "name": "id", "platform": "web" }, "padding-left": { "type": "size", "name": "_labelOffset" } }, "helper-jds-text": { "value": { "type": "string", "name": "helperText", "doc_description": "It dispalys helper text of the input field." } } }, "events": { "prefix-container": { "onAppear": { "name": "_onAppear", "platform": "ios" } }, "jds_input": { "onFocus": "onFocus", "onBlur": "onBlur", "onChange": "onChange", "onKeydown": { "name": "onKeydown", "platform": "web" }, "onInvalid": "onInvalid", "onSubmit": "onSubmit" }, "prefix-slot": { "onClick": "onPrefixClick", "onSlotMeasure": { "name": "onPrefixSlotWidth", "platform": "android" } }, "suffix-slot": { "onClick": "onSuffixClick" } }, "a11y": { "jds_input": { "properties": { "ariaLabel": { "name": "ariaLabel", "prop": "label" }, "ariaDescribedby": { "name": "ariaDescribedby", "platform": "web,ios" }, "ariaInvalid": "ariaInvalid", "ariaPlaceholder": { "name": "_ariaPlaceholder" }, "ariaRequired": { "name": "_ariaRequired", "prop": "required" } } } } } };

const Component$f = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$e;
  const { disabled = false, state = "undefined", type = "undefined", onFocus = noop, onBlur = noop, onChange = noop, onInvalid = noop, onSubmit = noop, onPrefixClick = noop, onPrefixSlotWidth = noop, onSuffixClick = noop, ariaLabel = props.label?.toString(), _ariaRequired = props.required?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ disabled, state, type, onFocus, onBlur, onChange, onInvalid, onSubmit, onPrefixClick, onPrefixSlotWidth, onSuffixClick, ariaLabel, _ariaRequired, ...rest }, componentTag },
    "JDSInputField",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const InputField = withLogic$1c(Component$f);
InputField.displayName = "InputField";
InputField.slotName = "jds_input_field";

const sdl$d = { "metadata": { "version": "1.0.0", "id": "pagination-1.0.0", "name": "JDSPagination", "layerName": "jds_pagination" }, "hierarchy": { "container": ["first-jds_button", "previous-jds_button", { "basic-container": ["data-jds_pagination_button"] }, { "compact-container": ["helper-jds-text"] }, "next-jds_button", "last-jds_button"] }, "base": { "container": { "hidden": false, "background-color": "{p_0}", "flex-direction": "{p_1}", "justify-content": "{p_2}", "align-items": "{p_3}", "padding-left": "{p_4}", "padding-right": "{p_5}", "width": "{p_6}", "min-height": "{p_7}" }, "basic-container": { "flex-direction": "{p_8}" }, "previous-jds_button": { "icon": "ic_back", "kind": "tertiary", "size": "small", "_hasLabel": false }, "next-jds_button": { "icon": "ic_next", "kind": "tertiary", "size": "small", "_hasLabel": false }, "last-jds_button": { "hidden": true, "icon": "ic_lastpage", "kind": "tertiary", "size": "small", "_hasLabel": false }, "first-jds_button": { "hidden": true, "icon": "ic_firstpage", "kind": "tertiary", "size": "small", "_hasLabel": false }, "compact-container": { "flex-direction": "{p_9}", "hidden": true, "gap": "{p_10}", "padding-left": "{p_11}", "padding-right": "{p_12}" }, "helper-jds-text": { "font-family": "{bodyXs}", "color": "{primaryGrey80}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" } }, "variant": { "kind": { "compact": { "compact-container": { "hidden": false }, "basic-container": { "hidden": true }, "last-jds_button": { "hidden": false }, "first-jds_button": { "hidden": false } } } }, "api": { "config": { "kind": { "values": ["basic", "compact"] } }, "data": { "container": { "_items.page": { "type": "number", "name": "page" }, "_items.totalPages": { "type": "number", "name": "totalPages" } }, "basic-container": { "value": { "type": "list", "name": "_items", "object": { "text": "string", "state": "JDSPaginationButton.state" } } }, "data-jds_pagination_button": { "text": { "type": "string", "name": "_items.text" }, "state": { "type": "JDSPaginationButton.state", "name": "_items.state" } }, "first-jds_button": { "disabled": { "type": "boolean", "name": "_firstDisabled" } }, "previous-jds_button": { "disabled": { "type": "boolean", "name": "_previousDisabled" } }, "next-jds_button": { "disabled": { "type": "boolean", "name": "_nextDisabled" } }, "last-jds_button": { "disabled": { "type": "boolean", "name": "_lastDisabled" } }, "helper-jds-text": { "value": { "type": "string", "name": "_helperText" } } }, "events": { "first-jds_button": { "onClick": "onFirst" }, "previous-jds_button": { "onClick": "onPrevious" }, "next-jds_button": { "onClick": "onNext" }, "last-jds_button": { "onClick": "onLast" }, "data-jds_pagination_button": { "onClick": "onSelect" } }, "a11y": { "previous-jds_button": { "properties": { "ariaLabel": { "name": "previousButtonAriaLabel", "value": "Previous Page" } } }, "next-jds_button": { "properties": { "ariaLabel": { "name": "nextButtonAriaLabel", "value": "Next Page" } } }, "last-jds_button": { "properties": { "ariaLabel": { "name": "lastButtonAriaLabel", "value": "Last Page" } } }, "first-jds_button": { "properties": { "ariaLabel": { "name": "firstButtonAriaLabel", "value": "First Page" } } }, "container": { "properties": { "role": { "value": "navigation" }, "aria-label": { "name": "ariaLabel", "value": "Pagination navigation" }, "aria-describedby": "ariaDescribedby" } } } } };

const ellipsis = {
  state: "ellipsis",
  text: "..."
};
function getTruncatedFiniteItems(length, page) {
  if (page <= 4) {
    const start2 = Array.from({ length: 5 }).map(
      (_, index) => ({
        state: index + 1 === page ? "selected" : "default",
        text: `${index + 1}`
      })
    );
    const end2 = {
      state: page === length ? "selected" : "default",
      text: length.toString()
    };
    return [...start2, ellipsis, end2];
  } else if (page >= length - 3) {
    const start2 = {
      state: page === 1 ? "selected" : "default",
      text: "1"
    };
    const end2 = Array.from({ length: 5 }).map(
      (_, index) => ({
        state: page === index + length - 4 ? "selected" : "default",
        text: `${index + length - 4}`
      })
    );
    return [start2, ellipsis, ...end2];
  }
  const start = {
    state: page === 1 ? "selected" : "default",
    text: "1"
  };
  const end = {
    state: page === length ? "selected" : "default",
    text: length.toString()
  };
  const mid = Array.from({ length: 3 }).map(
    (_, index) => ({
      state: index + page - 1 === page ? "selected" : "default",
      text: `${index + page - 1}`
    })
  );
  return [start, ellipsis, ...mid, ellipsis, end];
}
function getInfiniteItems(page) {
  if (page <= 5) {
    const start2 = Array.from({ length: 6 }).map(
      (_, index) => ({
        state: index + 1 === page ? "selected" : "default",
        text: `${index + 1}`
      })
    );
    return [...start2, ellipsis];
  }
  const start = {
    state: page === 1 ? "selected" : "default",
    text: "1"
  };
  const mid = Array.from({ length: 4 }).map(
    (_, index) => ({
      state: index + page - 2 === page ? "selected" : "default",
      text: `${index + page - 2}`
    })
  );
  return [start, ellipsis, ...mid, ellipsis];
}
function getBasicItems(length, page) {
  return Array.from({ length }).map((_, index) => ({
    text: `${index + 1}`,
    state: index + 1 === page ? "selected" : "default"
  }));
}
const withLogic$d = (Component) => (props) => {
  const { page, totalPages = 0, onPageChange, kind, ...rest } = props;
  const { index, onClick, updateIndex } = useSelected(page);
  const handlePrev = () => {
    if (index !== 0) {
      updateIndex(index - 1);
      onPageChange?.(index - 1);
    }
  };
  const handleNext = () => {
    if (index !== totalPages) {
      updateIndex(index + 1);
      onPageChange?.(index + 1);
    }
  };
  const handleOnLast = () => {
    updateIndex(totalPages);
    onPageChange?.(totalPages);
  };
  const handleOnFirst = () => {
    updateIndex(1);
    onPageChange?.(1);
  };
  const items = () => {
    const length = totalPages ?? 0;
    const page2 = index ?? 0;
    if (length > 0 && length <= 7) {
      return getBasicItems(length, page2);
    } else if (length > 7) {
      return getTruncatedFiniteItems(length, page2);
    } else if (length < 1) {
      return getInfiniteItems(page2);
    }
    return [];
  };
  const tokens = useTokenValues();
  const language = tokens.lang;
  const numeralList = useMemo(() => {
    return getNumbers(language);
  }, [language]);
  const getLocalNumber = (number) => {
    const numString = number.toString();
    return numString.replace(
      /\d/g,
      (num) => numeralList[parseInt(num, 10)] ?? num
    );
  };
  const currentItems = items().map((item, i) => ({
    ...item,
    text: item.text !== "..." ? getLocalNumber(Number(item.text)) : item.text,
    onSelect: () => {
      const { text } = item;
      if (text !== "...") {
        const currentPage = parseInt(text);
        onClick(currentPage);
        onPageChange?.(currentPage);
      }
    }
  }));
  const firstButtonState = index === 1;
  const lastButtonState = index === totalPages;
  console.log(lastButtonState, 205);
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...rest,
        _items: currentItems,
        kind,
        onPrevious: handlePrev,
        onNext: handleNext,
        _helperText: `${getLocalNumber(index)} / ${getLocalNumber(
          totalPages
        )}`,
        onFirst: handleOnFirst,
        onLast: handleOnLast,
        _previousDisabled: firstButtonState,
        _firstDisabled: firstButtonState,
        _lastDisabled: lastButtonState,
        _nextDisabled: lastButtonState
      }
    }
  );
};

const Component$e = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$d;
  const { kind = "basic", onFirst = noop, onPrevious = noop, onNext = noop, onLast = noop, onSelect = noop, previousButtonAriaLabel = "Previous Page", nextButtonAriaLabel = "Next Page", lastButtonAriaLabel = "Last Page", firstButtonAriaLabel = "First Page", ariaLabel = "Pagination navigation", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ kind, onFirst, onPrevious, onNext, onLast, onSelect, previousButtonAriaLabel, nextButtonAriaLabel, lastButtonAriaLabel, firstButtonAriaLabel, ariaLabel, ...rest }, componentTag },
    "JDSPagination",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const Pagination = withLogic$d(Component$e);
Pagination.displayName = "Pagination";
Pagination.slotName = "jds_pagination";

const sdl$c = { "metadata": { "version": "1.0.0", "id": "promo-card-1.0.0", "name": "JDSPromoCard", "layerName": "jds_promo_card", "description": "Promotional cards are compositions of text and images intended to promote a specific service or feature.", "usage": "Promotional cards are used to announce a new feature or motivate users to take an action." }, "hierarchy": { "root-container": [{ "vertical-container": [{ "vertical-image-container": ["vertical-jds_image", "vertical-promoCardArc"] }, { "vertical-content-container": ["vertical-jds_content_block"] }] }, { "horizontal-container": [{ "horizontal-content-container": ["horizontal-jds_content_block"] }, { "horizontal-image-container": ["horizontal-image", "horizontal-promoCardArc"] }] }, { "footer-container": ["prefix-slot", "suffix-slot"] }] }, "base": { "root-container": { "background-color": "{p_0}", "flex-direction": "{p_1}", "width": "{p_2}", "justify-content": "{p_3}", "align-items": "{p_4}", "border-radius": "{p_5}", "box-shadow": { "x": 0, "y": 4, "blur": 16, "spread": 0, "color": "#00000014" } }, "vertical-container": { "mode": "bold", "flex-direction": "{p_6}", "align-items": "{p_7}", "justify-content": "{p_8}", "width": "{p_9}", "border-radius": "{p_10}", "background-color": "{p_11}", "overflow": "hidden" }, "horizontal-container": { "hidden": true, "mode": "bold", "flex-direction": "{p_12}", "align-items": "{p_13}", "justify-content": "{p_14}", "width": "{p_15}", "border-radius": "{p_16}", "height": "{p_17}", "background-color": "{p_18}", "overflow": "hidden" }, "vertical-content-container": { "flex-direction": "{p_19}", "align-items": "{p_20}", "justify-content": "{p_21}", "width": "{p_22}", "mode": "bold", "background-color": "{p_23}", "border-bottom-left-radius": "{p_24}", "border-bottom-right-radius": "{p_25}", "padding-right": "{p_26}", "padding-bottom": "{p_27}", "padding-left": "{p_28}" }, "horizontal-content-container": { "flex-direction": "{p_29}", "align-items": "{p_30}", "justify-content": "{p_31}", "height": "{p_32}", "mode": "bold", "background-color": "{p_33}", "flex": 1, "padding-top": "{p_34}", "padding-right": "{p_35}", "padding-bottom": "{p_36}", "padding-left": "{p_37}" }, "vertical-jds_content_block": { "mode": "bold", "size": "small" }, "horizontal-jds_content_block": { "mode": "bold", "size": "small" }, "vertical-image-container": { "width": "{p_38}", "flex-direction": "{p_39}", "align-items": "{p_40}" }, "horizontal-image-container": { "flex": 1, "height": "{p_41}", "flex-direction": "{p_42}", "align-items": "{p_43}", "justify-content": "{p_44}" }, "vertical-jds_image": { "aspectRatio": "horizontal_16_9", "roundedCorner": false }, "horizontal-image": { "overflow": "hidden", "height": "{p_45}", "object-position": "center", "object-fit": "cover", "aspect-ratio": "{aspect_ratio.16.9}" }, "vertical-promoCardArc": { "mode": "bold", "color": "{p_46}", "orientation": "vertical", "width": "{p_47}", "height": "{p_48}", "z-index": 1 }, "horizontal-promoCardArc": { "mode": "bold", "color": "{p_49}", "orientation": "horizontal", "height": "{p_50}", "width": "{p_51}", "z-index": 1 }, "footer-container": { "color": "{p_52}", "width": "{p_53}", "justify-content": "{p_54}", "align-items": "{p_55}", "flex-direction": "{p_56}", "gap": "{p_57}", "padding-left": "{p_58}", "padding-right": "{p_59}", "padding-top": "{p_60}", "padding-bottom": "{p_61}", "mode": "light", "show": false } }, "variant": { "imageRatio": { "square": { "vertical-jds_image": { "aspectRatio": "square" }, "horizontal-image": { "aspect-ratio": "{aspect_ratio.1.1}" } }, "landscape": { "vertical-jds_image": { "aspectRatio": "horizontal_4_3" }, "horizontal-image": { "aspect-ratio": "{aspect_ratio.4.3}" } }, "portrait": { "vertical-jds_image": { "aspectRatio": "vertical_4_5" }, "horizontal-image": { "aspect-ratio": "{aspect_ratio.4.5}" } } }, "imageFocus": { "left": { "vertical-jds_image": { "imageFocus": "left" }, "horizontal-image": { "object-position": "left" } }, "right": { "vertical-jds_image": { "imageFocus": "right" }, "horizontal-image": { "object-position": "right" } }, "top": { "vertical-jds_image": { "imageFocus": "top" }, "horizontal-image": { "object-position": "top" } }, "bottom": { "vertical-jds_image": { "imageFocus": "bottom" }, "horizontal-image": { "object-position": "bottom" } } }, "shadow": { "false": { "root-container": { "box-shadow": { "x": 0, "y": 0, "blur": 0, "spread": 0, "color": "#00000000" } } } }, "size": { "xtra-small": { "vertical-jds_content_block": { "size": "xtra-small" }, "horizontal-jds_content_block": { "size": "xtra-small" } }, "medium": { "vertical-jds_content_block": { "size": "medium" }, "horizontal-jds_content_block": { "size": "medium" }, "horizontal-content-container": { "padding-top": "{p_62}", "padding-right": "{p_63}", "padding-bottom": "{p_64}", "padding-left": "{p_65}" } }, "large": { "vertical-jds_content_block": { "size": "large" }, "horizontal-jds_content_block": { "size": "large" }, "horizontal-content-container": { "padding-top": "{p_66}", "padding-right": "{p_67}", "padding-bottom": "{p_68}", "padding-left": "{p_69}" } } }, "orientation": { "horizontal": { "vertical-container": { "hidden": true }, "horizontal-container": { "hidden": false } } }, "_hasFooter": { "false": { "footer-container": { "hidden": true } } } }, "combination": [{}], "combination_config": [[]], "api": { "children": { "prefix-slot": { "name": "footerPrefix", "accepts": ["jds_text"], "max": 1, "doc_description": "footerPrefix corresponds to the left part of the footer. Incase of a String, a text with style body-xxs with grey-100 color is shown" }, "suffix-slot": { "name": "footerSuffix", "accepts": ["jds_text"], "max": 1, "doc_description": "footerSuffix corresponds to the right part of the footer. Incase of a String, a text with style body-xxs with grey-100 color is shown" } }, "config": { "size": { "values": ["small", "xtra-small", "medium", "large"], "doc_description": "Determines the size of the PromoCard. Size dictates the text and spacing." }, "orientation": { "values": ["vertical", "horizontal"], "doc_description": "Horizontal orientation puts image and content side by side." }, "imageRatio": { "values": ["wide", "square", "landscape", "portrait"] }, "imageFocus": { "type": "JDSImage.imageFocus", "values": ["center", "left", "right", "top", "bottom"] }, "shadow": { "values": [true, false], "doc_description": "Toggle drop shadow" }, "_hasFooter": { "values": [true, false] } }, "data": { "horizontal-jds_content_block": { "title": { "type": "string", "name": "title", "doc_description": "The main title copy." }, "description": { "type": "string", "name": "description", "doc_description": "Accepts description as string. JSX.Element is also allowed in case you have anchor tags inside your richtext." }, "primaryCTA": { "type": "string", "name": "primaryCTA" }, "children": { "type": "slot", "name": "children" } }, "vertical-jds_content_block": { "title": { "type": "string", "name": "title", "doc_description": "The main title copy." }, "description": { "type": "string", "name": "description", "doc_description": "Accepts description as string. JSX.Element is also allowed in case you have anchor tags inside your richtext." }, "primaryCTA": { "type": "string", "name": "primaryCTA" }, "children": { "type": "slot", "name": "children" } }, "horizontal-image": { "value": { "type": "image", "name": "image" } }, "vertical-jds_image": { "src": { "type": "image", "name": "image" } } }, "events": { "root-container": { "onClick": "onClick" }, "horizontal-jds_content_block": { "onPrimaryClick": "onPrimaryClick" }, "vertical-jds_content_block": { "onPrimaryClick": "onPrimaryClick" } }, "a11y": { "horizontal-jds_content_block": { "properties": { "primaryCtaAriaLabel": "primaryCtaAriaLabel", "primaryCtaAriaDescribedby": { "name": "primaryCtaAriaDescribedby", "platform": "web,ios" }, "secondaryCtaAriaLabel": "secondaryCtaAriaLabel", "secondaryCtaAriaDescribedby": { "name": "secondaryCtaAriaDescribedby", "platform": "web,ios" } } }, "vertical-jds_content_block": { "properties": { "primaryCtaAriaLabel": "primaryCtaAriaLabel", "primaryCtaAriaDescribedby": { "name": "primaryCtaAriaDescribedby", "platform": "web,ios" }, "secondaryCtaAriaLabel": "secondaryCtaAriaLabel", "secondaryCtaAriaDescribedby": { "name": "secondaryCtaAriaDescribedby", "platform": "web,ios" } } }, "vertical-jds_image": { "properties": { "ariaLabel": "imageAriaLabel", "ariaDescribedby": { "name": "imageAriaDescribedby", "platform": "web,ios" } } }, "horizontal-image": { "properties": { "ariaLabel": "imageAriaLabel", "ariaDescribedby": { "name": "imageAriaDescribedby", "platform": "web,ios" } } } } } };

const withLogic$c = (Component) => (props) => {
  const { footerPrefix, footerSuffix, ...rest } = props;
  const tokens = useTokenValues();
  const formatImageName = (imagePath = props.src || "") => {
    const parts = imagePath.split("/");
    const imageName = parts.length > 0 ? parts[parts.length - 1] : "";
    if (imageName) {
      const formattedName = imageName.replace(/\.\w+$/, "").replace(/([A-Z])/g, " $1").toLowerCase() + " image";
      return formattedName;
    }
    return "Image name not found";
  };
  return /* @__PURE__ */ jsx(TokenProvider, { value: { ...tokens, mode: "bold" }, children: /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...rest,
        _hasChildren: Boolean(rest.children),
        _hasFooter: Boolean(footerPrefix || footerSuffix),
        children: convertTextToComponent(rest.children),
        footerPrefix: convertTextToComponent(footerPrefix),
        footerSuffix: convertTextToComponent(footerSuffix),
        _imageAriaLabel: formatImageName(props.image)
      }
    }
  ) });
};

const Component$d = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$c;
  const { size = "small", orientation = "vertical", imageRatio = "wide", imageFocus = "undefined", shadow = true, onClick = noop, onPrimaryClick = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ size, orientation, imageRatio, imageFocus, shadow, onClick, onPrimaryClick, ...rest }, componentTag },
    "JDSPromoCard",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const PromoCard = withLogic$c(Component$d);
PromoCard.displayName = "PromoCard";
PromoCard.slotName = "jds_promo_card";

const sdl$b = { "metadata": { "version": "1.0.0", "id": "radio-button-1.0.0", "name": "JDSRadioButton", "layerName": "jds_radio_button", "description": "Radio buttons are used when there is alist of two or more options that are mutually exclusive and the user must select exactly one choice.", "usage": "" }, "hierarchy": { "vertical-container": [{ "horizontal-container": [{ "outer-container": ["inner-container"] }, "label-jds-text"] }, "jds_feedback_block", "helper-jds-text"] }, "base": { "vertical-container": { "hidden": false, "flex-direction": "{r_0}", "justify-content": "{r_1}", "align-items": "{r_2}", "gap": "{r_3}", "opacity": "{r_36}" }, "horizontal-container": { "hidden": false, "flex-direction": "{r_4}", "justify-content": "{r_5}", "align-items": "{r_6}", "gap": "{r_7}", "behavior": { "hover": {}, "active": {}, "focus": {} } }, "outer-container": { "hidden": false, "min-width": "{r_8}", "min-height": "{r_9}", "flex-direction": "{r_10}", "justify-content": "{r_11}", "align-items": "{r_12}", "background-color": "{r_13}", "border-radius": "{r_14}", "border-width": "{r_16}", "border-color": "{r_15}", "show": true, "behavior": { "hover": { "border-color": "{r_18}" }, "active": { "border-color": "{r_19}" }, "focus": { "border-width": 4, "box-sizing": "content-box", "border-color": "{r_20}" } } }, "inner-container": { "hidden": true, "min-width": "{r_21}", "min-height": "{r_22}", "border-radius": "{r_23}", "show": true }, "jds_feedback_block": { "size": "l" }, "label-jds-text": { "font-family": "{bodyS}", "color": "{primaryGrey80}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "text-align": "{r_24}", "behavior": { "hover": { "color": "{primaryGrey100}" }, "focus": { "color": "{primaryGrey100}" } } }, "helper-jds-text": { "font-family": "{bodyS}", "color": "{primaryGrey80}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" } }, "variant": { "size": { "small": { "outer-container": { "min-width": "{r_25}", "min-height": "{r_26}" }, "vertical-container": { "gap": "{r_27}" }, "inner-container": { "min-width": "{r_28}", "min-height": "{r_29}" }, "jds_feedback_block": { "size": "s" }, "label-jds-text": { "font-family": "{bodyXs}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}" }, "helper-jds-text": { "font-family": "{bodyXs}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}" } } }, "checked": { "true": { "outer-container": { "background-color": "{r_30}", "border-width": "{r_17}", "behavior": { "hover": { "background-color": "{r_31}" }, "active": { "background-color": "{r_32}" }, "focus": { "background-color": "{r_33}" } } }, "inner-container": { "hidden": false, "background-color": "{r_34}" }, "label-jds-text": { "color": "{primaryGrey100}" } } }, "disabled": { "true": { "vertical-container": { "opacity": "{r_35}" }, "horizontal-container": { "disabled": true } } } }, "api": { "config": { "checked": { "values": [false, true], "doc_description": "Used to programatically make input active/inactive." }, "size": { "values": ["medium", "small"] }, "disabled": { "values": [false, true] } }, "data": { "jds_feedback_block": { "stateText": { "type": "string", "name": "stateText" }, "state": { "type": "JDSFeedbackBlock.state", "name": "state" } }, "label-jds-text": { "value": { "type": "string", "name": "label" } }, "helper-jds-text": { "value": { "type": "string", "name": "helperText" } } }, "events": { "horizontal-container": { "onClick": "onClick" } }, "a11y": { "vertical-container": { "properties": { "role": { "value": "radio" }, "aria-label": { "name": "ariaLabel", "prop": "label" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" }, "aria-checked": { "name": "_ariaChecked", "prop": "checked" } } } } } };

const withLogic$b = (Component) => (props) => {
  const handleClick = (ev) => {
    if (props.onClick) {
      props.onClick({
        ...ev,
        currentTarget: {
          value: props.value
        },
        target: {
          value: props.value
        }
      });
    }
  };
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        checked: props.checked,
        onClick: handleClick
      }
    }
  );
};

const Component$c = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$b;
  const { checked = false, size = "medium", disabled = false, onClick = noop, ariaLabel = props.label?.toString(), _ariaChecked = props.checked?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ checked, size, disabled, onClick, ariaLabel, _ariaChecked, ...rest }, componentTag },
    "JDSRadioButton",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const InputRadio = withLogic$b(Component$c);
InputRadio.displayName = "InputRadio";
InputRadio.slotName = "jds_radio_button";

const sdl$a = { "metadata": { "version": "1.0.0", "id": "Rating-bar-1.0.0", "name": "JDSRatingBar", "layerName": "jds_rating_bar" }, "hierarchy": { "vertical-container": ["top_label-jds-text", { "horizontal-container": ["left_label-jds-text", "compact-jds_rating_bar_item", { "rating-bar-container": ["jds_rating_bar_item"] }, "right_label-jds-text", "right_support-jds-text"] }, "bottom_label-jds-text", "bottom_support-jds-text", "jds_feedback_block"] }, "base": { "vertical-container": { "flex-direction": "{r_0}", "align-items": "{r_1}", "justify-content": "{r_2}", "gap": "{r_3}" }, "horizontal-container": { "flex-direction": "{r_4}", "align-items": "{r_26}", "justify-content": "{r_6}", "gap": "{r_7}" }, "compact-jds_rating_bar_item": { "hidden": true, "isInteractive": false, "isActive": true, "isHalfRated": false, "size": "medium" }, "rating-bar-container": { "flex-direction": "{r_8}" }, "jds_feedback_block": { "size": "l", "hidden": true }, "top_label-jds-text": { "font-family": "{bodySBold}", "color": "{primaryGrey100}", "font-size": "{bodySBold}", "line-height": "{bodySBold}", "letter-spacing": "{bodySBold}", "font-weight": "{bodySBold}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": false }, "left_label-jds-text": { "font-family": "{bodySBold}", "color": "{primaryGrey100}", "font-size": "{bodySBold}", "line-height": "{bodySBold}", "letter-spacing": "{bodySBold}", "font-weight": "{bodySBold}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": true }, "right_label-jds-text": { "font-family": "{bodySBold}", "color": "{primaryGrey100}", "font-size": "{bodySBold}", "line-height": "{bodySBold}", "letter-spacing": "{bodySBold}", "font-weight": "{bodySBold}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": true }, "bottom_label-jds-text": { "font-family": "{bodySBold}", "color": "{primaryGrey100}", "font-size": "{bodySBold}", "line-height": "{bodySBold}", "letter-spacing": "{bodySBold}", "font-weight": "{bodySBold}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": true }, "right_support-jds-text": { "font-family": "{bodyS}", "color": "{primaryGrey80}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": true }, "bottom_support-jds-text": { "font-family": "{bodyS}", "color": "{primaryGrey80}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": false } }, "variant": { "size": { "small": { "vertical-container": { "gap": "{r_9}" }, "horizontal-container": { "gap": "{r_10}" }, "compact-jds_rating_bar_item": { "size": "small" }, "top_label-jds-text": { "font-family": "{bodyXxsBold}", "font-size": "{bodyXxsBold}", "line-height": "{bodyXxsBold}", "letter-spacing": "{bodyXxsBold}", "font-weight": "{bodyXxsBold}" }, "left_label-jds-text": { "font-family": "{bodyXxsBold}", "font-size": "{bodyXxsBold}", "line-height": "{bodyXxsBold}", "letter-spacing": "{bodyXxsBold}", "font-weight": "{bodyXxsBold}" }, "right_label-jds-text": { "font-family": "{bodyXxsBold}", "font-size": "{bodyXxsBold}", "line-height": "{bodyXxsBold}", "letter-spacing": "{bodyXxsBold}", "font-weight": "{bodyXxsBold}" }, "bottom_label-jds-text": { "font-family": "{bodyXxsBold}", "font-size": "{bodyXxsBold}", "line-height": "{bodyXxsBold}", "letter-spacing": "{bodyXxsBold}", "font-weight": "{bodyXxsBold}" }, "right_support-jds-text": { "font-family": "{bodyXxs}", "font-size": "{bodyXxs}", "line-height": "{bodyXxs}", "letter-spacing": "{bodyXxs}", "font-weight": "{bodyXxs}" }, "bottom_support-jds-text": { "font-family": "{bodyXxs}", "font-size": "{bodyXxs}", "line-height": "{bodyXxs}", "letter-spacing": "{bodyXxs}", "font-weight": "{bodyXxs}" } }, "large": { "compact-jds_rating_bar_item": { "size": "large" } } }, "labelPosition": { "bottom_center": { "vertical-container": { "align-items": "{r_11}" }, "top_label-jds-text": { "hidden": true }, "bottom_label-jds-text": { "hidden": false } }, "bottom_left": { "top_label-jds-text": { "hidden": true }, "bottom_label-jds-text": { "hidden": false } }, "top_center": { "vertical-container": { "align-items": "{r_12}" } }, "right": { "top_label-jds-text": { "hidden": true }, "right_label-jds-text": { "hidden": false }, "bottom_support-jds-text": { "hidden": true }, "right_support-jds-text": { "hidden": false } }, "left": { "top_label-jds-text": { "hidden": true }, "left_label-jds-text": { "hidden": false }, "bottom_support-jds-text": { "hidden": true }, "right_support-jds-text": { "hidden": false } } }, "type": { "read_only_expanded": { "rating-bar-container": { "disabled": true }, "jds_rating_bar_item": { "isInteractive": false } }, "read_only_compact": { "rating-bar-container": { "hidden": true }, "compact-jds_rating_bar_item": { "hidden": false } } }, "disabled": { "true": { "vertical-container": { "disabled": true, "opacity": "{r_13}" } } }, "state": { "success": { "jds_feedback_block": { "hidden": false } }, "error": { "jds_feedback_block": { "hidden": false } }, "warning": { "jds_feedback_block": { "hidden": false } } } }, "combination": [{ "read_only_compact": { "top_left": { "top_label-jds-text": { "hidden": true }, "right_label-jds-text": { "hidden": false } }, "top_center": { "top_label-jds-text": { "hidden": true }, "right_label-jds-text": { "hidden": false } }, "bottom_left": { "bottom_label-jds-text": {}, "right_label-jds-text": { "hidden": false } }, "bottom_center": { "bottom_label-jds-text": {}, "right_label-jds-text": { "hidden": false } } } }, { "read_only_expanded": { "small": { "vertical-container": { "gap": "{r_15}" }, "horizontal-container": { "gap": "{r_14}" } }, "medium": { "vertical-container": { "gap": "{r_16}" }, "horizontal-container": { "gap": "{r_17}" } }, "large": { "vertical-container": { "gap": "{r_18}" }, "horizontal-container": { "gap": "{r_19}" } } }, "read_only_compact": { "small": { "vertical-container": { "gap": "{r_21}" }, "horizontal-container": { "gap": "{r_20}" } }, "medium": { "vertical-container": { "gap": "{r_22}" }, "horizontal-container": { "gap": "{r_23}" } }, "large": { "vertical-container": { "gap": "{r_24}" }, "horizontal-container": { "gap": "{r_25}" } } } }], "combination_config": [["type", "labelPosition"], ["type", "size"]], "api": { "config": { "size": { "type": "JDSRatingBarItem.size", "values": ["medium", "small", "large"] }, "labelPosition": { "values": ["top_left", "bottom_left", "top_center", "bottom_center", "right", "left"] }, "type": { "values": ["interactive", "read_only_expanded", "read_only_compact"] }, "disabled": { "values": [false, true] }, "state": { "type": "JDSFeedbackBlock.state", "values": ["none", "success", "error", "warning"] } }, "data": { "rating-bar-container": { "value": { "type": "list", "name": "_items", "object": { "isInteractive": "boolean", "isActive": "boolean", "isHalfRated": "boolean", "isHovered": "boolean", "rating": "clipValueSize" } }, "_items.rating": { "type": "float", "name": "rating" }, "_items.count": { "type": "number", "name": "count" } }, "jds_rating_bar_item": { "size": { "type": "JDSRatingBarItem.size", "name": "size" }, "isInteractive": { "type": "boolean", "name": "_items.isInteractive" }, "isActive": { "type": "boolean", "name": "_items.isActive" }, "isHovered": { "type": "boolean", "name": "_items.isHovered" }, "isHalfRated": { "type": "boolean", "name": "_items.isHalfRated" }, "disabled": { "type": "boolean", "name": "disabled" }, "clipValue": { "type": "clipValueSize", "name": "_items.rating" } }, "jds_feedback_block": { "stateText": { "type": "string", "name": "stateText" }, "state": { "type": "JDSFeedbackBlock.state", "name": "state" } }, "top_label-jds-text": { "value": { "type": "string", "name": "label" } }, "left_label-jds-text": { "value": { "type": "string", "name": "_label" } }, "right_label-jds-text": { "value": { "type": "string", "name": "_label" } }, "bottom_label-jds-text": { "value": { "type": "string", "name": "label" } }, "right_support-jds-text": { "value": { "type": "string", "name": "supportText" } }, "bottom_support-jds-text": { "value": { "type": "string", "name": "supportText" } } }, "events": { "jds_rating_bar_item": { "onClick": "onChange", "onHover": { "name": "_onHover", "platform": "web" }, "onHoverEnd": { "name": "_onHoverEnd", "platform": "web" } } }, "a11y": { "vertical-container": { "properties": { "role": { "name": "_role" }, "aria-label": { "name": "ariaLabel", "function": true }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" } } }, "rating-bar-container": { "name": "_items", "repeating": { "ariaLabel": "itemAriaLabel", "ariaChecked": "itemAriaChecked" } }, "jds_rating_bar_item": { "properties": { "ariaLabel": "_items.itemAriaLabel", "ariaChecked": "_items.itemAriaChecked" } } } } };

const EPSILON = 5e-3;
const withLogic$a = (Component) => ({ rating = -1, ...props }) => {
  const { index: userRating, updateIndex } = useSelected(rating);
  const ratingIsInt = Math.abs(Math.floor(userRating) - userRating) < EPSILON;
  const [hoverIndex, setHoverIndex] = useState(-1);
  const decimalPart = Math.abs(Math.floor(userRating) - userRating);
  const tokens = useTokenValues();
  const language = tokens.lang;
  const numeralList = useMemo(() => {
    return getNumbers(language);
  }, [language]);
  const getLocalNumber = (number) => {
    const numString = number.toString();
    return numString.replace(
      /\d/g,
      (num) => numeralList[parseInt(num, 10)] ?? num
    );
  };
  const roundedUserRating = Math.round(userRating);
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        rating: userRating,
        _role: props.type === "interactive" ? "radiogroup" : "img",
        ariaLabel: props.type === "interactive" ? `${roundedUserRating} star` : `Rated ${roundedUserRating} out of ${props.count} star`,
        _label: props.type === "read_only_compact" ? getLocalNumber(rating) : props.label,
        _onHover: (idx) => {
          setHoverIndex(idx);
        },
        _onHoverEnd: (idx) => {
          setHoverIndex(idx);
        },
        _items: Array.from({ length: props.count || 0 }).map((_, i) => {
          const isHalfRated = !ratingIsInt && i + 1 === Math.ceil(userRating);
          return {
            isInteractive: props.type === "interactive",
            itemAriaLabel: props.type === "interactive" ? `${i + 1} star` : void 0,
            itemAriaChecked: props.type === "interactive" ? userRating === i + 1 ? "true" : "false" : void 0,
            isActive: hoverIndex === -1 ? i + 1 <= userRating : i <= hoverIndex,
            isHalfRated,
            rating: isHalfRated ? 100 * (1 - decimalPart) + "%" : void 0,
            onChange: (index) => {
              if (props.type === "interactive") {
                updateIndex(index + 1);
                props.onChange?.(index + 1);
              }
            }
          };
        })
      }
    }
  );
};

const Component$b = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$a;
  const { size = "undefined", labelPosition = "top_left", type = "interactive", disabled = false, state = "undefined", onChange = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ size, labelPosition, type, disabled, state, onChange, ...rest }, componentTag },
    "JDSRatingBar",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const RatingBar = withLogic$a(Component$b);
RatingBar.displayName = "RatingBar";
RatingBar.slotName = "jds_rating_bar";

const sdl$9 = { "metadata": { "version": "1.0.0", "id": "selector-1.0.0", "layerName": "jds_selector", "name": "JDSSelector", "description": "A selector is a control that allows the user choose a value from a range of options." }, "hierarchy": { "container": [{ "selector-container": ["jds_selector_item"] }, { "outer-container": ["inner-container"] }] }, "base": { "container": { "flex-direction": "{s_0}" }, "selector-container": { "opacity": "{s_1}", "align-items": "{s_2}", "justify-content": "{s_3}", "border-radius": "{s_4}", "padding-top": "{s_5}", "padding-right": "{s_6}", "padding-bottom": "{s_7}", "padding-left": "{s_8}", "gap": "{s_15}", "flex-direction": "{s_16}" }, "jds_selector_item": { "wrap": "horizontal", "kind": "label_icon" }, "outer-container": { "z-index": -1, "justify-content": "{s_19}", "background-color": "{s_13}", "border-radius": "{s_4}", "align-items": "{s_20}", "padding-top": "{s_9}", "padding-right": "{s_10}", "padding-bottom": "{s_11}", "padding-left": "{s_12}", "width": "{s_17}", "height": "{s_18}", "disabled": true, "transition": { "property": ["padding-left"], "duration": "{rapid}", "timing-function": "{easeJoyful}" } }, "inner-container": { "background-color": "{s_21}", "border-radius": "{s_22}", "show": true, "transition": { "property": ["width"], "duration": "{rapid}", "timing-function": "{easeJoyful}" } } }, "variant": { "stretch": { "true": { "container": { "width": "{s_23}" }, "selector-container": { "width": "{s_24}" }, "jds_selector_item": { "flex": 1, "stretch": true } } }, "wrap": { "vertical": { "jds_selector_item": { "wrap": "vertical" } } }, "kind": { "label": { "jds_selector_item": { "kind": "label" } }, "icon": { "jds_selector_item": { "kind": "icon" } } } }, "combination": [{}], "combination_config": [[]], "api": { "config": { "stretch": { "values": [false, true], "doc_description": "It can be used to fill the container in which Selector is present." }, "kind": { "type": "JDSSelectorItem.kind", "values": ["label_icon", "label", "icon"] }, "wrap": { "type": "JDSSelectorItem.wrap", "values": ["horizontal", "vertical"] } }, "data": { "selector-container": { "value": { "type": "list", "name": "items", "object": { "value": "string", "label": "string", "id": "string", "icon": "icon", "disabled": "boolean" } } }, "jds_selector_item": { "selectedIndex": { "type": "number", "name": "selectedIndex", "doc_description": "It gives the current index of selected button of Selector. User can overwrite it by passing a new value." }, "value": { "type": "string", "name": "items.value" }, "label": { "type": "string", "name": "items.label" }, "id": { "type": "string", "name": "items.id" }, "icon": { "type": "icon", "name": "items.icon" }, "disabled": { "type": "boolean", "name": "items.disabled" } }, "outer-container": { "padding-left": { "type": "size", "name": "_left" } }, "inner-container": { "width": { "type": "size", "name": "_width" }, "height": { "type": "size", "name": "_height" } } }, "events": { "jds_selector_item": { "onAppear": { "name": "_onAppear", "platform": "ios, android" }, "onClick": "onClick" }, "container": { "onAppear": { "name": "_onSelectorAppear", "platform": "ios" } } }, "a11y": { "selector-container": { "name": "items", "properties": { "role": { "value": "radiogroup" } }, "repeating": { "ariaLabel": "ariaLabel", "ariaDescribedby": { "name": "ariaDescribedby", "platform": "web,ios" }, "iconAriaLabel": "iconAriaLabel" } }, "jds_selector_item": { "properties": { "ariaLabel": "items.ariaLabel", "ariaDescribedby": "items.ariaDescribedby", "iconAriaLabel": "items.iconAriaLabel" } } } } };

const withLogic$9 = (Component) => ({ items: userItems = [], ...props }) => {
  const [selectedIndex, setSelectedIndex] = useState(
    props.selectedIndex || 0
  );
  const [dimensions, setDimensions] = useState({
    left: 0,
    width: 0,
    height: 0
  });
  const { rootRef } = useRootRef(
    (element) => {
      const updateDimensions = () => {
        const selectorContainers2 = Array.from(
          element?.querySelectorAll("div.j-JDSSelectorItem-container") || []
        );
        const selectedContainer = selectorContainers2[selectedIndex];
        if (selectedContainer) {
          setDimensions({
            left: selectedContainer?.offsetLeft,
            width: selectedContainer?.offsetWidth,
            height: selectedContainer?.offsetHeight
          });
        }
      };
      updateDimensions();
      const resizeObserver = new ResizeObserver(() => {
        updateDimensions();
      });
      const selectorContainers = element?.querySelectorAll("div.j-JDSSelectorItem-container") || [];
      selectorContainers.forEach((container) => {
        resizeObserver.observe(container);
      });
      return () => {
        resizeObserver.disconnect();
      };
    },
    [selectedIndex, props.stretch, props.wrap]
  );
  useEffect(() => {
    if (typeof props.selectedIndex === "number") {
      setSelectedIndex(props.selectedIndex);
    } else {
      setSelectedIndex(0);
    }
  }, [props.selectedIndex]);
  const items = userItems.map((item, i) => ({
    ...item,
    selected: selectedIndex === i,
    selectedIndex,
    onClick: (ev) => {
      setSelectedIndex(i);
      props.onChange?.(item.value, i, ev);
    }
  }));
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        selectedIndex,
        items,
        rootRef,
        _left: dimensions.left,
        _width: dimensions.width,
        _height: dimensions.height
      }
    }
  );
};

const Component$a = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$9;
  const { stretch = false, kind = "undefined", wrap = "undefined", onClick = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ stretch, kind, wrap, onClick, ...rest }, componentTag },
    "JDSSelector",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const Selectors = withLogic$9(Component$a);
Selectors.displayName = "Selectors";
Selectors.slotName = "jds_selector";

const sdl$8 = { "metadata": { "version": "1.0.0", "id": "service-card-1.0.0", "name": "JDSServiceCard", "layerName": "jds_service_card", "description": "Service cards are blocks of images and text aiming to promote and connect services.", "usage": "Service cards are used to drive users from one Jio service to another." }, "hierarchy": { "root-container": [{ "inner-stack-container": ["blur-image", { "internal-vertical-container": [{ "image-container": ["jds_image"] }, { "content-block-container": ["jds_content_block"] }] }] }, "jds_badge"] }, "base": { "root-container": { "flex-direction": "{s_0}", "size": "{s_2}", "justify-content": "{s_4}", "align-items": "{s_6}", "border-radius": "{s_7}", "overflow": "hidden" }, "inner-stack-container": { "flex-direction": "{s_1}", "size": "{s_3}", "justify-content": "{s_5}", "align-items": "{alignItems.end}", "overflow": "hidden" }, "blur-image": { "height": "{s_8}", "width": "{s_9}", "object-fit": "cover", "blur-radius": "{s_10}", "z-index": 0 }, "internal-vertical-container": { "flex-direction": "{s_12}", "size": "{s_13}", "justify-content": "{s_14}", "align-items": "{s_15}", "z-index": 1 }, "image-container": { "flex-direction": "{s_16}", "justify-content": "{s_17}", "align-items": "{s_18}", "height": "{s_19}", "width": "{s_20}", "overflow": "hidden" }, "jds_image": { "aspectRatio": "horizontal_16_9", "roundedCorner": false, "imageFocus": "center" }, "jds_badge": { "kind": "service", "padding-top": "{s_21}", "padding-left": "{s_22}", "z-index": 1 }, "content-block-container": { "background-color": "{s_23}", "width": "{s_24}", "padding-top": "{s_25}", "padding-bottom": "{s_26}", "padding-left": "{s_27}", "padding-right": "{s_28}" }, "jds_content_block": { "size": "xtra-xtra-small", "invertCTA": false, "ctaWrap": "horizontal", "shouldOverrideColor": true, "singleButton": true, "width": "{s_29}" } }, "variant": { "imageRatio": { "square": { "jds_image": { "aspectRatio": "square" } }, "landscape": { "jds_image": { "aspectRatio": "horizontal_4_3" } }, "portrait": { "jds_image": { "aspectRatio": "vertical_4_5" } } }, "shadow": { "true": { "root-container": { "box-shadow": { "x": 0, "y": 4, "blur": 16, "spread": 0, "color": "#00000014" } } } }, "size": { "xtra-small": { "jds_content_block": { "size": "xtra-small" } }, "small": { "jds_content_block": { "size": "small" } } }, "_hasFullCardCTA": { "true": { "root-container": { "behavior": { "hover": { "box-shadow": { "x": 0, "y": 4, "blur": 16, "spread": 0, "color": "#00000014" } } } } } } }, "api": { "config": { "size": { "values": ["xtra-xtra-small", "xtra-small", "small"], "doc_description": "Determines the size of the ContentBlock. Size dictates the text and spacing. For size=`xxs`, the layout also changes if only a single CTA is sent." }, "imageRatio": { "values": ["wide", "square", "landscape", "portrait"] }, "shadow": { "values": [false, true], "doc_description": "Toggle drop shadow" }, "_hasFullCardCTA": { "values": [false, true] } }, "data": { "root-container": { "fullCardCTA": { "type": "string", "name": "fullCardCTA", "doc_description": "When present, the entire card is clickable." } }, "jds_content_block": { "title": { "type": "string", "name": "title", "doc_description": "The main title copy." }, "description": { "type": "string", "name": "description", "doc_description": "Accepts description as string. JSX.Element is also allowed in case you have anchor tags inside your richtext." }, "primaryCTA": { "type": "string", "name": "primaryCTA" }, "children": { "type": "slot", "name": "children" } }, "jds_image": { "src": { "type": "image", "name": "image" }, "imageFocus": { "type": "JDSImage.imageFocus", "name": "imageFocus" } }, "blur-image": { "value": { "type": "image", "name": "image" } }, "jds_badge": { "label": { "type": "string", "name": "badgeLabel" }, "icon": { "type": "icon", "name": "badgeIcon" } } }, "events": { "root-container": { "onClick": "onClick" }, "jds_content_block": { "onPrimaryClick": "onPrimaryClick" } }, "a11y": { "root-container": { "name": "serviceCard" }, "jds_content_block": { "properties": { "primaryCtaAriaLabel": "primaryCtaAriaLabel", "primaryCtaAriaDescribedby": { "name": "primaryCtaAriaDescribedby", "platform": "web,ios" } } }, "jds_image": { "properties": { "ariaLabel": "imageAriaLabel", "ariaDescribedby": { "name": "imageAriaDescribedby", "platform": "web,ios" } } }, "jds_badge": { "properties": { "ariaLabel": "badgeAriaLabel", "ariaDescribedby": { "name": "badgeAriaDescribedby", "platform": "web,ios" } } } } } };

const PROP_MAP$2 = (props) => {
  if (typeof props.description === "object") {
    console.warn("passing description as an element is deprecated");
  }
  if (typeof props.image === "object") {
    console.warn("passing image as an element is deprecated");
  }
  return {
    image: {
      properties: {
        image: resolvePropObjectKeys(props.image, "props.src", "")
      }
    },
    caption: {
      properties: {
        badgeLabel: props.caption?.label,
        badgeIcon: props.caption?.icon
      }
    },
    size: {
      defaultValue: "xxs",
      variations: {
        s: {
          size: "small"
        },
        xs: {
          size: "xtra-small"
        },
        xxs: {
          size: "xtra-xtra-small"
        }
      }
    }
  };
};
const withLogic$8 = (Component) => (userProps) => {
  const props = modifyProps(userProps, PROP_MAP$2);
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$9 = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$8;
  const { size = "xtra-xtra-small", imageRatio = "wide", shadow = false, onClick = noop, onPrimaryClick = noop, custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ size, imageRatio, shadow, onClick, onPrimaryClick, ...rest }, componentTag },
    "JDSServiceCard",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const ServiceCard = withLogic$8(Component$9);
ServiceCard.displayName = "ServiceCard";
ServiceCard.slotName = "jds_service_card";

const sdl$7 = { "metadata": { "version": "1.0.0", "id": "slider-1.0.0", "name": "JDSSlider", "layerName": "jds_slider", "description": "Continuous Sliders allow the selection of a value within a given range.", "usage": "Use Continuous Sliders whenever it makes easy for the user to select a value within a minimum and maximum range. Sliders work best when the specific value does not matter to the user, but an approximate value is good enough." }, "hierarchy": { "container": [{ "top-container": ["label-jds-text", { "inner-container": ["value-jds-text", "jds_input"] }] }, "slider", { "bottom-container": ["min-jds-text", "max-jds-text"] }, "jds_feedback_block", "helper-jds-text"] }, "base": { "container": { "hidden": false, "flex-direction": "{s_0}", "justify-content": "{s_1}", "align-items": "{s_2}", "width": "{s_3}", "gap": "{s_4}" }, "top-container": { "hidden": false, "flex-direction": "{s_5}", "justify-content": "{s_6}", "align-items": "{s_7}", "width": "{s_8}", "gap": "{s_9}" }, "inner-container": { "hidden": false, "height": 32, "align-items": "{s_12}", "padding-left": "{s_13}", "padding-right": "{s_14}", "border-width": "{s_15}", "border-color": "{s_16}", "border-radius": "{s_17}" }, "jds_input": { "disabled": false, "hidden": true, "type": "number", "textAlign": "end", "rows": 1, "width": 93 }, "slider": { "width": "{s_18}", "track-height": "{s_19}", "inactive-color": "{s_20}", "active-color": "{s_21}", "ball-size": 20, "ball-color": "{s_22}", "ball-border-color": "{s_23}", "ball-border-width": 0, "border-radius": "{s_24}", "behavior": { "hover": { "ball-color": "{s_25}" }, "active": { "active-color": "{s_26}", "ball-color": "{s_27}" }, "focus": { "ball-border-width": "{s_28}" } } }, "bottom-container": { "hidden": false, "show": false, "flex-direction": "{s_29}", "justify-content": "{s_30}", "align-items": "{s_31}", "width": "{s_32}" }, "jds_feedback_block": { "size": "s", "hidden": true }, "label-jds-text": { "font-family": "{bodyXs}", "color": "{primaryGrey80}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": false, "flex": 1, "justify-content": "{s_10}", "align-items": "{s_11}", "behavior": { "hover": { "color": "{primaryGrey100}" }, "focus": { "color": "{primaryGrey100}" } } }, "value-jds-text": { "font-family": "{bodyS}", "color": "{primaryGrey100}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": false }, "min-jds-text": { "font-family": "{bodyXs}", "color": "{primaryGrey80}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" }, "max-jds-text": { "font-family": "{bodyXs}", "color": "{primaryGrey80}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" }, "helper-jds-text": { "font-family": "{bodyXs}", "color": "{primaryGrey80}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": false } }, "variant": { "_hideMinMaxLabel": { "true": { "bottom-container": { "hidden": true } } }, "editableTextBox": { "true": { "jds_input": { "hidden": false }, "value-jds-text": { "hidden": true } } }, "state": { "success": { "inner-container": { "border-color": "{s_33}" }, "jds_feedback_block": { "hidden": false } }, "error": { "inner-container": { "border-color": "{s_34}" }, "jds_feedback_block": { "hidden": false } }, "warning": { "inner-container": { "border-color": "{s_35}" }, "jds_feedback_block": { "hidden": false } } }, "disabled": { "true": { "container": { "disabled": true, "opacity": "{s_36}" }, "jds_input": { "disabled": true }, "slider": { "disabled": true, "behavior": { "hover": { "ball-color": "{s_37}" }, "active": { "active-color": "{s_38}", "ball-color": "{s_39}" }, "focus": { "ball-border-width": 0 } } } } } }, "combination": [{}], "combination_config": [[]], "api": { "config": { "_hideMinMaxLabel": { "values": [false, true] }, "editableTextBox": { "values": [false, true], "doc_description": " It allows user to input their own number in the text box that moves the slider value. By default this textbox is in readonly mode." }, "state": { "type": "JDSFeedbackBlock.state", "doc_description": "It can be used to choose between states i.e. 'success','warning','error','none'.", "values": ["none", "success", "error", "warning"] }, "disabled": { "values": [false, true], "doc_description": "It can be used to enable or disable SearchBox." } }, "data": { "jds_input": { "id": { "type": "string", "name": "id" }, "name": { "type": "string", "name": "name" }, "value": { "type": "string", "name": "valueSuffix", "function": true }, "placeholder": { "type": "string", "name": "placeholder" }, "min": { "type": "float", "name": "min", "function": true, "doc_description": "It is minimum value for Slider." }, "max": { "type": "float", "name": "max", "function": true, "doc_description": "It is maximum value for Slider." }, "required": { "type": "boolean", "name": "required" } }, "slider": { "step": { "type": "number", "name": "step", "doc_description": "It determines number of divisions slider should slide by." }, "min": { "type": "float", "name": "min", "function": true, "doc_description": "It is minimum value for Slider." }, "max": { "type": "float", "name": "max", "function": true, "doc_description": "It is maximum value for Slider." }, "value": { "type": "float", "name": "value", "function": true, "doc_description": "It takes user input for value of Slider." }, "required": { "type": "boolean", "name": "required" } }, "jds_feedback_block": { "stateText": { "type": "string", "name": "stateText", "doc_description": "It displays message with respect to its [state] selected." }, "state": { "type": "JDSFeedbackBlock.state", "name": "state" } }, "label-jds-text": { "value": { "type": "string", "name": "label", "doc_description": "It displays label of Slider." } }, "value-jds-text": { "value": { "type": "string", "name": "valueSuffix", "function": true } }, "min-jds-text": { "value": { "type": "string", "name": "labelMin" } }, "max-jds-text": { "value": { "type": "string", "name": "labelMax" } }, "helper-jds-text": { "value": { "type": "string", "name": "helperText", "doc_description": "It displays helper text of Slider." } } }, "events": { "slider": { "onChange": "onValueChange", "onEditChange": { "name": "onEditChange", "platform": "ios" } }, "jds_input": { "onFocus": "onFocus", "onBlur": "onBlur", "onChange": "onChange", "onSubmit": "onSubmit", "onKeydown": { "name": "onKeydown", "platform": "web" } } }, "a11y": { "slider": { "name": "container", "properties": { "role": { "value": "slider" }, "aria-label": { "name": "ariaLabel", "prop": "label", "function": true }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" }, "aria-valuenow": { "name": "_ariaValuenow", "prop": "value", "platform": "web,ios" }, "aria-valuemin": { "name": "_ariaValuemin", "prop": "min", "platform": "web,ios" }, "aria-valuemax": { "name": "_ariaValuemax", "prop": "max", "platform": "web,ios" } } } } } };

const PROP_MAP$1 = (props) => ({
  onChange: {
    properties: {
      onChange: props.onChange,
      onValueChange: props.onChange
    }
  }
});
function getSteppedValue(value, step = 1, min = 0, max = 100) {
  if (typeof value !== "number") {
    return min;
  }
  step = step > 0 ? step : 1;
  const clamped = clamp(value, min, max);
  return Math.round((clamped - min) / step) * step + min;
}
const clamp = (value, min, max) => Math.max(min, Math.min(value, max));
const withLogic$7 = (Component) => (userProps) => {
  const props = modifyProps(userProps, PROP_MAP$1);
  const { value: userValue = 0 } = props;
  const { inputState, onInvalid, stateText } = useInputState(
    props.state,
    props.required,
    props.onInvalid,
    props.stateConfig
  );
  const [value, setValue] = useState(userValue);
  const [inputValue, setInputValue] = useState(userValue);
  useEffect(() => {
    setValue(userValue);
    setInputValue(userValue);
  }, [userValue]);
  const getSuffixValue = (value2, editable) => {
    if (editable) {
      return value2;
    }
    return Intl.NumberFormat().format(value2);
  };
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        value,
        valueSuffix: getSuffixValue(inputValue, props.editableTextBox),
        state: inputState,
        stateText: stateText || props.stateText,
        onInvalid,
        label: getRequiredLabel(props.label, props.required),
        max: props.max || 100,
        min: props.min || 0,
        onBlur: (ev) => {
          const currentValue = ev.target.value ? parseInt(ev.target.value) : value;
          const steppedValue = getSteppedValue(
            currentValue,
            props.step,
            props.min,
            props.max
          );
          setValue(steppedValue);
          const tracker = Object.getOwnPropertyDescriptor(
            window.HTMLInputElement.prototype,
            "value"
          )?.set;
          tracker?.call(ev.target, currentValue);
          setInputValue(steppedValue);
          props?.onChange?.({
            ...ev,
            target: { ...ev.target, value: steppedValue }
          });
        },
        onChange: (ev) => {
          setInputValue(parseInt(ev.target.value));
        },
        onValueChange: (ev) => {
          setValue(parseInt(ev.target.value));
          setInputValue(ev.target.value);
          props?.onChange?.(ev);
        },
        labelMin: Intl.NumberFormat().format(props.min || 0),
        labelMax: Intl.NumberFormat().format(props.max || 100)
      }
    }
  );
};

const Component$8 = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$7;
  const { editableTextBox = false, state = "undefined", disabled = false, onValueChange = noop, onEditChange = noop, onFocus = noop, onBlur = noop, onChange = noop, onSubmit = noop, ariaLabel = props.label?.toString(), _ariaValuenow = props.value?.toString(), _ariaValuemin = props.min?.toString(), _ariaValuemax = props.max?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ editableTextBox, state, disabled, onValueChange, onEditChange, onFocus, onBlur, onChange, onSubmit, ariaLabel, _ariaValuenow, _ariaValuemin, _ariaValuemax, ...rest }, componentTag },
    "JDSSlider",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const InputSlider = withLogic$7(Component$8);
InputSlider.displayName = "InputSlider";
InputSlider.slotName = "jds_slider";

const sdl$6 = { "metadata": { "version": "1.0.0", "id": "table-1.0.0", "name": "JDSTable", "layerName": "jds_table", "description": "Simple tables display information in a tabular data format with rows and columns. The organize information in a way that's easy to scan so that users can look for patterns and develop insights from data.", "usage": "Simple tables are used on wide viewports only or whenever their layout can easily fit in the screen - not too many columns." }, "hierarchy": { "container": ["jds_table_body", "footer-jds-text"] }, "base": { "container": { "flex-direction": "{t_0}", "border-radius": "{t_2}", "border-width": "{t_3}", "border-color": "{t_4}", "overflow": "hidden", "align-items": "{t_6}" }, "footer-jds-text": { "font-family": "{bodyS}", "color": "{primaryGrey100}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "padding-left": "{t_7}", "padding-right": "{t_8}", "padding-top": "{t_9}", "padding-bottom": "{t_10}", "hidden": true } }, "variant": { "density": { "condensed": { "jds_table_body": { "density": "condensed" }, "footer-jds-text": { "padding-left": "{t_11}", "padding-right": "{t_12}", "padding-top": "{t_13}", "padding-bottom": "{t_14}" } } }, "columnDivider": { "true": { "jds_table_body": { "columnDivider": true } } }, "fullWidth": { "true": { "container": { "width": "{t_5}" }, "jds_table_body": { "fullWidth": true } } }, "_hasFooter": { "true": { "footer-jds-text": { "hidden": false } } } }, "api": { "config": { "density": { "type": "JDSTableCell.density", "values": ["relaxed", "condensed"] }, "background": { "values": [false, true] }, "columnDivider": { "values": [false, true], "doc_description": "Show/hide border between columns." }, "fullWidth": { "values": [false, true] }, "_hasFooter": { "values": [false, true] } }, "data": { "jds_table_body": { "rows": { "name": "rows", "type": "list", "object": { "cells": "list" }, "doc_description": "Pass rows as an array of objects {[HEADER_NAME_1]?: , [HEADER_NAME_2]?:...}, where each row is an object where:\n- the properties are equal to header names\n- values are displayed in columns\n- properties for non-existent header.name are ignored, warning is displayed\n- missing header property results in empty column" }, "zebra": { "type": "boolean", "name": "zebra" }, "background": { "type": "boolean", "name": "background" } }, "footer-jds-text": { "value": { "type": "string", "name": "footer", "doc_description": "Optional text at the bottom." } } }, "a11y": { "container": { "properties": { "role": { "value": "table" }, "aria-label": { "name": "ariaLabel", "value": "table" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" } } } } } };

const withLogic$6 = (Component) => (props) => {
  const isZebra = props.rowStyle === "zebra" || props.zebra;
  const rows = props.headers.map((header) => ({
    cells: [
      {
        text: header.value,
        type: "header",
        background: props.headerBackground || props.background
      },
      ...props.rows.map((row, i) => ({
        text: row[header.name] || ` `,
        background: isZebra && i % 2 === 0
      }))
    ]
  }));
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        rows,
        background: Boolean(props.headerBackground),
        _hasFooter: Boolean(props.footer)
      }
    }
  );
};

const Component$7 = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$6;
  const { density = "undefined", background = false, columnDivider = false, fullWidth = false, ariaLabel = "table", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ density, background, columnDivider, fullWidth, ariaLabel, ...rest }, componentTag },
    "JDSTable",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const Table = withLogic$6(Component$7);
Table.displayName = "Table";
Table.slotName = "jds_table";

const sdl$5 = { "metadata": { "version": "1.0.1", "id": "test-1.0.1", "name": "TestComponent", "layerName": "test_component", "internal": true }, "hierarchy": { "container": ["heading-text", "icon", "image"] }, "base": { "container": { "padding-top": "50", "padding-right": "50", "padding-bottom": "50", "padding-left": "50", "background-color": "blue", "border-color": "", "border-radius": "", "border-width": "", "border-style": "", "height": "", "width": "", "max-height": "", "min-height": "", "max-width": "", "min-width": "", "box-shadow": { "x": 0, "y": 4, "blur": 16, "spread": 0, "color": "#00000014" }, "opacity": "", "align-items": "", "justify-content": "", "flex-direction": "", "gap": "", "display": "", "outline": "", "pointer-events": "", "cursor": "", "z-index": "" }, "heading-text": { "color": "#f4f4f4", "align-items": "", "flex-direction": "", "font-family": "", "font-size": "", "font-weight": "", "gap": "", "justify-content": "", "letter-spacing": "", "line-height": "", "opacity": "", "outline": "", "padding-top": 50, "padding-right": 50, "padding-bottom": 50, "padding-left": 50, "pointer-events": "", "width": "", "z-index": "", "text-decoration": "", "text-overflow": "", "text-transform": "" }, "icon": { "background-color": "", "color": "", "padding-top": 50, "padding-right": 50, "padding-bottom": 50, "padding-left": 50, "height": "24", "width": "24", "size": "{m}", "opacity": "", "outline": "", "justify-content": "", "box-shadow": { "x": 0, "y": 4, "blur": 16, "spread": 0, "color": "#00000014" }, "align-items": "", "box-sizing": "" }, "image": { "align-items": "", "aspect-ratio": "{aspect_ratio.1.1}", "border-radius": "", "opacity": "", "hidden": true, "padding-top": "50", "padding-right": "50", "padding-bottom": "50", "padding-left": "50", "pointer-events": "", "box-shadow": { "x": 0, "y": 4, "blur": 16, "spread": 0, "color": "#00000014" }, "object-fit": "", "object-position": "" } }, "variant": { "kind": { "SERVICE": { "container": { "border-radius": "{pill}", "background-color": "#75757580", "padding-top": "{xxs}", "padding-left": "{xxs}", "padding-right": "{s}", "padding-bottom": "{xxs}", "gap": "{xs}" }, "heading-text": { "appearance": "BODY_M_BOLD", "color": "WHITE" }, "icon": { "size": "{m}", "color": "{global.transparent}" } } } }, "api": { "data": { "heading-text": { "value": { "type": "string", "name": "label" } }, "icon": { "value": { "type": "icon", "name": "icon" } }, "image": { "value": { "type": "image", "name": "image" } } }, "config": { "kind": { "values": ["NORMAL", "SERVICE"] } } } };

const withLogic$5 = (Component) => (props) => {
  return /* @__PURE__ */ jsx(Component, { ...props });
};

const Component$6 = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$5;
  const { kind = "NORMAL", custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ kind, ...rest }, componentTag },
    "TestComponent",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const TestComponent = withLogic$5(Component$6);
TestComponent.displayName = "TestComponent";
TestComponent.slotName = "test_component";

const sdl$4 = { "metadata": { "version": "1.0.0", "id": "textarea-1.0.0", "name": "JDSTextarea", "layerName": "jds_textarea", "description": "A Textarea lets a user input a longer amount of text than an input field, typically spanning across multiple lines.", "usage": "Use a textarea when the input being expected is likely to extend beyond one line." }, "hierarchy": { "container": ["label-border-jds-text", { "field-container": ["input_label-jds-text", { "input-container": ["input"] }] }, { "active-line-container": ["feedback-container"] }, "jds_feedback_block", "helper-jds-text"] }, "base": { "container": { "flex-direction": "{t_0}", "justify-content": "{t_1}", "align-items": "{t_2}", "gap": "{t_3}", "width": "{t_4}", "opacity": "{t_42}", "behavior": { "hover": {} } }, "field-container": { "flex-direction": "{t_5}", "width": "{t_6}", "padding-bottom": "{t_7}", "justify-content": "{t_8}", "align-items": "{t_9}" }, "input-container": { "flex-direction": "{t_10}", "justify-content": "{t_11}", "width": "{t_12}", "padding-top": 20, "align-items": "{t_13}", "z-index": 0 }, "input": { "disabled": false, "type": "textarea", "flex": 1, "text-align": "{t_14}", "placeholder-color": "{t_15}", "placeholder-font-family": "{t_16}", "placeholder-font-size": "{t_17}", "placeholder-line-height": "{t_18}", "placeholder-letter-spacing": "{t_19}", "placeholder-font-weight": "{t_20}", "input-color": "{t_21}", "input-font-family": "{t_22}", "input-font-size": "{t_23}", "input-line-height": "{t_24}", "input-letter-spacing": "{t_25}", "input-font-weight": "{t_26}", "resize-color": "{t_27}", "cursor-color": "{t_28}", "width": "{t_29}", "behavior": { "hover": { "resize-color": "{t_30}" }, "focus": { "resize-color": "{t_31}" }, "active": { "resize-color": "{t_32}" } } }, "active-line-container": { "flex-direction": "{t_33}", "width": "{t_34}", "align-items": "{t_35}", "padding-top": 1, "padding-bottom": 1 }, "feedback-container": { "width": "{t_36}", "height": 2, "background-color": "{t_37}", "border-radius": 48, "show": true, "hidden": false, "behavior": { "hover": { "background-color": "{t_38}" }, "focus": { "background-color": "{t_39}" }, "active": { "background-color": "{t_40}" } } }, "jds_feedback_block": { "size": "s", "state": "none" }, "label-border-jds-text": { "font-family": "{bodyS}", "color": "{primaryGrey80}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "max-lines": 1, "textType": "label", "hidden": true, "maxLines": 1 }, "input_label-jds-text": { "font-family": "{bodyS}", "color": "{primaryGrey80}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "max-lines": 1, "textType": "label", "maxLines": 1, "z-index": 1 }, "helper-jds-text": { "font-family": "{bodyXs}", "color": "{primaryGrey80}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" } }, "variant": { "disabled": { "true": { "container": { "opacity": "{t_41}" }, "input": { "disabled": true } } }, "border": { "true": { "feedback-container": { "hidden": true }, "input-container": { "padding-top": "{t_45}" }, "field-container": { "border-width": "{t_43}", "border-color": "{t_44}", "border-radius": "{t_46}", "padding-top": "{t_45}", "padding-bottom": "{t_47}", "padding-left": "{t_48}", "padding-right": "{t_49}" }, "input_label-jds-text": { "hidden": true }, "label-border-jds-text": { "hidden": false } } }, "state": { "success": { "feedback-container": { "background-color": "{t_50}", "behavior": { "hover": { "background-color": "{t_51}" }, "focus": { "background-color": "{t_52}" }, "active": { "background-color": "{t_53}" } } }, "field-container": { "border-color": "{t_50}" }, "input": { "resize-color": "{t_54}", "behavior": { "hover": { "resize-color": "{t_55}" }, "focus": { "resize-color": "{t_56}" }, "active": { "resize-color": "{t_57}" } } }, "jds_feedback_block": { "state": "success" } }, "error": { "feedback-container": { "background-color": "{t_58}", "behavior": { "hover": { "background-color": "{t_59}" }, "focus": { "background-color": "{t_60}" }, "active": { "background-color": "{t_61}" } } }, "field-container": { "border-color": "{t_58}" }, "input": { "resize-color": "{t_62}", "behavior": { "hover": { "resize-color": "{t_63}" }, "focus": { "resize-color": "{t_64}" }, "active": { "resize-color": "{t_65}" } } }, "jds_feedback_block": { "state": "error" } }, "warning": { "feedback-container": { "background-color": "{t_66}", "behavior": { "hover": { "background-color": "{t_67}" }, "focus": { "background-color": "{t_68}" }, "active": { "background-color": "{t_69}" } } }, "field-container": { "border-color": "{t_66}" }, "input": { "resize-color": "{t_70}", "behavior": { "hover": { "resize-color": "{t_71}" }, "focus": { "resize-color": "{t_72}" }, "active": { "resize-color": "{t_73}" } } }, "jds_feedback_block": { "state": "warning" } } }, "_labelFocus": { "true": { "field-container": { "align-items": "{t_74}" }, "input_label-jds-text": { "font-family": "{bodyXs}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}", "padding-top": 0 } } } }, "combination": [{ "none": { "true": { "feedback-container": { "background-color": "{t_75}" }, "input": { "resize-color": "{t_76}" } } } }, { "true": { "true": { "field-container": { "border-color": "{t_77}" }, "input": { "input-color": "{t_79}", "disabled": true, "resize-color": "{t_78}", "behavior": { "hover": { "resize-color": "{t_78}" }, "focus": { "resize-color": "{t_78}" }, "active": { "resize-color": "{t_78}" } } } } } }], "combination_config": [["state", "_inputFocus"], ["border", "readOnly"]], "api": { "config": { "disabled": { "values": [false, true], "doc_description": "It can be used to enable or disable SearchBox." }, "border": { "values": [false, true], "doc_description": "It can change the border of textArea" }, "state": { "type": "JDSFeedbackBlock.state", "doc_description": "It can be used to choose between states i.e. 'success','warning','error','none'.", "values": ["none", "success", "error", "warning"] }, "_labelFocus": { "values": [false, true] }, "_inputFocus": { "values": [false, true] }, "readOnly": { "values": [false, true], "doc_description": "It is used when border is set to true" } }, "data": { "input": { "id": { "type": "string", "name": "id", "platform": "web" }, "name": { "type": "string", "name": "name" }, "value": { "type": "string", "name": "value" }, "rows": { "type": "number", "name": "rows" }, "minLines": { "type": "number", "name": "minLines" }, "placeholder": { "type": "string", "name": "placeholder" }, "max-length": { "type": "number", "name": "maxLength" }, "required": { "type": "boolean", "name": "required" }, "focusRequester": { "type": "focusRequester", "name": "focusRequester", "platform": "android" }, "imeAction": { "type": "imeAction", "name": "imeAction", "platform": "android" }, "capitalization": { "type": "keyboardCapitalization", "name": "capitalization", "platform": "android" }, "semantics": { "type": "string", "name": "semantics", "platform": "android" } }, "jds_feedback_block": { "stateText": { "type": "string", "name": "stateText", "doc_description": "It displays message with respect to its [state] selected." } }, "label-border-jds-text": { "value": { "type": "string", "name": "label", "doc_description": "It displays label of Textarea." }, "id": { "type": "string", "name": "id", "platform": "web" } }, "input_label-jds-text": { "value": { "type": "string", "name": "label", "doc_description": "It displays label of Textarea." }, "id": { "type": "string", "name": "id", "platform": "web" } }, "helper-jds-text": { "value": { "type": "string", "name": "helperText", "doc_description": "It displays helper text of Textarea." } } }, "events": { "input": { "onFocus": "onFocus", "onBlur": "onBlur", "onChange": "onChange", "onKeydown": { "name": "onKeydown", "platform": "web" }, "onInvalid": "onInvalid", "onSubmit": "onSubmit" } }, "a11y": { "input": { "properties": { "aria-label": { "name": "ariaLabel", "prop": "label" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" }, "aria-invalid": "ariaInvalid", "aria-placeholder": { "name": "_ariaPlaceholder", "prop": "placeholder" }, "aria-required": { "name": "_ariaRequired", "prop": "required" } } } } } };

const withLogic$4 = (Component) => forwardRef(
  (props, ref) => {
    const { rootRef, element } = useRootRef();
    const { focused, _inputFocused, ...rest } = useFocusedLabel(
      props,
      element
    );
    const { inputState, onInvalid, stateText } = useInputState(
      props.state,
      props.required,
      props.onInvalid,
      props.stateConfig,
      props.stateText
    );
    return /* @__PURE__ */ jsx(
      Component,
      {
        ...{
          ...props,
          ...rest,
          rootRef,
          label: getRequiredLabel(props.label, props.required),
          _labelFocus: focused,
          _inputFocus: _inputFocused,
          state: inputState,
          stateText,
          onInvalid,
          layerRefs: { input: ref }
        }
      }
    );
  }
);

const Component$5 = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$4;
  const { disabled = false, border = false, state = "undefined", readOnly = false, onFocus = noop, onBlur = noop, onChange = noop, onInvalid = noop, onSubmit = noop, ariaLabel = props.label?.toString(), _ariaPlaceholder = props.placeholder?.toString(), _ariaRequired = props.required?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ disabled, border, state, readOnly, onFocus, onBlur, onChange, onInvalid, onSubmit, ariaLabel, _ariaPlaceholder, _ariaRequired, ...rest }, componentTag },
    "JDSTextarea",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const InputTextarea = withLogic$4(Component$5);
InputTextarea.displayName = "InputTextarea";
InputTextarea.slotName = "jds_textarea";

const sdl$3 = { "metadata": { "version": "1.0.0", "id": "toggle-1.0.0", "name": "JDSToggle", "description": "Interaction element for decision making that may or may not be accompanied by a label, depending on the context of use.", "layerName": "jds_toggle" }, "hierarchy": { "vertical-container": [{ "horizontal-container": [{ "prefix-icon-container": [{ "toggle-jds-icon-container": ["toggle-jds-icon"] }] }, "left-jds-text", { "pill-container": ["ball-container"] }, "right-jds-text"] }, "jds_feedback_block", "helper-jds-text"] }, "base": { "vertical-container": { "hidden": false, "flex-direction": "{t_1}", "justify-content": "{t_2}", "align-items": "{t_3}", "gap": "{t_4}", "opacity": "{t_42}" }, "horizontal-container": { "hidden": false, "flex-direction": "{t_5}", "justify-content": "{t_6}", "align-items": "{t_7}", "gap": "{t_8}", "behavior": { "hover": {}, "active": {}, "focus": {} } }, "pill-container": { "hidden": false, "min-width": "{t_9}", "min-height": "{t_10}", "flex-direction": "{t_11}", "justify-content": "{t_12}", "align-items": "{t_13}", "padding-left": "{t_14}", "padding-right": "{t_15}", "background-color": "{t_16}", "border-radius": "{t_17}", "border-width": "{t_18}", "border-color": "{t_19}", "behavior": { "hover": { "border-color": "{t_20}" }, "active": { "border-color": "{t_21}" }, "focus": { "border-width": "{t_24}", "box-shadow": { "x": 0, "y": 0, "blur": 0, "spread": "{t_22}", "color": "{t_23}" } } } }, "ball-container": { "hidden": false, "min-width": "{t_25}", "min-height": "{t_26}", "background-color": "{t_27}", "border-radius": "{t_28}", "show": true }, "prefix-icon-container": { "flex-direction": "{t_0}" }, "jds_feedback_block": { "size": "l" }, "left-jds-text": { "font-family": "{bodyS}", "color": "{primaryGrey80}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": false, "text-align": "{t_29}", "flex-fill-android": false, "behavior": { "hover": { "color": "{primaryGrey100}" }, "focus": { "color": "{primaryGrey100}" } } }, "right-jds-text": { "font-family": "{bodyS}", "color": "{primaryGrey80}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": true, "behavior": { "hover": { "color": "{primaryGrey100}" }, "focus": { "color": "{primaryGrey100}" } } }, "toggle-jds-icon": { "size": "{m}", "color": "{primaryGrey80}" }, "toggle-jds-icon-container": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{m}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}" }, "helper-jds-text": { "font-family": "{bodyS}", "color": "{primaryGrey80}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "hidden": false } }, "variant": { "size": { "small": { "pill-container": { "min-width": "{t_30}", "min-height": "{t_31}" }, "vertical-container": { "gap": "{t_32}" }, "ball-container": { "min-width": "{t_33}", "min-height": "{t_34}" }, "jds_feedback_block": { "size": "s" }, "left-jds-text": { "font-family": "{bodyXs}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}" }, "right-jds-text": { "font-family": "{bodyXs}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}" }, "toggle-jds-icon": { "size": "{base}" }, "toggle-jds-icon-container": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{base}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}" }, "helper-jds-text": { "font-family": "{bodyXs}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}" } } }, "labelPosition": { "right": { "left-jds-text": { "hidden": true }, "right-jds-text": { "hidden": false } } }, "checked": { "true": { "pill-container": { "justify-content": "{t_35}", "background-color": "{t_36}", "border-width": "{t_37}", "behavior": { "hover": { "background-color": "{t_38}" }, "active": { "background-color": "{t_39}" } } }, "ball-container": { "background-color": "{t_40}" }, "left-jds-text": { "color": "{primaryGrey100}" }, "right-jds-text": { "color": "{primaryGrey100}" }, "toggle-jds-icon": {}, "toggle-jds-icon-container": { "background-color": "{global.transparent}", "border-radius": "{pill}", "size": "{m}", "justify-content": "{justifyContent.center}", "align-items": "{alignItems.center}" } } }, "disabled": { "true": { "horizontal-container": { "disabled": true }, "prefix-icon-container": { "disabled": true }, "vertical-container": { "opacity": "{t_41}" } } } }, "api": { "config": { "checked": { "values": [false, true], "doc_description": "It can be used to programatically make input active/inactive." }, "labelPosition": { "values": ["left", "right"], "doc_description": "It can be used to position lable to either left or right of Toggle." }, "size": { "values": ["medium", "small"], "doc_description": "It can be used control the size of Toggle." }, "disabled": { "values": [false, true], "doc_description": "It can be used to enable or disable Toggle." } }, "data": { "jds_feedback_block": { "stateText": { "type": "string", "name": "stateText", "doc_description": "It displays message with respect to its [state] selected." }, "state": { "type": "JDSFeedbackBlock.state", "name": "state", "doc_description": "It can be used to choose between states i.e. 'success','warning','error','none'." } }, "left-jds-text": { "value": { "type": "string", "name": "label", "doc_description": "It displays label of Toggle." } }, "right-jds-text": { "value": { "type": "string", "name": "label", "doc_description": "It displays label of Toggle." } }, "toggle-jds-icon": { "value": { "type": "icon", "name": "icon", "doc_description": "Take icon input for Toggle." }, "ic": { "type": "icon", "name": "icon", "doc_description": "Take icon input for Toggle." } }, "helper-jds-text": { "value": { "type": "string", "name": "helperText", "doc_description": "It displays helper text of Toggle." } } }, "events": { "horizontal-container": { "onClick": "onClick" }, "prefix-icon-container": { "onClick": "onPrefixClick" } }, "a11y": { "vertical-container": { "properties": { "role": { "value": "switch" }, "aria-label": { "name": "ariaLabel", "prop": "label" }, "aria-describedby": { "name": "ariaDescribedby", "platform": "web,ios" }, "aria-checked": { "name": "_ariaChecked", "prop": "checked" } } } } } };

const useSwitch = (value) => {
  const [switchState, setSwitchState] = useState(false);
  useEffect(() => {
    setSwitchState(Boolean(value));
  }, [value]);
  return { switchState, onChange: (value2) => setSwitchState(value2) };
};

const withLogic$3 = (Component) => (props) => {
  const { switchState, onChange } = useSwitch(props.checked);
  const { stateText, inputState } = useInputState(
    props.state,
    false,
    void 0,
    props.stateConfig,
    props.stateText
  );
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        _hasIcon: Boolean(props.icon || props.prefix),
        state: inputState,
        stateText,
        icon: props.icon,
        checked: switchState,
        onClick: (ev) => {
          onChange?.(!switchState);
          props.onChange?.({
            ...ev,
            target: {
              ...ev.target,
              value: props.value || "",
              checked: !switchState
            }
          });
        }
      }
    }
  );
};

const Component$4 = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$3;
  const { checked = false, labelPosition = "left", size = "medium", disabled = false, onClick = noop, onPrefixClick = noop, ariaLabel = props.label?.toString(), _ariaChecked = props.checked?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ checked, labelPosition, size, disabled, onClick, onPrefixClick, ariaLabel, _ariaChecked, ...rest }, componentTag },
    "JDSToggle",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const InputToggle = withLogic$3(Component$4);
InputToggle.displayName = "InputToggle";
InputToggle.slotName = "jds_toggle";

const sdl$2 = { "metadata": { "version": "2.0.0", "id": "input-field-2.0.0", "name": "JDSInputFieldV2", "layerName": "jds_input_field_v2" }, "hierarchy": { "container": [{ "label-container": ["input_label-jds-text", "info-slot"] }, { "input-container": ["prefix-slot", "jds_input", "suffix-slot"] }, { "helper-container": ["jds_feedback_block", "helper-jds-text"] }, { "dynamic-container": ["dynamic-jds-text", "dynamic-jds_action_button"] }] }, "base": { "container": { "flex-direction": "{i_1}", "width": "{i_2}", "justify-content": "{i_3}", "align-items": "{i_4}", "opacity": "{i_5}", "gap": "{i_9}" }, "label-container": { "flex-direction": "{i_6}", "justify-content": "{i_7}", "align-items": "{i_8}", "gap": "{i_9}" }, "input-container": { "flex-direction": "{i_13}", "justify-content": "{i_14}", "align-items": "{i_15}", "width": "{i_16}", "height": "{i_17}", "gap": "{i_18}", "padding-left": "{i_19}", "padding-right": "{i_20}", "border-width": "{i_23}", "border-color": "{i_24}", "border-radius": "{i_26}", "behavior": { "hover": { "border-color": "{i_27}" }, "active": { "border-color": "{i_28}" }, "focus": { "border-color": "{i_29}" } } }, "jds_input": { "type": "text", "textAlign": "{i_30}", "rows": 1, "flex": "{i_31}" }, "helper-container": { "flex-direction": "{i_32}", "justify-content": "{i_33}", "align-items": "{i_34}", "gap": "{i_35}" }, "jds_feedback_block": { "size": "s", "state": "none", "alignment": "top" }, "dynamic-container": { "flex-direction": "{i_40}", "justify-content": "{i_41}", "align-items": "{i_42}", "gap": "{i_36}", "hidden": false }, "dynamic-jds_action_button": { "kind": "tertiary", "size": "small" }, "input_label-jds-text": { "font-family": "{bodyXs}", "color": "{primaryGrey80}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "max-lines": 1, "textType": "label", "maxLines": 1 }, "helper-jds-text": { "font-family": "{bodyXs}", "color": "{primaryGrey80}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" }, "dynamic-jds-text": { "font-family": "{bodyXs}", "color": "{primaryGrey60}", "font-size": "{bodyXs}", "line-height": "{bodyXs}", "letter-spacing": "{bodyXs}", "font-weight": "{bodyXs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}" } }, "variant": { "_hasDynamic": { "false": { "dynamic-container": { "hidden": true } } }, "_noPrefix": { "true": { "input-container": { "padding-left": "{i_0}" } } }, "disabled": { "true": { "container": { "opacity": "{i_45}", "disabled": true }, "jds_input": { "disabled": true }, "prefix-slot": { "disabled": true }, "suffix-slot": { "disabled": true } } }, "state": { "success": { "input-container": { "border-color": "{i_46}", "behavior": { "hover": { "border-color": "{i_47}" }, "focus": { "border-color": "{i_48}" }, "active": { "border-color": "{i_49}" } } }, "jds_feedback_block": { "state": "success" } }, "error": { "input-container": { "border-color": "{i_50}", "behavior": { "hover": { "border-color": "{i_51}" }, "focus": { "border-color": "{i_52}" }, "active": { "border-color": "{i_53}" } } }, "jds_feedback_block": { "state": "error" } }, "warning": { "input-container": { "border-color": "{i_54}", "behavior": { "hover": { "border-color": "{i_55}" }, "focus": { "border-color": "{i_56}" }, "active": { "border-color": "{i_57}" } } }, "jds_feedback_block": { "state": "warning" } } }, "size": { "small": { "input-container": { "height": "{i_58}" } }, "large": { "input-container": { "height": "{i_61}", "gap": "{i_62}", "padding-left": "{i_63}", "padding-right": "{i_64}" }, "jds_feedback_block": { "size": "l" }, "input_label-jds-text": { "font-family": "{bodyS}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}" }, "helper-jds-text": { "font-family": "{bodyS}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}" }, "dynamic-jds-text": { "font-family": "{bodyS}", "font-size": "{bodyS}", "line-height": "{bodyS}", "letter-spacing": "{bodyS}", "font-weight": "{bodyS}" } } }, "type": { "email": { "jds_input": { "type": "email" } }, "number": { "jds_input": { "type": "number" } }, "password": { "jds_input": { "type": "password" } }, "pin": { "jds_input": { "type": "number", "letterSpacing": 12, "textAlign": "center" } }, "phone": { "jds_input": { "type": "phone" } } }, "readOnly": { "true": { "jds_input": { "readOnly": true, "color": "primary_grey_80" }, "input-container": { "border-color": "{i_25}" } } } }, "api": { "children": { "prefix-slot": { "name": "prefix", "accepts": ["jds_text", "jds_icon", "jds_input_phone_dropdown"], "function": true }, "suffix-slot": { "name": "suffix", "accepts": ["jds_button", "jds_icon", "jds_spinner"], "function": true }, "info-slot": { "name": "info", "accepts": ["any"], "max": 1 } }, "config": { "_hasDynamic": { "values": [true, false] }, "_noPrefix": { "values": [true, false] }, "state": { "type": "JDSFeedbackBlock.state", "values": ["none", "success", "error", "warning"] }, "size": { "values": ["medium", "small", "large"] }, "type": { "values": ["text", "email", "number", "password", "pin", "phone"] }, "disabled": { "values": [false, true] }, "readOnly": { "values": [false, true] } }, "data": { "jds_input": { "id": { "type": "string", "name": "id", "platform": "web" }, "value": { "type": "string", "name": "value" }, "autocomplete": { "type": "string", "name": "autocomplete", "platform": "web" }, "name": { "type": "string", "name": "name" }, "autoFocus": { "type": "boolean", "name": "autoFocus", "platform": "web,ios" }, "placeholder": { "type": "string", "name": "placeholder" }, "maxLength": { "type": "number", "name": "maxLength" }, "pattern": { "type": "string", "name": "pattern" }, "required": { "type": "boolean", "name": "required" }, "focusRequester": { "type": "focusRequester", "name": "focusRequester", "platform": "android" }, "imeAction": { "type": "imeAction", "name": "imeAction", "platform": "android" }, "capitalization": { "type": "keyboardCapitalization", "name": "capitalization", "platform": "android" } }, "jds_feedback_block": { "stateText": { "type": "string", "name": "stateText" } }, "dynamic-jds_action_button": { "label": { "type": "string", "name": "dynamicButtonText" } }, "input_label-jds-text": { "value": { "type": "string", "name": "label", "function": true }, "id": { "type": "string", "name": "id", "platform": "web" } }, "helper-jds-text": { "value": { "type": "string", "name": "helperText" } }, "dynamic-jds-text": { "value": { "type": "string", "name": "dynamicText" } } }, "events": { "jds_input": { "onFocus": "onFocus", "onBlur": "onBlur", "onChange": "onChange", "onKeydown": { "name": "onKeydown", "platform": "web" }, "onInvalid": "onInvalid", "onSubmit": "onSubmit" }, "prefix-slot": { "onClick": "onPrefixClick" }, "suffix-slot": { "onClick": "onSuffixClick" }, "dynamic-jds_action_button": { "onClick": "onButtonClick" } }, "a11y": { "jds_input": { "properties": { "ariaLabel": { "name": "ariaLabel", "prop": "label" }, "ariaDescribedby": { "name": "ariaDescribedby", "platform": "web,ios" }, "ariaInvalid": "ariaInvalid", "ariaPlaceholder": { "name": "_ariaPlaceholder" }, "ariaRequired": { "name": "_ariaRequired", "prop": "required" } } }, "dynamic-jds_action_button": { "properties": { "ariaLabel": { "name": "dynamicButtonAriaLabel", "prop": "dynamicButtonText" }, "ariaDescribedby": { "name": "dynamicButtonAriaDescribedby", "platform": "web,ios" } } } } } };

const withLogic$2 = (Component) => forwardRef((props, ref) => {
  const handlePrefixClick = (event) => {
    props.onPrefixClick?.(event);
  };
  const handleSuffixClick = (event) => {
    props.onSuffixClick?.(event);
  };
  const handlephonetype = (event) => {
    const { value } = event.target;
    if (props.type === "phone") {
      const filteredValue = value.replace(/[^\d+]/g, "");
      event.target.value = filteredValue;
    }
    props.onChange?.(event);
  };
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{ ...props, layerRefs: { input: ref } },
      prefix: getIcon(props.prefix, handlePrefixClick),
      suffix: getIcon(props.suffix, handleSuffixClick),
      label: getRequiredLabel(props.label, props.required),
      _hasDynamic: Boolean(props.dynamicText || props.dynamicButtonText),
      _noPrefix: !props.prefix,
      onChange: handlephonetype
    }
  );
});

const Component$3 = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$2;
  const { state = "undefined", size = "medium", type = "text", disabled = false, readOnly = false, onFocus = noop, onBlur = noop, onChange = noop, onInvalid = noop, onSubmit = noop, onPrefixClick = noop, onSuffixClick = noop, onButtonClick = noop, ariaLabel = props.label?.toString(), dynamicButtonAriaLabel = props.dynamicButtonText?.toString(), _ariaRequired = props.required?.toString(), custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...{ state, size, type, disabled, readOnly, onFocus, onBlur, onChange, onInvalid, onSubmit, onPrefixClick, onSuffixClick, onButtonClick, ariaLabel, dynamicButtonAriaLabel, _ariaRequired, ...rest }, componentTag },
    "JDSInputFieldV2",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const InputFieldV2 = withLogic$2(Component$3);
InputFieldV2.displayName = "InputFieldV2";
InputFieldV2.slotName = "jds_input_field_v2";

const PROP_MAP = (props) => ({
  color: {
    properties: {},
    variations: {
      "primary-grey-100": {
        color: "primary_grey_100"
      },
      "primary-80": {
        color: "primary_80"
      },
      "primary-70": {
        color: "primary_70"
      },
      "primary-60": {
        color: "primary_60"
      },
      "primary-50": {
        color: "primary_50"
      },
      "primary-40": {
        color: "primary_40"
      },
      "primary-30": {
        color: "primary_30"
      },
      "primary-20": {
        color: "primary_20"
      },
      "primary-inverse": {
        color: "primary_inverse"
      },
      "primary-background": {
        color: "primary_background"
      },
      "primary-grey-80": {
        color: "primary_grey_80"
      },
      "primary-grey-60": {
        color: "primary_grey_60"
      },
      "primary-grey-40": {
        color: "primary_grey_40"
      },
      "primary-grey-20": {
        color: "primary_grey_20"
      },
      "secondary-80": {
        color: "secondary_80"
      },
      "secondary-70": {
        color: "secondary_70"
      },
      "secondary-60": {
        color: "secondary_60"
      },
      "secondary-50": {
        color: "secondary_50"
      },
      "secondary-40": {
        color: "secondary_40"
      },
      "secondary-30": {
        color: "secondary_30"
      },
      "secondary-20": {
        color: "secondary_20"
      },
      "secondary-inverse": {
        color: "secondary_inverse"
      },
      "secondary-background": {
        color: "secondary_background"
      },
      "secondary-grey-100": {
        color: "secondary_grey_100"
      },
      "secondary-grey-80": {
        color: "secondary_grey_80"
      },
      "secondary-grey-60": {
        color: "secondary_grey_60"
      },
      "secondary-grey-40": {
        color: "secondary_grey_40"
      },
      "secondary-grey-20": {
        color: "secondary_grey_20"
      },
      "sparkle-80": {
        color: "sparkle_80"
      },
      "sparkle-70": {
        color: "sparkle_70"
      },
      "sparkle-60": {
        color: "sparkle_60"
      },
      "sparkle-50": {
        color: "sparkle_50"
      },
      "sparkle-40": {
        color: "sparkle_40"
      },
      "sparkle-30": {
        color: "sparkle_30"
      },
      "sparkle-20": {
        color: "sparkle_20"
      },
      "sparkle-inverse": {
        color: "sparkle_inverse"
      },
      "sparkle-background": {
        color: "sparkle_background"
      },
      "sparkle-grey-100": {
        color: "sparkle_grey_100"
      },
      "sparkle-grey-80": {
        color: "sparkle_grey_80"
      },
      "SPARKLE-GREY-60": {
        color: "sparkle_grey_60"
      },
      "sparkle-grey-40": {
        color: "sparkle_grey_40"
      },
      "sparkle-grey-20": {
        color: "sparkle_grey_20"
      },
      feedback_error_80: {
        color: "feedback_error_80"
      },
      "feedback-error_50": {
        color: "feedback_error_50"
      },
      "feedback-error-20": {
        color: "feedback_error_20"
      },
      "feedback-warning-80": {
        color: "feedback_warning_80"
      },
      "feedback-warning-50": {
        color: "feedback_warning_50"
      },
      "feedback-warning-20": {
        color: "feedback_warning_20"
      },
      "feedback-success-80": {
        color: "feedback_success_80"
      },
      "feedback-success-50": {
        color: "feedback_success_50"
      },
      "feedback-success-20": {
        color: "feedback_success_20"
      },
      white: { color: "white" },
      black: { color: "black" },
      transparent: { color: "transparent" }
    }
  },
  children: {
    properties: {
      text: props.children
    }
  },
  text: {
    properties: {
      text: props.text
    }
  },
  as: {
    properties: {
      textType: props.as
    }
  },
  appearance: {
    properties: {},
    variations: {
      "body-s": { appearance: "body-s" },
      "heading-xl": { appearance: "heading_xl" },
      "heading-l": { appearance: "heading_l" },
      "heading-m": { appearance: "heading_m" },
      "heading-s": { appearance: "heading_s" },
      "heading-xs": { appearance: "heading_xs" },
      "heading-xxs": { appearance: "heading_xxs" },
      overline: { appearance: "overline" },
      "body-l": { appearance: "body_l" },
      "body-l-bold": { appearance: "body_l_bold" },
      "body-l-link": { appearance: "body_l_link" },
      "body-m": { appearance: "body_m" },
      "body-m-bold": { appearance: "body_m_bold" },
      "body-m-link": { appearance: "body_m_link" },
      "body-s-bold": { appearance: "body_s_bold" },
      "body-s-link": { appearance: "body_s_link" },
      "body-xs": { appearance: "body_xs" },
      "body-xs-bold": { appearance: "body_xs_bold" },
      "body-xs-link": { appearance: "body_xs_link" },
      "body-xxs": { appearance: "body_xxs" },
      "body-xxs-bold": { appearance: "body_xxs-bold" },
      "body-xxs-link": { appearance: "body_xxs_link" },
      "list-title": { appearance: "list_title" },
      button: { appearance: "button" },
      code: { appearance: "code" }
    }
  }
});

const Component$2 = ({ children, ...props }) => {
  return createComponent(
    Jdstext,
    {
      ...props,
      text: props.text || children
    },
    "JDSText",
    componentsMap
  );
};
const Heading = withModifiedProps(Component$2, PROP_MAP);
Heading.defaultProps = {
  as: "h1"
};

const CSSTransition = (props) => {
  const {
    in: _in,
    appear,
    children,
    className,
    timeout = 150,
    onEntered,
    onExited,
    unmountOnExit,
    enter,
    exit,
    ...rest
  } = props;
  const rootPrefixedClassNames = (root, ...classList) => makeClass([root, ...classList.map((classN) => `${root}-${classN}`)]);
  const [classes, setClasses] = useState(
    rootPrefixedClassNames(className, "initial")
  );
  const [status, setStatus] = useState(_in ? 1 /* ENTERING */ : 3 /* EXITED */);
  const [_appear, setAppear] = useState(appear);
  useEffect(() => {
    if (_in && (appear || enter)) {
      setStatus(1 /* ENTERING */);
      setTimeout(() => setStatus(0 /* ENTERED */), timeout);
      setAppear(false);
    } else {
      if (!_appear || exit) {
        setAppear(appear);
        setStatus(2 /* EXITING */);
        setTimeout(() => setStatus(3 /* EXITED */), timeout);
      }
    }
    return () => {
      setStatus(3 /* EXITED */);
    };
  }, [_in]);
  useEffect(() => {
    switch (status) {
      case 1 /* ENTERING */:
        setClasses(
          makeClass([className, `${className}-enter`, "enter-active"])
        );
        break;
      case 0 /* ENTERED */:
        onEntered?.(true);
        setClasses(
          rootPrefixedClassNames(className, "initial", "enter", "enter-done")
        );
        break;
      case 2 /* EXITING */:
        setClasses(rootPrefixedClassNames(className, `exit`, "exit-active"));
        break;
      case 3 /* EXITED */:
        onExited?.(true);
        setClasses(
          rootPrefixedClassNames(className, "initial", "exit", "exit-done")
        );
        break;
    }
  }, [status]);
  const shouldUnMount = unmountOnExit && status === 3 /* EXITED */;
  return shouldUnMount ? null : cloneElement(children, {
    className: makeClass([
      classes,
      children.props.className
    ]),
    ...rest
  });
};

const OnVisible = (props) => {
  const {
    onChange,
    children,
    percent = 50,
    visibleClassName,
    wrappingElement = "div",
    ...rest
  } = props;
  const [visible, setVisible] = useState(false);
  const intersectionObserverRef = useRef(null);
  const handleInteraction = (entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        onChange?.(true);
        setVisible(true);
        intersectionObserverRef?.current?.disconnect();
      }
    });
  };
  const domRef = useCallback((ref) => {
    const intersectionObserver = new IntersectionObserver(handleInteraction, {
      threshold: percent / 100
    });
    intersectionObserverRef.current = intersectionObserver;
    if (ref)
      intersectionObserver.observe(ref);
    return () => intersectionObserver.disconnect();
  }, []);
  return createElement(
    wrappingElement,
    {
      ref: domRef,
      ...rest,
      className: visible ? visibleClassName : void 0
    },
    children
  );
};

const FadeOnScroll = (props) => {
  const [isVisible, setVisible] = useState(false);
  const uniqKey = props.uniqueKey || "-no-key";
  return /* @__PURE__ */ jsx(
    OnVisible,
    {
      onChange: (val) => {
        setVisible(val);
        props.onVisible && props.onVisible(false);
      },
      visibleClassName: "fadeup-visible",
      percent: 5,
      children: /* @__PURE__ */ jsx(
        CSSTransition,
        {
          in: props.enter === void 0 ? isVisible : isVisible && props.enter,
          appear: true,
          className: props.animationClass || "fadeup",
          onEntered: () => {
            props.onVisible && props.onVisible(true);
          },
          timeout: 150,
          ...props.transitionProps,
          children: props.children
        },
        uniqKey
      )
    }
  );
};
FadeOnScroll.defaultProps = {
  animateClass: "fadeup"
};

const Container = forwardRef(
  (props, ref) => {
    const {
      padPosition,
      displayOn,
      animateIn,
      animateNow,
      layout,
      pad,
      as = "section",
      rounded,
      onVisible,
      background,
      mode,
      ...rest
    } = props;
    const classNames = makeClass([
      props.className,
      "j-container",
      pad && `sp--${pad}`,
      (pad || padPosition) && `pd--${padPosition || "all"}`,
      layout && `l-layout--${layout}`,
      displayOn && `l-breakpoint--${displayOn}`,
      background && `bg--${background}`,
      rounded && `l-radius--${rounded}`,
      animateIn && "fadeup-initial"
    ]);
    const modeProp = {};
    if (mode) {
      modeProp["data-mode"] = mode || "light";
    }
    const ContainerTag = as;
    const containerDom = /* @__PURE__ */ jsx(ContainerTag, { ref, ...modeProp, ...rest, className: classNames, children: props.children });
    if (!(animateIn === true || animateNow === true)) {
      return containerDom;
    }
    return /* @__PURE__ */ jsx(
      FadeOnScroll,
      {
        animate: animateIn,
        uniqueKey: classNames + "-" + props.id,
        onVisible,
        enter: animateNow,
        children: containerDom
      }
    );
  }
);
Container.defaultProps = {
  as: "section"
};

const FULL_LAYOUTS = ["full-width"];
const VerticalAlignmentCSSCustomMapping = {
  top: "start",
  bottom: "end"
};
const ContentLayout = (props) => {
  const {
    className,
    children,
    layout = "1-col-even",
    verticalAlignment = "stretch",
    horizontalAlignment = "stretch",
    margin,
    marginPosition,
    ...rest
  } = props;
  const SLIDER_ENABLED_PANELS = [
    "2-col-overflow",
    "3-col-overflow",
    "4-col-overflow"
  ];
  const { tablet } = Devices.useMedia();
  const hasSlider = SLIDER_ENABLED_PANELS.includes(layout) && tablet;
  const classes = makeClass([
    className,
    FULL_LAYOUTS.includes(layout) ? "l-layout--full" : "l-layout--max-width",
    "j-content-layout",
    `j-content-layout__layout-${layout}`,
    margin && `sp--${margin}`,
    margin && marginPosition && `mg--${marginPosition}`,
    hasSlider && "j-content-layout__slider"
  ]);
  const [activeIndex, setActiveIndex] = useState(0);
  const styleVars = setCSSVar({
    "--content-layout-horizontal-alignment": horizontalAlignment,
    "--content-layout-vertical-alignment": Object.keys(
      VerticalAlignmentCSSCustomMapping
    ).includes(verticalAlignment) ? VerticalAlignmentCSSCustomMapping[verticalAlignment] : verticalAlignment
  });
  const modifiedStyles = { ...props.style || {}, ...styleVars };
  const contentPanelClasses = makeClass(["j-content-layout-panel"]);
  const GAP_SIZE = 16;
  const TOUCH_THRESHOLD = 20;
  const touchRef = useRef({ start: 0, end: 0, id: 0 });
  const contentLayoutRef = useRef(null);
  const moveToPanel = (scrollValue) => {
    const currentActiveIndex = touchRef.current.id >= 0 ? touchRef.current.id : 0;
    Array.from(
      contentLayoutRef.current?.children || []
    ).forEach((item) => {
      item.style.transform = "translateX(-" + scrollValue + "px)";
    });
    setActiveIndex(currentActiveIndex);
  };
  const handlePointerStart = (e) => {
    if (hasSlider) {
      touchRef.current.start = e.clientX;
    }
  };
  const getScrolledValue = (panelItemIndex) => {
    let totalScrolled = 0;
    const items = Array.from(
      contentLayoutRef.current?.children || []
    );
    const panelIndexDifference = Math.abs(touchRef.current.id - panelItemIndex);
    items.length = panelItemIndex > 0 ? panelIndexDifference === 0 ? panelItemIndex : panelItemIndex - panelIndexDifference : 0;
    items.forEach((_, elIndex) => {
      totalScrolled = totalScrolled + items[elIndex].offsetWidth + GAP_SIZE;
    });
    return totalScrolled;
  };
  const handlePointerMove = (ev) => {
    if (hasSlider && touchRef.current.start) {
      touchRef.current.end = ev.clientX;
      if (ev.cancelable)
        ev.preventDefault();
      const touchDistance = touchRef.current.end - touchRef.current.start;
      const panelItemIndex = parseInt(
        ev.currentTarget.getAttribute("data-index") || "0"
      );
      const totalScrolled = getScrolledValue(panelItemIndex);
      const scrollValue = totalScrolled + -1 * touchDistance;
      moveToPanel(scrollValue);
    }
  };
  const handlePointerEnd = (ev) => {
    if (hasSlider && touchRef.current.end) {
      const touchDistance = touchRef.current.end - touchRef.current.start;
      const childItemsLength = contentLayoutRef.current?.children.length || 0;
      const touchDistancePercent = 100 / ev.currentTarget.offsetWidth * Math.abs(touchDistance);
      let nextPanelID = touchRef.current.id < 0 ? 1 : touchRef.current.id;
      if (touchDistancePercent > TOUCH_THRESHOLD) {
        nextPanelID += touchDistance < 0 ? 1 : -1;
      }
      nextPanelID = nextPanelID >= childItemsLength ? nextPanelID - 1 : nextPanelID;
      touchRef.current.start = 0;
      slideToPanel(nextPanelID);
    }
  };
  const handlePointerOut = () => {
    touchRef.current.start = 0;
    slideToPanel(touchRef.current.id);
    touchRef.current.end = 0;
  };
  const slideToPanel = (index) => {
    touchRef.current.id = index;
    const scrollValue = getScrolledValue(index);
    moveToPanel(scrollValue);
  };
  return /* @__PURE__ */ jsxs(Fragment, { children: [
    /* @__PURE__ */ jsx(
      "div",
      {
        ...rest,
        ref: contentLayoutRef,
        className: classes,
        style: modifiedStyles,
        children: Children.map(children, (child, index) => /* @__PURE__ */ jsx(
          "div",
          {
            onPointerDown: handlePointerStart,
            onPointerUp: handlePointerEnd,
            onPointerMove: handlePointerMove,
            onPointerOut: handlePointerOut,
            "data-index": index,
            className: contentPanelClasses,
            children: child
          }
        ))
      }
    ),
    hasSlider && /* @__PURE__ */ jsx(
      Container,
      {
        className: "pagination__wrapper",
        layout: "centered",
        pad: "xs",
        padPosition: "vertical",
        children: /* @__PURE__ */ jsx(
          CarouselPagination,
          {
            clickable: true,
            onDotClick: slideToPanel,
            count: Children.count(children),
            selectedIndex: activeIndex
          }
        )
      }
    )
  ] });
};
ContentLayout.defaultProps = {
  layout: "1-col-even",
  horizontalAlignment: "stretch",
  verticalAlignment: "stretch",
  margin: "layout"
};

const Grid = (props) => {
  const {
    template,
    templateTablet,
    templateMobile,
    gap,
    align,
    justify,
    ...rest
  } = props;
  const classNames = makeClass([props.className, "j-grid"]);
  const styleVars = setCSSVar({
    "--grid-template": template,
    "--grid-template-tablet": templateTablet,
    "--grid-template-mobile": templateMobile || templateTablet,
    "--grid-gap": gap,
    "--grid-align": align,
    "--grid-justify": justify
  });
  const modifiedStyles = Object.assign(props.style || {}, styleVars);
  return /* @__PURE__ */ jsx("div", { ...rest, className: classNames, style: modifiedStyles, children: props.children });
};
Grid.defaultProps = {
  template: "repeat(auto-fill, minmax(200px, 1fr))",
  gap: "var(--spacing-base)",
  align: "center"
};

const Horizontal = (props) => /* @__PURE__ */ jsx(Space, { ...props, direction: "horizontal" });
const Vertical = (props) => /* @__PURE__ */ jsx(Space, { ...props, direction: "vertical" });
const Space = (props) => {
  const { className, value, direction, ...rest } = props;
  const classes = makeClass([
    className,
    value && `sp--${value}`,
    direction === "horizontal" ? "pd--right" : "pd--bottom",
    `j-Space__${direction}`,
    "j-Space"
  ]);
  return /* @__PURE__ */ jsx("span", { className: classes, ...rest });
};
Space.H = Horizontal;
Space.V = Vertical;
Space.displayName = "Space";
Space.defaultProps = {
  direction: "vertical",
  value: "s"
};

const sdl$1 = { "metadata": { "version": "1.0.0", "id": "horizontal-stepper-1.0.0", "name": "JDSHorizontalStepper", "layerName": "jds_horizontal_stepper" }, "hierarchy": { "container": [{ "step-indicator-container": ["jds_step_item_horizontal"] }, { "stepper-children-container": ["stepper-content-slot"] }] }, "base": { "container": { "gap": "{h_0}", "flex-direction": "{h_1}", "size": "{h_2}" }, "step-indicator-container": { "flex-direction": "{h_3}", "justify-content": "{h_4}", "align-items": "{h_5}", "size": "{h_6}", "padding-left": "{h_7}", "padding-right": "{h_8}" }, "jds_step_item_horizontal": { "flex": 1 }, "stepper-children-container": { "size": "{h_9}", "flex-direction": "{h_10}", "justify-content": "{h_11}", "align-items": "{h_12}", "enter-animation-name": "slideHorizontallyToRight", "exit-animation-name": "slideHorizontallyToLeft", "enter-animation-curve": "entrance_ease", "exit-animation-curve": "exit_ease", "enter-animation-duration": 500, "exit-animation-duration": 500 } }, "api": { "data": { "container": { "max-width": { "name": "maxWidth", "type": "size" } }, "step-indicator-container": { "value": { "name": "stepItems", "type": "list", "object": { "state": "JDSStepperDot.state", "label": "string", "index": "string", "icon": "icon", "activeState": "JDSStepperDot.activeState", "direction": "JDSHorizontalStepItem.direction" } } }, "jds_step_item_horizontal": { "state": { "type": "JDSStepperDot.state", "name": "stepItems.state" }, "label": { "type": "string", "name": "stepItems.label" }, "index": { "type": "string", "name": "stepItems.index" }, "icon": { "type": "icon", "name": "stepItems.icon" }, "direction": { "type": "JDSHorizontalStepItem.direction", "name": "stepItems.direction" }, "activeState": { "type": "JDSStepperDot.activeState", "name": "stepItems.activeState" }, "itemsType": { "type": "JDSStepperDot.itemsType", "name": "itemsType" } } }, "children": { "stepper-content-slot": { "name": "content", "accepts": ["template"], "max": 1 } }, "a11y": { "step-indicator-container": { "name": "stepItems", "repeating": { "ariaLabel": "stepItemAriaLabel", "ariaCurrent": "_ariaCurrent" }, "properties": { "role": { "value": "list" } } }, "jds_step_item_horizontal": { "properties": { "ariaLabel": "stepItems.stepItemAriaLabel", "ariaCurrent": "stepItems._ariaCurrent" } } } } };

const AnimatedStepItem = ({
  children,
  show,
  animateState
}) => {
  const { className } = useTransition(Boolean(show));
  if (!show)
    return null;
  return /* @__PURE__ */ jsx("div", { className: [className, "animate-step-item", animateState].join(" "), children });
};

const getCompletedStepItems = (stepItems) => {
  const filteredList = stepItems.filter((item) => item.complete);
  if (!filteredList.length) {
    return [-1];
  }
  return filteredList.map((_, i) => i);
};
const getState = (idx, stepItems, completedList) => {
  if (stepItems[idx]?.disabled)
    return "disabled";
  if (completedList.includes(idx))
    return "complete";
  const activeItems = stepItems.findIndex(
    (t, i) => !completedList.includes(i) && !t.disabled
  );
  return activeItems === idx ? "active" : "inactive";
};
const useStepper = (props, stepperRef) => {
  const { children, onActiveChange, onComplete, orientation } = props;
  const stepItems = children.map((c) => c.props);
  const [animateState, setAnimateState] = useState("next");
  const [completedList, setCompletedList] = useState(
    getCompletedStepItems(stepItems)
  );
  const completeIndex = completedList.sort()[completedList.length - 1];
  useImperativeHandle(
    stepperRef,
    () => ({
      next: () => {
        const nextIndex = completeIndex === stepItems.length ? stepItems.length - 1 : completeIndex + 1;
        const actualIndex = stepItems[nextIndex].disabled ? nextIndex + 1 : nextIndex;
        setCompletedList([...completedList, actualIndex]);
        stepItems?.[completeIndex]?.onComplete?.();
        onActiveChange?.(actualIndex);
        setAnimateState("next");
        if (nextIndex === stepItems.length - 1) {
          onComplete?.();
        }
      },
      prev: () => {
        const prevIndex = completeIndex === stepItems.length - 1 ? [completeIndex, completeIndex - 1] : [completeIndex];
        const currentList = completedList.filter((t) => !prevIndex.includes(t));
        setCompletedList(currentList);
        setAnimateState("prev");
      }
    }),
    [completeIndex, completedList, stepItems, onActiveChange, onComplete]
  );
  const updatedStepItems = stepItems.map((item, i) => {
    const direction = i === 0 || orientation === "vertical" && i !== stepItems.length - 1 ? "end" : i === stepItems.length - 1 ? "start" : "both";
    const state = getState(i, stepItems, completedList);
    return {
      ...item,
      content: item.children,
      itemsType: props.itemsType,
      icon: item.activeState === "warning" ? void 0 : item.icon,
      _compeleteDivider: i >= completeIndex && orientation === "horizontal",
      direction,
      index: i + 1,
      state,
      _ariaCurrent: state === "active" ? "step" : void 0
    };
  });
  return {
    stepItems: updatedStepItems,
    completeIndex,
    animateState
  };
};

const withLogic$1 = (Component) => forwardRef((props, stepperRef) => {
  const { stepItems, animateState } = useStepper(props, stepperRef);
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        stepItems,
        content: /* @__PURE__ */ jsx("div", { children: stepItems.map((item, i) => /* @__PURE__ */ jsx(
          AnimatedStepItem,
          {
            animateState,
            show: item.state === "active",
            children: item.children
          },
          i
        )) })
      }
    }
  );
});

const Component$1 = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl$1;
  const { custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...rest, componentTag },
    "JDSHorizontalStepper",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const HorizontalStepper = withLogic$1(Component$1);
HorizontalStepper.displayName = "HorizontalStepper";
HorizontalStepper.slotName = "jds_horizontal_stepper";

const StepItem = (props) => null;

const sdl = { "metadata": { "version": "1.0.0", "id": "vertical-stepper-1.0.0", "name": "JDSVerticalStepper", "layerName": "jds_vertical_stepper" }, "hierarchy": { "container": ["jds_step_item_vertical"] }, "base": { "container": { "flex-direction": "{v_0}", "justify-content": "{v_1}", "align-items": "{v_2}", "size": "{v_3}", "gap": "{v_4}" }, "label-jds-text": { "font-family": "{headingXxs}", "color": "{primaryGrey100}", "font-size": "{headingXxs}", "line-height": "{headingXxs}", "letter-spacing": "{headingXxs}", "font-weight": "{headingXxs}", "text-decoration": "{text-decoration.none}", "text-transform": "{text-case.none}", "language": "en", "padding-top": 0 } }, "api": { "data": { "container": { "value": { "type": "list", "name": "stepItems", "object": { "state": "JDSStepperDot.state", "label": "string", "index": "string", "icon": "icon", "direction": "JDSVerticalStepItem.direction", "content": "template", "activeState": "JDSStepperDot.activeState" } }, "max-width": { "name": "maxWidth", "type": "size" } }, "jds_step_item_vertical": { "state": { "type": "JDSStepperDot.state", "name": "stepItems.state" }, "label": { "type": "string", "name": "stepItems.label" }, "index": { "type": "string", "name": "stepItems.index" }, "icon": { "type": "icon", "name": "stepItems.icon" }, "direction": { "type": "JDSVerticalStepItem.direction", "name": "stepItems.direction" }, "content": { "type": "template", "name": "stepItems.content" }, "activeState": { "type": "JDSStepperDot.activeState", "name": "stepItems.activeState" }, "itemsType": { "type": "JDSStepperDot.itemsType", "name": "itemsType" } } }, "a11y": { "container": { "name": "stepItems", "repeating": { "ariaLabel": "stepItemAriaLabel", "ariaCurrent": "_ariaCurrent" }, "properties": { "role": { "value": "list" } } }, "jds_step_item_vertical": { "properties": { "ariaLabel": "stepItems.stepItemAriaLabel", "ariaCurrent": "stepItems._ariaCurrent" } } } } };

const withLogic = (Component) => forwardRef((props, stepperRef) => {
  const { stepItems } = useStepper(props, stepperRef);
  return /* @__PURE__ */ jsx(
    Component,
    {
      ...{
        ...props,
        stepItems
      }
    }
  );
});

const Component = (props) => {
  useTokenValues();
  const componentTag = "undefined";
  const json = sdl;
  const { custom = "", ...rest } = props;
  return createComponent(
    json,
    { ...rest, componentTag },
    "JDSVerticalStepper",
    componentsMap,
    getCustomJSON(custom || "") || {}
  );
};
const VerticalStepper = withLogic(Component);
VerticalStepper.displayName = "VerticalStepper";
VerticalStepper.slotName = "jds_vertical_stepper";

const Stepper = forwardRef(
  ({ orientation, ...rest }, ref) => {
    if (orientation === "vertical") {
      return /* @__PURE__ */ jsx(VerticalStepper, { ...rest, ref, orientation: "vertical" });
    }
    if (orientation === "auto") {
      const isVertical = Devices.isMobile() && rest.children?.length > 6;
      if (isVertical)
        return /* @__PURE__ */ jsx(VerticalStepper, { ref, ...rest, orientation: "vertical" });
    }
    return /* @__PURE__ */ jsx(HorizontalStepper, { ...rest, ref, orientation: "horizontal" });
  }
);

const BreadcrumbItem = (props) => null;

const Notifications = {
  nudge,
  toast,
  Container: NotificationContainer,
  Banner: NotificationBanner
};

export { Accordion, AccordionPanel, ActionButton, Avatar, AvatarV2, AvatarV2CompleteRing, AvatarV2Default, AvatarV2Information, AvatarV2Notification, AvatarV2ProgressRing, AvatarV2SegmentedRing, AvatarV2Status, Badge, BadgeV2, BadgeV2Brand, BadgeV2Information, BadgeV2Notification, BadgeV2Status, BaseIcon, BottomFooter, BottomFooterLinkItem, BottomNav, BottomNavigationItem, BottomSheet, BreadcrumbItem, Breadcrumbs, Button, Card, Carousel, CarouselSlide, Container$1 as Container, ContentBlock, ContentLayout, DatePicker, DatepickerButton, DatepickerCalendar, DatepickerCalendarButton, DatepickerCalendarHeader, DatepickerCalendarRow, DatepickerDesktopInternal, DatepickerHeader, DatepickerMobile, DatepickerMobileInternal, DatepickerMonthView, DatepickerViewButton, DatepickerYearView, BottomSheet as DesktopBottomSheet, DesktopBottomSheetInternal, Divider, DropdownMenu, DropdownMenuGroup, DropdownMenuInternal, DropdownMenuItem, DropdownMenuItemMobile, DropdownMenuSubMenu, DropdownMenuSubMenuInternal, FAB, FABInternal, FileUploader, FileUploaderControl, FileUploaderItem, FileUploaderList, FileUploaderPanel, Footer, FooterIconLinks, FooterLinks, FooterLinksGrid, FooterMarketLinks, Grid, Header, HeaderMobile, Heading, HorizontalStepItem, Icon, Image, InputCheckbox, InputCode, InputCodeItem, InputDate, InputDropdown, InputField, InputFieldV2, InputPhoneDropdown, InputRadio, InputSlider, InputTextarea, InputToggle, Link, ListBlock, MegaMenu, MegaMenuBlock, MegaMenuInternal, MegaMenuItem, MenuBlock, MenuBlockInternal, MenuBlockItem, BottomSheet as MobileBottomSheet, MobileBottomSheetInternal, Modal, Modal as ModalDesktop, ModalDesktopInternal, Modal as ModalMobile, ModalMobileInternal, Notifications, Pagination, PaginationButton, ProgressBar, PromoCard, RatingBar, RatingBarItem, SearchBox, SearchResultItem, SearchResultText, SearchResults, SearchResultsInternal, SegmentedRingItem, SelectorButton, SelectorItem, Selectors, ServiceCard, SidePanel, SidePanelInternal, SidePanelItem, Skeleton, Space, Spinner, StepItem, Stepper, StepperDot, TabBar, TabItem, Table, TableBody, TableCell, TableRow, Tabs, Tag, TestComponent, Text, Tooltip, TooltipInternal, VerticalStepItem };
