import type { JDSAvatarV2DefaultProps, JDSBadgeV2StatusProps, JDSAvatarV2StatusProps, JDSAvatarV2NotificationProps, JDSBadgeV2InformationProps, JDSAvatarV2InformationProps } from '../../internal';
export interface JDSAvatarV2Props {
    /**  */
    kind?: 'default' | 'status' | 'notification' | 'information' | 'complete-ring' | 'segmented-ring' | 'progress-ring';
    /**  */
    size?: 'medium' | 'xtra-small' | 'small' | 'large' | 'xtra-large' | 'xtra-xtra-large';
    /**  */
    disabled?: boolean;
    image?: string;
    initials?: string;
    avatarKind?: JDSAvatarV2DefaultProps['kind'];
    badgeLabel?: string;
    badgeBorder?: boolean;
    statusBadgeStatus?: JDSBadgeV2StatusProps['status'];
    statusBadgeKind?: JDSAvatarV2StatusProps['kind'];
    statusBadgePlacement?: JDSAvatarV2StatusProps['placement'];
    notificationBadgeKind?: JDSAvatarV2NotificationProps['kind'];
    informationBadgeIcon?: string | JSX.Element;
    informationBadgeColor?: JDSBadgeV2InformationProps['color'];
    informationBadgeAppearance?: JDSBadgeV2InformationProps['appearance'];
    informationBadgeKind?: JDSAvatarV2InformationProps['kind'];
    informationBadgePlacement?: JDSAvatarV2InformationProps['placement'];
    segmentCount?: number;
    progress?: number;
    onClick?: (ev: React.MouseEvent<HTMLButtonElement>) => void;
    ariaLabel?: string;
    ariaDescribedby?: string;
    custom?: string;
}
