import type { JDSAvatarProps, JDSLinkProps, JDSIconProps, JDSImageProps, JDSTabProps, JDSTextProps, JDSButtonProps } from '../../internal';
export interface JDSHeaderMobileProps {
    /**  */
    search?: boolean;
    /**  */
    expandedSearch?: boolean;
    /**  */
    searchActive?: boolean;
    /**  */
    brandLabel?: string;
    /**  */
    prefix?: string | JSX.Element;
    /**  */
    pageTitle?: string;
    /**  */
    icons?: Array<{
        iconLinkAriaLabel?: string;
        iconLinkAriaDescribedby?: string;
        icon?: string | JSX.Element;
        onClick?: (e: any) => void;
    }>;
    /**  */
    searchLabel?: string;
    /**  */
    searchSuffix?: string | JSX.Element;
    /**  */
    query?: string;
    /**  */
    searchShowBack?: boolean;
    /**  */
    searchResults?: Array<{
        searchResultAriaLabel?: string;
        searchResultAriaDescribedby?: string;
        icon?: string | JSX.Element;
        label?: string;
    }>;
    /**  */
    searchResultHeader?: string;
    /**  */
    searchResultHeaderAction?: string;
    onSearchActiveChange?: () => void;
    logoOnClick?: (ev: React.MouseEvent<HTMLButtonElement>) => void;
    avatarOnClick?: (ev: React.MouseEvent<HTMLButtonElement>) => void;
    prefixOnClick?: (ev: React.MouseEvent<HTMLButtonElement>) => void;
    suffixOnClick?: (ev: React.MouseEvent<HTMLButtonElement>) => void;
    onSearchBlur?: (ev: React.FocusEvent<HTMLButtonElement>) => void;
    onSearchFocus?: (ev: React.FocusEvent<HTMLButtonElement>) => void;
    onSearchChange?: () => void;
    onSearchBoxSuffixClick?: (ev: React.MouseEvent<HTMLButtonElement>) => void;
    onSearchBoxPrefixClick?: (ev: React.MouseEvent<HTMLButtonElement>) => void;
    onSearchIconClick?: (ev: React.MouseEvent<HTMLButtonElement>) => void;
    onSearchResultHeaderActionClick?: (ev: React.MouseEvent<HTMLButtonElement>) => void;
    onSearchResultClick?: (ev: React.MouseEvent<HTMLButtonElement>) => void;
    avatar?: React.ReactElement<JDSAvatarProps> | React.ReactElement<JDSLinkProps>;
    pageTitlePrefix?: React.ReactElement<JDSAvatarProps> | React.ReactElement<JDSIconProps> | React.ReactElement<JDSImageProps>;
    tabs?: React.ReactElement<JDSTabProps>;
    suffix?: React.ReactElement<JDSTextProps> | React.ReactElement<JDSButtonProps> | React.ReactElement<JDSLinkProps>;
    logo?: React.ReactElement<JDSIconProps> | React.ReactElement<JDSImageProps> | React.ReactElement<JDSLinkProps>;
    prefixAriaLabel?: string;
    prefixAriaDescribedby?: string;
    suffixAriaLabel?: string;
    suffixAriaDescribedby?: string;
    searchBoxPrefixAriaLabel?: string;
    searchBoxSuffixAriaLabel?: string;
    searchAriaLabel?: string;
    searchButtonAriaLabel?: string;
    searchButtonAriaDescribedby?: string;
    custom?: string;
}
