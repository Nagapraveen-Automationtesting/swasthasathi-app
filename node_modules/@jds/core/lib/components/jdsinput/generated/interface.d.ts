export interface JDSInputProps {
    /** It can be used to enable or disable Input. */
    disabled?: boolean;
    /** It can be used to add font-color to Input text. */
    color?: 'primary_grey_100' | 'primary_80' | 'primary_70' | 'primary_60' | 'primary_50' | 'primary_40' | 'primary_30' | 'primary_20' | 'primary_inverse' | 'primary_background' | 'primary_grey_80' | 'primary_grey_60' | 'primary_grey_40' | 'primary_grey_20' | 'secondary_80' | 'secondary_70' | 'secondary_60' | 'secondary_50' | 'secondary_40' | 'secondary_30' | 'secondary_20' | 'secondary_inverse' | 'secondary_background' | 'secondary_grey_100' | 'secondary_grey_80' | 'secondary_grey_60' | 'secondary_grey_40' | 'secondary_grey_20' | 'sparkle_80' | 'sparkle_70' | 'sparkle_60' | 'sparkle_50' | 'sparkle_40' | 'sparkle_30' | 'sparkle_20' | 'sparkle_inverse' | 'sparkle_background' | 'sparkle_grey_100' | 'sparkle_grey_80' | 'sparkle_grey_60' | 'sparkle_grey_40' | 'sparkle_grey_20' | 'feedback_error_80' | 'feedback_error_50' | 'feedback_error_20' | 'feedback_warning_80' | 'feedback_warning_50' | 'feedback_warning_20' | 'feedback_success_80' | 'feedback_success_50' | 'feedback_success_20' | 'white' | 'black' | 'transparent';
    /** This is used to specify the type of input. */
    type?: 'text' | 'email' | 'number' | 'password' | 'textarea' | 'pin' | 'phone';
    /** It can be used to align text of the Input. */
    textAlign?: 'start' | 'center' | 'end' | 'justify';
    /**  */
    textSize?: 'small' | 'large';
    /**  */
    readOnly?: boolean;
    /**  */
    id?: string;
    /**  */
    autocomplete?: string;
    /**  */
    value?: string;
    /**  */
    placeholder?: string;
    /**  */
    maxLength?: number;
    /**  */
    pattern?: string;
    /**  */
    rows?: number;
    /**  */
    name?: string;
    /**  */
    min?: number;
    /**  */
    letterSpacing?: any;
    /**  */
    autoFocus?: boolean;
    /**  */
    max?: number;
    /**  */
    required?: boolean;
    onFocus?: (ev: React.FocusEvent<HTMLButtonElement>) => void;
    onBlur?: (ev: React.FocusEvent<HTMLButtonElement>) => void;
    onChange?: () => void;
    onSubmit?: () => void;
    onKeyup?: () => void;
    onKeyDown?: () => void;
    onPaste?: () => void;
    onInvalid?: () => void;
    ariaLabel?: string;
    ariaDescribedby?: string;
    ariaInvalid?: string;
    ariaPlaceholder?: string;
    ariaRequired?: string;
    custom?: string;
}
