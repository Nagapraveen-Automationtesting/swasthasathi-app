import { JDSDropdownMenuGroupProps } from '../jdsdropdownmenugroup/generated';
import { JDSDropdownMenuItemProps } from '../jdsdropdownmenuitem/generated';
import type { JDSDropdownMenuProps } from './generated/interface';
import { MutableRefObject } from 'react';
export declare const DropdownMenuPositionList: readonly ["bottom-start", "bottom-end", "top-start", "top-end", "right-end", "right-start", "left-end", "left-start", "top-center", "bottom-center"];
export type DropdownMenuPosition = (typeof DropdownMenuPositionList)[number];
export interface DropdownMenuItemProps extends Omit<JDSDropdownMenuItemProps, 'prefix' | 'suffix' | 'onClick' | 'selected'> {
    label?: string;
    description?: string;
    disabled?: boolean;
    prefix?: string | JSX.Element;
    onClick?: (values?: string) => void;
    children?: React.ReactNode;
    value?: string;
    /**
     * Works only when this component is wrapped in dropdown menu
     */
    selected?: boolean;
}
export interface DropdownMenuGroupProps extends Omit<JDSDropdownMenuGroupProps, 'children'> {
    label?: string;
    children?: React.ReactElement<DropdownMenuItemProps> | React.ReactElement<DropdownMenuItemProps>[];
}
export interface DropdownMenuSearchConfig {
    search: string;
    suffix: boolean;
    value?: string;
    onSuffixClick?: () => void;
}
export declare const DropdownMenuWidthList: readonly ["max-content", "trigger"];
export type DropdownMenuWidth = (typeof DropdownMenuWidthList)[number];
export interface DropdownMenuProps extends Omit<JDSDropdownMenuProps, 'position' | 'offsetX' | 'offsetY' | 'triggerRef'> {
    labelTextWrap?: boolean;
    width?: DropdownMenuWidth;
    onSelect?: (values?: string | string[]) => void;
    onClose?: () => void;
    onSearchChange?: (value?: string) => void;
    value?: string;
    /**
     * @deprecated use props like searchLabel, searchValue, onSUffixCLick etc
     */
    searchConfig?: DropdownMenuSearchConfig;
    custom?: string;
    position?: DropdownMenuPosition | JDSDropdownMenuProps['position'];
    anchorEl?: MutableRefObject<HTMLElement | null>;
}
export interface DropdownMenuInternalProps extends DropdownMenuProps {
    offsetX?: number;
    offsetY?: number;
    maxHeight?: number;
}
