import type { JDSDropdownProps, JDSIconProps, JDSInputPhoneDropdownProps, JDSTextProps, JDSSpinnerProps, JDSFeedbackBlockProps, JDSInputProps } from '../../internal';
export interface JDSInputFieldProps {
    /** It can be used to enable or disable InputField. */
    disabled?: boolean;
    /** It can be used to choose between states i.e. 'success','warning','error','none'.By default it is 'none'. */
    state?: JDSFeedbackBlockProps['state'];
    /**  */
    type?: JDSInputProps['type'];
    /**  */
    id?: string;
    /**  */
    label?: string;
    /** It takes value from user for the Input field. */
    value?: string;
    /**  */
    name?: string;
    /**  */
    autocomplete?: string;
    /**  */
    autoFocus?: boolean;
    /** It displays the placeholder of Input field. */
    placeholder?: string;
    /** It can be used to bound user's input within a maximum character limit. */
    maxLength?: number;
    /**  */
    pattern?: string;
    /** It can be used to make input field required. */
    required?: boolean;
    /** It displays message with respect to its [state] selected. */
    stateText?: string;
    /** It dispalys helper text of the input field. */
    helperText?: string;
    onFocus?: (ev: React.FocusEvent<HTMLButtonElement>) => void;
    onBlur?: (ev: React.FocusEvent<HTMLButtonElement>) => void;
    onChange?: () => void;
    onKeyDown?: () => void;
    onInvalid?: () => void;
    onSubmit?: () => void;
    onPrefixClick?: (ev: React.MouseEvent<HTMLButtonElement>) => void;
    onSuffixClick?: (ev: React.MouseEvent<HTMLButtonElement>) => void;
    prefix?: React.ReactElement<JDSDropdownProps> | React.ReactElement<JDSIconProps> | React.ReactElement<JDSInputPhoneDropdownProps> | React.ReactElement<JDSTextProps>;
    suffix?: React.ReactElement<JDSDropdownProps> | React.ReactElement<JDSIconProps> | React.ReactElement<JDSSpinnerProps>;
    ariaLabel?: string;
    ariaDescribedby?: string;
    ariaInvalid?: string;
    custom?: string;
}
