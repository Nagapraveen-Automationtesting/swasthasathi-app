import { MouseEvent } from 'react';
import { JDSInputFieldProps } from './generated';
export interface InputFieldProps extends Omit<JDSInputFieldProps, 'value' | 'onFocus' | 'onBlur' | 'onChange' | 'onKeyDown' | 'onInvalid' | 'onPrefixClick' | 'onSuffixClick' | 'prefix' | 'suffix' | 'maxLength'> {
    disabled?: boolean;
    state?: 'none' | 'success' | 'error' | 'warning';
    label?: string;
    id?: string;
    value?: string | number | boolean;
    required?: boolean;
    placeholder?: string;
    maxLength?: number;
    pattern?: string;
    /**
     * @deprecated use `stateText`
     */
    stateConfig?: {
        errorText?: string;
        successText?: string;
        warningText?: string;
        requiredText?: string;
    };
    prefix?: string | JSX.Element;
    suffix?: string | JSX.Element;
    onFocus?: React.HTMLAttributes<HTMLInputElement>['onFocus'];
    onBlur?: React.HTMLAttributes<HTMLInputElement>['onBlur'];
    onChange?: React.ChangeEventHandler<HTMLInputElement>;
    onKeyDown?: React.KeyboardEventHandler<HTMLDivElement>;
    onPrefixClick?: (ev: MouseEvent<HTMLDivElement>) => void;
    onSuffixClick?: (value: MouseEvent<HTMLDivElement>) => void;
    onInvalid?: (ev: React.InvalidEvent<HTMLInputElement>) => void;
    readonly?: boolean;
    /**
     * When used with text based input, determines the input format.
     * e.g. XY## #### to allow `XY12 345` values.
     * <br/>
     * `#`: `0-9`
     * <br/>
     * `&`: `A-Z, a-z`
     * <br/>
     * `*`: `A-Z, a-z, 0-9`
     * <br/>
     * `pattern` prop is also set internally to assist with invalid error states. You can overwrite this by passing explicit `pattern' prop.
     * This will not work on `checkbox`, `radio`, `toggle`, `number`, `code` and `textarea`.
     */
    textMask?: string | Array<string | RegExp>;
}
type StateType = InputFieldProps['state'] | 'required' | 'none';
/**
 * Manages the focus state of the Input
 * @returns
 * focused: The input state for the label. This considers the placeholder and the input's current value
 * _inputFocused: the actual focus state of the input
 */
export declare const useFocusedLabel: (props: InputFieldProps, ref?: HTMLDivElement | null) => {
    onChange: (ev: React.ChangeEvent<HTMLInputElement>) => void;
    onBlur: (ev: React.FocusEvent<HTMLInputElement>) => void;
    onFocus: (ev: React.FocusEvent<HTMLInputElement>) => void;
    focused: boolean;
    _inputFocused: boolean;
};
export declare const useInputState: (state: InputFieldProps['state'], required?: boolean, onInvalid?: ((ev: React.InvalidEvent<HTMLInputElement>) => void) | undefined, stateConfig?: InputFieldProps['stateConfig'], stateText?: string) => {
    onInvalid: (ev: React.InvalidEvent<HTMLInputElement>) => void;
    inputState: NonNullable<StateType>;
    stateText: string | undefined;
};
export declare const getRequiredLabel: (label?: string, required?: boolean) => string;
export declare const getIcon: (icon?: string | JSX.Element, onClick?: ((ev: React.MouseEvent<HTMLDivElement>) => void) | undefined) => JSX.Element | undefined;
export declare const withLogic: (Component: React.ComponentType<InputFieldProps>) => React.FC<InputFieldProps>;
export {};
