import { IPROP_MAP } from '../../generators/modifyProps';
import { MouseEvent, ReactNode } from 'react';
import { ButtonProps } from '../jdsbutton/logic';
import { JDSModalMobileProps } from './generated';
import { ListBlockProps } from '../jdslistblock/logic';
declare const legacySizes: readonly ["s", "m"];
type legacySizesType = (typeof legacySizes)[number];
export interface ModalProps extends Omit<JDSModalMobileProps, 'size' | 'primaryCTA' | 'secondaryCTA' | 'header' | '_onModalClick'> {
    /**
     * Sets size of Modal
     */
    size?: legacySizesType | JDSModalMobileProps['size'];
    /**
     * Set type of modal, informational modal has no buttons,
     * dialog modal has only a single button which can be triggered by
     * clicking Enter key
     */
    kind?: 'dialog' | 'acknowledgement' | 'informational';
    /**
     * Sets Header as text or as react element
     */
    header?: string | ListBlockProps;
    /**
     * Sets Modal content as a children elements eg. `<Modal> <Table /> <Modal/>`
     */
    children?: ReactNode;
    /**
     * Label of primary button. You can also pass a custom LinkType for more granular control. <br/>
     * E.g. `primaryCTA={title:'Delete', {button: { state: 'destructive' } }}`
     */
    primaryCTA?: string | {
        title: string;
        onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;
        /**
         * @deprecated
         */
        _button?: ButtonProps;
    };
    /**
     * Label of secondary button.You can also pass a custom LinkType for more granular control. <br/>
     * E.g. `secondaryCTA={title:'Delete', {button: { state: 'destructive' } }}`
     */
    secondaryCTA?: string | {
        title: string;
        onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;
        /**
         * @deprecated
         */
        _button?: ButtonProps;
    };
    /**
     * Onclick Event on primary button
     */
    onClickPrimary?: (event?: MouseEvent<HTMLButtonElement | HTMLAnchorElement>) => void;
    /**
     * Onclick Event on secondary button
     */
    onClickSecondary?: (event?: MouseEvent<HTMLButtonElement | HTMLAnchorElement>) => void;
    /**
     * Removes the [X] icon and shifts layout up
     * @deprecated
     * use `isCloseable` prop
     */
    isClosable?: boolean;
    /**
     * Can be set to close modal programatically
     * @deprecated use `close` prop
     */
    closed?: boolean;
    /**
     * Pass custom callback on closing modal
     */
    onCloseCallback?: () => void;
    /**
     * Function which determines if modal can be closed.
     * If it is false, the modal does not close if clicking on close button or esc
     */
    onRequestClose?: () => boolean;
}
export declare const PROP_MAP: IPROP_MAP<ModalProps>;
export declare const withLogic: (Component: React.ComponentType<ModalProps>) => React.FC<ModalProps>;
export {};
