import { ReactElement, RefObject } from 'react';
import { type JDSHorizontalStepperProps } from './generated/interface';
export type StepperRef = {
    next: () => void;
    prev: () => void;
};
export interface StepItemData {
    label: string;
    disabled: boolean;
    complete: boolean;
    activeState: 'normal' | 'warning';
}
export interface StepItemProps {
    /**
     * Label corresponding to each item
     */
    label?: string;
    /**
     * Optional icon. Only shows if parent stepper type is icon
     */
    icon?: JSX.Element;
    /**
     * Content that appears for the given item.
     */
    children?: JSX.Element | JSX.Element[];
    /**
     * Devs will set this to show the warning states for active index only.
     */
    activeState?: 'normal' | 'warning';
    /**
     * Whether the item gets a disabled appearance.
     */
    disabled?: boolean;
    /**
     * This states that stepper activeIndex has gone past this item. Marks a non-disabled item with a tick icon.
     */
    complete?: boolean;
    /**
     * This can fire for disabled too. Visually completing a disabled item does not show a tick, but internally should be marked as complete.
     */
    onComplete?: () => void;
    stepItemAriaLabel?: string;
}
export interface StepperProps extends Omit<JDSHorizontalStepperProps, 'maxWidth'> {
    /**
     * Group of Items inside stepper.
     */
    children: ReactElement<StepItemProps>[];
    /**
     * Stepper can be displayed as vertical, horizontal and hidden on different screens. Default selected 'auto' corresponds to Stepper being 'horizontal' on Desktops and 'vertical' on phones
     */
    orientation?: 'auto' | 'horizontal' | 'vertical' | 'hidden';
    /**
     * Represents the type of Stepper indication.
     */
    itemsType?: 'dot' | 'numbered' | 'icon';
    /**
     * If set it will limit max width of the panel to specified width.
     */
    maxWidth?: string;
    /**
     * This Function is called whenever the active Step Item changes
     */
    onActiveChange?: (activeIndex: number) => void;
    /**
     * This Function is called whenever data of a StepItem changes dynamically
     */
    onStepDataChange?: (data: StepItemData[]) => void;
    /**
     * Called upon completion of entire Stepper Component.
     */
    onComplete?: () => void;
    ref?: RefObject<StepperRef>;
    stepItemAriaLabel?: string;
}
