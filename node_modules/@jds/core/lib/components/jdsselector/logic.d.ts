import { FormEvent } from 'react';
import { JDSSelectorProps } from './generated';
export interface SelectorItemProps {
    value: string;
    label: string;
    icon?: JSX.Element;
    iconOnly?: boolean;
    id?: string;
    defaultChecked?: boolean;
    check?: boolean;
}
export interface SelectorsInputProps {
    /**
     * Selector is radio button behind the scenes. This acts as the `name` attribute
     * for all radio button.
     */
    name?: string;
    /**
     * Current selected item. You can overwrite it by passing a new value
     */
    selectedIndex?: number;
}
export interface SelectorProps extends SelectorsInputProps, Omit<JDSSelectorProps, 'selectedIndex' | 'items' | 'onClick' | 'kind'> {
    /**
     * An array of each item for the selector. Accepts as an array of object with type <br>
     * `{ value: string; label: string; icon?: JSX.Element; iconOnly?: boolean;`<br>
     * `defaultChecked?: boolean; ...otherInputProps }[]`<br>
     * `'defaultChecked?: boolean; has been DEPRECATED`<br>
     */
    items: Array<SelectorItemProps>;
    /**
     * An overwritten `onChange` function that passes the `value` of the selected
     * item as well as its `index`.
     * @param value
     * @param event
     */
    onChange?: (value: string, index: number, event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => void;
}
export declare const withLogic: (Component: React.ComponentType<SelectorProps>) => React.FC<SelectorProps>;
