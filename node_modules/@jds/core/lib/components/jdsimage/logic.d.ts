import { IPROP_MAP } from '../../generators/modifyProps';
import { JDSImageProps } from './generated';
declare const legacyAspectRatios: readonly ["1:1", "round", "4:3", "5:4", "16:9", "4:5", "3:4", "9:16", "2.75:1"];
type legacyAspectRatiosType = (typeof legacyAspectRatios)[number];
export interface ImageProps extends Omit<JDSImageProps, 'aspectRatio' | 'provider' | 'onClick' | 'onLoad' | 'onError' | 'semantics'> {
    /**
     * This prop allows your app to pass your framework's `Image` element. Some `Image` libraries have props like `placeholder` and `fallback` etc. These props can be passed through the element sent to the provider prop
     * @example
     * ```
     * import { Image as NextImage} from "next/image";
     * <Image provider={<NextImage src='image.png'/>} />
     * ```
     */
    provider?: JSX.Element;
    /**
     * The aspect ratio of the image. `round` takes the `1:1` aspect ratio as default
     */
    aspectRatio?: legacyAspectRatiosType | JDSImageProps['aspectRatio'];
    alt?: string;
    onClick?: (ev: React.MouseEvent<HTMLDivElement>) => void;
    onError?: React.ImgHTMLAttributes<HTMLImageElement>['onError'];
    onLoad?: React.ImgHTMLAttributes<HTMLImageElement>['onLoad'];
}
export declare const PROP_MAP: IPROP_MAP<ImageProps>;
export declare const withLogic: (Component: React.ComponentType<ImageProps>) => React.FC<ImageProps>;
export {};
