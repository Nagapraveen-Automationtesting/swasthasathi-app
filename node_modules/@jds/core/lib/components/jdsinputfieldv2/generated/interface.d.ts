import type { JDSTextProps, JDSIconProps, JDSInputPhoneDropdownProps, JDSButtonProps, JDSSpinnerProps, JDSFeedbackBlockProps } from '../../internal';
export interface JDSInputFieldV2Props {
    /**  */
    state?: JDSFeedbackBlockProps['state'];
    /**  */
    size?: 'medium' | 'small' | 'large';
    /**  */
    type?: 'text' | 'email' | 'number' | 'password' | 'pin' | 'phone';
    /**  */
    disabled?: boolean;
    /**  */
    readOnly?: boolean;
    /**  */
    id?: string;
    /**  */
    label?: string;
    /**  */
    value?: string;
    /**  */
    autocomplete?: string;
    /**  */
    name?: string;
    /**  */
    autoFocus?: boolean;
    /**  */
    placeholder?: string;
    /**  */
    maxLength?: number;
    /**  */
    pattern?: string;
    /**  */
    required?: boolean;
    /**  */
    stateText?: string;
    /**  */
    helperText?: string;
    /**  */
    dynamicText?: string;
    /**  */
    dynamicButtonText?: string;
    onFocus?: (ev: React.FocusEvent<HTMLButtonElement>) => void;
    onBlur?: (ev: React.FocusEvent<HTMLButtonElement>) => void;
    onChange?: () => void;
    onKeyDown?: () => void;
    onInvalid?: () => void;
    onSubmit?: () => void;
    onPrefixClick?: (ev: React.MouseEvent<HTMLButtonElement>) => void;
    onSuffixClick?: (ev: React.MouseEvent<HTMLButtonElement>) => void;
    onButtonClick?: (ev: React.MouseEvent<HTMLButtonElement>) => void;
    prefix?: Array<React.ReactElement<JDSTextProps> | React.ReactElement<JDSIconProps> | React.ReactElement<JDSInputPhoneDropdownProps>> | React.ReactElement<JDSTextProps> | React.ReactElement<JDSIconProps> | React.ReactElement<JDSInputPhoneDropdownProps>;
    suffix?: Array<React.ReactElement<JDSButtonProps> | React.ReactElement<JDSIconProps> | React.ReactElement<JDSSpinnerProps>> | React.ReactElement<JDSButtonProps> | React.ReactElement<JDSIconProps> | React.ReactElement<JDSSpinnerProps>;
    info?: React.ReactNode;
    ariaLabel?: string;
    ariaDescribedby?: string;
    ariaInvalid?: string;
    dynamicButtonAriaLabel?: string;
    dynamicButtonAriaDescribedby?: string;
    custom?: string;
}
