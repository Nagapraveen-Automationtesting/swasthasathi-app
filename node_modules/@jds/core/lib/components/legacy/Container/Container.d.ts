import { HTMLAttributes, ReactNode } from 'react';
import { TokensRadiusType, TokensSpacingType } from '../models';
import { TokensColorThemeType } from '../models/dist-tokens/Theme';
export interface ContainerProps extends HTMLAttributes<HTMLElement> {
    children: ReactNode;
    /**
     * `full` fills the container on entire horizontal space <br/>
     * `max-width` centers and stops container from expanding on max media query size (1280px). This also adds --spacing-layout margin to left and right.<br/>
     * `max-width-narrow` centers and stops container from expanding on narrow media query size. e.g. 768px. Useful for narrower rich text containers. <br/>
     * `centered` centers the contents of the the container vertically and horizontally<br/>
     * `flex` lays children next to each other horizontally
     */
    layout?: 'full' | 'max-width' | 'max-width-narrow' | 'centered' | 'flex';
    /**
     * Select size of padding to add. Note that `layout` is dynamic and changes its value depending on breakpoints.
     */
    pad?: TokensSpacingType;
    /**
     * Sets the position of padding defined as part of `pad` property. If `pad` property present, this default to `all`.
     */
    padPosition?: 'all' | 'vertical' | 'horizontal' | 'bottom' | 'top' | 'left' | 'right';
    background?: TokensColorThemeType | string;
    /**
     * Changes the mode of the children. Setting dark mode will switch all children's text color to light. Remember to change background color to something dark to notice light colored text.
     */
    mode?: 'dark' | 'light' | 'bold' | 'none';
    /**
     * Makes the container have rounded corners with given size.
     */
    rounded?: TokensRadiusType;
    /**
     * Denotes which breakpoint if this container meant to show on.
     * Uses css's `display:none` property to hide the container.
     * Note that selecting `tablet` will also show container on `mobile`.
     */
    displayOn?: 'all' | 'desktop' | 'mobile' | 'tablet' | 'tablet-only';
    /**
     * Whether this container should animate with fadein affect when in view
     */
    animateIn?: boolean;
    /**
     * Can be used to animate containers at a later time. For example cards in a sequence.
     */
    animateNow?: boolean;
    /**
     * @param isVisible boolean
     * @returns void
     */
    /**
     * Switch Between Elements
     */
    as?: 'section' | 'div';
    onVisible?: (isVisible: boolean) => void;
}
/**
 * The `<Container />` component extends `HTMLAttributes<HTMLElement>`.
 *
 * A very versatile container component mostly used to construct page layout. What this component can help you with:

 1. **Padding** - Add padding to with desired size and desired position.
 2. **Layout** - Adjust max-width of container as well as some basic horizontal/vertical alignment of children.
 3. **Breakpoints** - Enable/Disabled the content of container to be visible on given viewports only.
 4. **Background** - Control some predefined background of this container. Works best with dark theme.
 4. **Radius** - Add border radius to the container with pre-defined sizes.
 5. **Mode** - Control all childrens' modes through a single prop. E.g. white text, icons
 6. **Animation** - Can be enabled/disabled to show a fadeup animation when this container comes in view.
 7. **On Visible** - Instead of using third-party on visibility libraries, this component provides a `onVisibility` prop.
 *
 * @param props
 * @constructor
 * @example
 * <Container
      layout='centered'
      pad='m'
      background='sparkle-20'
      mode='dark'
      rounded='pill'
      displayOn='desktop'
    >
      Children
    </Container>
 */
declare const Container: import("react").ForwardRefExoticComponent<ContainerProps & import("react").RefAttributes<HTMLDivElement>>;
export default Container;
