import { IPROP_MAP } from '../../generators/modifyProps';
import { JDSIconProps } from './generated';
declare const legacyColors: readonly ["primary", "secondary", "sparkle", "grey-100", "grey-80", "grey-60", "success", "error", "warning"];
type legacyColorsType = (typeof legacyColors)[number];
declare const legacyKinds: readonly ["icon-only", "background-bold"];
type legacyKindsType = (typeof legacyKinds)[number];
declare const legacySizes: readonly ["m", "s", "l", "xl", "xxl"];
type legacySizesType = (typeof legacySizes)[number];
export interface IconProps extends Omit<JDSIconProps, 'size' | 'color' | 'kind' | 'onClick'> {
    size?: legacySizesType | JDSIconProps['size'];
    color?: legacyColorsType | JDSIconProps['color'];
    kind?: legacyKindsType | JDSIconProps['kind'];
    ic: string | JSX.Element;
    onClick?: (ev: React.MouseEvent<HTMLDivElement>) => void;
    customSize?: string;
}
export declare const PROP_MAP: IPROP_MAP<IconProps>;
export declare const formatIconName: (iconName: string) => string;
export declare const withLogic: (Component: React.ComponentType<IconProps>) => React.FC<IconProps>;
export {};
