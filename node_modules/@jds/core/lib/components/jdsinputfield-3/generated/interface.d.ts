import type { JDSIcon2Props, JDSText2Props, JDSAvatar2Props, JDSButton2Props, JDSFeedbackBlock2Props, JDSInputProps } from '../../internal';
export interface JDSInputFieldProps {
    /**  */
    type?: JDSInputProps['type'];
    /**  */
    attention?: 'medium' | 'high';
    /**  */
    size?: 'M' | 'S' | 'L';
    /**  */
    disabled?: boolean;
    /**  */
    readOnly?: boolean;
    /**  */
    appearance?: 'auto' | 'primary' | 'secondary' | 'sparkle' | 'positive' | 'negative' | 'warning' | 'neutral' | 'informative';
    /**  */
    label?: string;
    /**  */
    id?: string;
    /**  */
    description?: string;
    /**  */
    helperText?: string;
    /**  */
    value?: string;
    /**  */
    placeholder?: string;
    onChange?: () => void;
    onFocus?: (ev: React.FocusEvent<HTMLButtonElement>) => void;
    onBlur?: (ev: React.FocusEvent<HTMLButtonElement>) => void;
    start?: React.ReactElement<JDSIcon2Props> | React.ReactElement<JDSText2Props> | React.ReactElement<JDSAvatar2Props>;
    end?: React.ReactElement<JDSIcon2Props> | React.ReactElement<JDSText2Props> | React.ReactElement<JDSButton2Props>;
    feedback?: Array<React.ReactElement<JDSFeedbackBlock2Props>> | React.ReactElement<JDSFeedbackBlock2Props>;
    ariaLabel?: string;
    ariaDescribedby?: string;
    ariaInvalid?: string;
    custom?: string;
}
