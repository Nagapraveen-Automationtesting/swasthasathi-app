import type { JDSContentBlockProps, JDSImageProps, JDSListBlockProps } from '../../internal';
export interface JDSContentCardProps {
    /**  */
    size?: 'xtra-small' | 'xtra-xtra-small' | 'small' | 'medium' | 'large' | 'xtra-large';
    /** Horizontal orientation puts image and content side by side. */
    orientation?: 'vertical' | 'horizontal';
    /**  */
    imageRatio?: 'wide' | 'square' | 'landscape' | 'portrait';
    /** Toggle drop shadow */
    shadow?: boolean;
    /**  */
    condensed?: boolean;
    title?: string;
    description?: string;
    primaryCTA?: string;
    secondaryCTA?: string;
    caption?: React.ReactElement<any>;
    ctaWrap?: JDSContentBlockProps['ctaWrap'];
    isTertiary?: boolean;
    image?: string;
    imgAlt?: string;
    imgTitle?: string;
    borderRadius?: string | number;
    imageFocus?: JDSImageProps['imageFocus'];
    /** When present, the entire card is clickable. If any other CTAs are sent, they will not be clickable. */
    fullCardCTA?: string;
    /**  */
    footer?: string;
    onClick?: (ev: React.MouseEvent<HTMLButtonElement>) => void;
    onPrimaryClick?: (ev: React.MouseEvent<HTMLButtonElement>) => void;
    onSecondaryClick?: (ev: React.MouseEvent<HTMLButtonElement>) => void;
    header?: React.ReactElement<JDSListBlockProps>;
    children?: React.ReactNode;
    imageAriaLabel?: string;
    imageAriaDescribedby?: string;
    primaryCtaAriaLabel?: string;
    primaryCtaAriaDescribedby?: string;
    secondaryCtaAriaLabel?: string;
    secondaryCtaAriaDescribedby?: string;
    custom?: string;
}
