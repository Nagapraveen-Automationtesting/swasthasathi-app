import { IPROP_MAP } from '../../generators/modifyProps';
import { JDSTextProps } from './generated';
declare const legacyTextColors: readonly ["primary-grey-100", "primary-80", "primary-70", "primary-60", "primary-50", "primary-40", "primary-30", "primary-20", "primary-inverse", "primary-background", "primary-grey-80", "primary-grey-60", "primary-grey-40", "primary-grey-20", "secondary-80", "secondary-70", "secondary-60", "secondary-50", "secondary-40", "secondary-30", "secondary-20", "secondary-inverse", "secondary-background", "secondary-grey-100", "secondary-grey-80", "secondary-grey-60", "secondary-grey-40", "secondary-grey-20", "sparkle-80", "sparkle-70", "sparkle-60", "sparkle-50", "sparkle-40", "sparkle-30", "sparkle-20", "sparkle-inverse", "sparkle-background", "sparkle-grey-100", "sparkle-grey-80", "sparkle-grey-60", "sparkle-grey-40", "sparkle-grey-20", "feedback-error-80", "feedback-error-50", "feedback-error-20", "feedback-warning-80", "feedback-warning-50", "feedback-warning-20", "feedback-success-80", "feedback-success-50", "feedback-success-20"];
type legacyTextColorsType = (typeof legacyTextColors)[number];
declare const legacyAppearance: readonly ["body-s", "heading-xl", "heading-l", "heading-m", "heading-s", "heading-xs", "heading-xxs", "overline", "body-l", "body-l-bold", "body-l-link", "body-m", "body-m-bold", "body-m-link", "body-s-bold", "body-s-link", "body-xs", "body-xs-bold", "body-xs-link", "body-xxs", "body-xxs-bold", "body-xxs-link", "list-title", "body_xs_caps"];
type legacyAppearanceType = (typeof legacyAppearance)[number];
export interface TextProps extends Omit<JDSTextProps, 'color' | 'appearance' | 'textType' | 'onTextlayout' | 'textAlign'> {
    color?: legacyTextColorsType | JDSTextProps['color'];
    appearance?: legacyAppearanceType | JDSTextProps['appearance'];
    /**
     * @deprecated
     * use `text` prop instead
     */
    children?: React.ReactNode;
    as?: 'div' | 'label' | 'p' | 'small' | 'span';
    role?: string;
    ariaDescribedby?: string;
    ariaHidden?: string;
}
export declare const PROP_MAP: IPROP_MAP<TextProps>;
export declare const withLogic: (Component: React.ComponentType<TextProps>) => React.FC<TextProps>;
export {};
