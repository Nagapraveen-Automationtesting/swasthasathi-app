import type { JDSAvatarProps, JDSLinkProps, JDSIconProps, JDSImageProps, JDSTabsDesktopProps, JDSTextProps, JDSButtonProps } from '../../internal';
export interface JDSHeaderDesktopProps {
    /**  */
    search?: boolean;
    /**  */
    expandedSearch?: boolean;
    /**  */
    searchActive?: boolean;
    /**  */
    fullWidth?: boolean;
    /**  */
    brandLabel?: string;
    /**  */
    prefix?: string | JSX.Element;
    /**  */
    pageTitle?: string;
    /**  */
    links?: Array<{
        linkAriaLabel?: string;
        linkAriaDescribedby?: string;
        newTab?: boolean;
        href?: string;
        title?: string;
        routerLinkProps?: object;
        onClick?: (e: any) => void;
        subLinks?: Array<any>;
        active?: boolean;
    }>;
    /**  */
    searchLabel?: string;
    /**  */
    searchSuffix?: string | JSX.Element;
    /**  */
    query?: string;
    /**  */
    searchShowBack?: boolean;
    /**  */
    elementRef?: React.MutableRefObject<any>;
    /**  */
    megaMenuProps?: {
        menuItemAriaLabel: string;
        menuItemAriaDescribedby: string;
        subLinks: Array<any>;
        offsetX: string | number;
        offsetY: string | number;
        width: string | number;
        open: boolean;
    };
    /**  */
    searchResults?: Array<{}>;
    /**  */
    searchResultHeader?: string;
    /**  */
    searchResultHeaderAction?: string;
    /**  */
    dynamicButtonText?: string;
    onSearchActiveChange?: () => void;
    logoOnClick?: (ev: React.MouseEvent<HTMLButtonElement>) => void;
    avatarOnClick?: (ev: React.MouseEvent<HTMLButtonElement>) => void;
    prefixOnClick?: (ev: React.MouseEvent<HTMLButtonElement>) => void;
    suffixOnClick?: (ev: React.MouseEvent<HTMLButtonElement>) => void;
    onHover?: () => void;
    onMenuHoverEnd?: () => void;
    onSearchBlur?: (ev: React.FocusEvent<HTMLButtonElement>) => void;
    onSearchFocus?: (ev: React.FocusEvent<HTMLButtonElement>) => void;
    onSearchChange?: () => void;
    onSearchBoxSuffixClick?: (ev: React.MouseEvent<HTMLButtonElement>) => void;
    onSearchKeydown?: () => void;
    onSearchIconClick?: (ev: React.MouseEvent<HTMLButtonElement>) => void;
    onSearchResultHeaderActionClick?: (ev: React.MouseEvent<HTMLButtonElement>) => void;
    onSearchResultClick?: (ev: React.MouseEvent<HTMLButtonElement>) => void;
    avatar?: React.ReactElement<JDSAvatarProps> | React.ReactElement<JDSLinkProps>;
    pageTitlePrefix?: React.ReactElement<JDSAvatarProps> | React.ReactElement<JDSIconProps> | React.ReactElement<JDSImageProps>;
    tabs?: React.ReactElement<JDSTabsDesktopProps>;
    suffix?: React.ReactElement<JDSTextProps> | React.ReactElement<JDSButtonProps> | React.ReactElement<JDSLinkProps>;
    logo?: React.ReactElement<JDSIconProps> | React.ReactElement<JDSImageProps> | React.ReactElement<JDSLinkProps>;
    iconLinks?: Array<React.ReactElement<JDSLinkProps>> | React.ReactElement<JDSLinkProps>;
    role?: string;
    prefixAriaLabel?: string;
    prefixAriaDescribedby?: string;
    suffixAriaLabel?: string;
    suffixAriaDescribedby?: string;
    searchBoxPrefixAriaLabel?: string;
    searchBoxSuffixAriaLabel?: string;
    searchAriaLabel?: string;
    searchButtonAriaLabel?: string;
    searchButtonAriaDescribedby?: string;
    custom?: string;
}
