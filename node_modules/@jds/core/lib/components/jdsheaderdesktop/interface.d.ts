import { AvatarProps } from '../jdsavatar/logic';
import { IPROP_MAP } from '../../generators/modifyProps';
import { JDSHeaderDesktopProps } from './generated';
import { LinkProps } from '../jdslink/logic';
import { ListBlockProps } from '../jdslistblock/logic';
import { MouseEvent } from 'react';
import { SearchBoxProps } from '../jdssearchbox/logic';
import { SearchResultsItemProps } from '../jdssearchresults/logic';
import { TabsProps } from '../jdstabsdesktop/logic';
export interface SearchResultSectionProps {
    /**
     * List of the results to be displayed in the SearchResults panel.
     * Component accepts item to be of type `string` or `ListBlock`.
     * If item is of type `string` internally it will generate `ListBlock` where title will be the string that is passed.
     */
    results?: (LinkType & ListBlockProps)[];
    /**
     * A Heading that will display in the Header of the SearchResults
     */
    header?: string;
    /**
     * If passed a button will appear on the right side of the Heading in the Header
     */
    headerAction?: LinkProps;
    /**
     * A Heading that will display in the Footer of the SearchResults
     */
    footer?: string;
    /**
     * If passed a button will appear on the right side of the Heading in the Footer
     */
    footerAction?: LinkProps;
    /**
     * Click event for `headerAction` button. Passing this makes the button send click events.
     */
    onHeaderActionClick?: (e: MouseEvent<HTMLButtonElement>) => void;
    /**
     * Click event for `footerAction` button. Passing this makes the button send click events.
     */
    onFooterActionClick?: (e: MouseEvent<HTMLButtonElement>) => void;
}
export interface SearchResultsProps {
    /**
     * Defines if search results have box shadow or the panel is without border/box-shadow
     */
    appearance?: 'normal' | 'box';
    /**
     * Sections to display results
     */
    sections?: SearchResultSectionProps[];
    /**
     * Method is invoked if result item has been selected.
     * Item can be selected by clicking with a mouse, tapping on the phone or pressing Enter while item has been highlighted
     * @param item
     */
    onResultsItemClick?: (item: SearchResultsItemProps) => void;
    /**
     * Method is invoked if result item has been highlighted.
     * Item can be highlighted by hovering with the mouse over item, Tabbing into item or using ArrowDown/ArrowUp on the keyboard
     * @param item
     */
    onResultsItemHighlighted?: (item: SearchResultsItemProps) => void;
}
export interface HeaderSearchProps {
    /**
     * Appears on the left of opened search on desktop
     */
    prefix?: JSX.Element | null;
    /**
     * Defines link for prefix icon
     */
    prefixLink?: LinkType;
    /**
     * If set to false it will collapse search on the mobile device and display button
     */
    expandedSearch?: boolean;
    /**
     * Search input props
     */
    searchInput?: SearchBoxProps;
    /**
     * List of the results to be displayed in the SearchResults panel.
     * Component accepts item to be of type `string` or `ListBlock`.
     * If item is of type `string` internally it will generate `ListBlock` where title will be the string that is passed.
     */
    searchResults?: SearchResultsProps;
    /**
     * Change event to be fired when SearchBox value changes
     * @param val
     */
    onSearchChange?: (val: string) => void;
    /**
     * Change event to be fired when SearchBox value changes
     */
    onSearchKeyDown?: (ev: React.KeyboardEvent<HTMLInputElement>) => void;
    /**
     * Method is invoked if result item has been selected.
     * Item can be selected by clicking with a mouse, tapping on the phone or pressing Enter while item has been highlighted
     * @param item
     */
    onSearchResultClick?: (item: SearchResultsItemProps) => void;
    /**
     * Method is invoked if search is focused.
     */
    onSearchFocus?: () => void;
    /**
     * Method is invoked whenever the search panel opens/closes
     */
    onSearchStateChange?: (state: 'open' | 'closed') => void;
    /**
     * Helps in expanding the header search to full width, default false.
     */
    suffix?: JSX.Element;
}
export type LinkType = LinkProps;
export interface MenuItem extends LinkType {
    titleEl?: ListBlockProps;
    subLinks?: (LinkType & {
        /**
         * Level 2 Links
         */
        title?: string;
        titleEl?: ListBlockProps;
        subLinks?: (LinkType & {
            /**
             * Level 3 Links
             */
            title?: string;
            titleEl?: ListBlockProps;
        })[];
    })[];
}
export interface HeaderProps extends Pick<JDSHeaderDesktopProps, 'avatarOnClick' | 'logoOnClick'> {
    variant?: 'default' | 'active_search';
    /**
     * Logo as undefined will show the default logo. logo as null will show no logo. logo with custom element will show that.
     * Logo Icon on the left side, logo and logo text are not shown if header has items and device is mobile.
     */
    logo?: JSX.Element | null;
    /**
     * Logo Text besides Logo Icon on the left side, logo and logo text are not shown if header has items and device is mobile
     */
    brandLabel?: string;
    /**
     * Link upon clicking Logo and title.
     */
    logoLink?: LinkType;
    /**
     * List of the menu Items. Each item can have `items: MenuItem[]` up to 3 levels
     */
    links?: MenuItem[];
    /**
     * List of the elements to appear on the right side such as Buttons, Avatars...
     */
    iconLinks?: Array<{
        icon: string | JSX.Element;
    } & LinkProps>;
    /**
     * Optional Avatar element
     */
    avatar?: AvatarProps;
    /**
     * Enables Search component
     */
    search?: boolean;
    /**
     * Event emitted on search state changes
     */
    onSearchStateChange?: (val: 'open' | 'closed') => void;
    /**
     * Options to configure SearchBox and SearchResults props and methods
     */
    searchConfig?: HeaderSearchProps;
    /**
     * If set to false it will collapse search on the mobile device and display button
     */
    expandedSearch?: boolean;
    /**
     * Option to configure the active link
     */
    activeLink?: number;
    /**
     * Secondary Nav that appears under the main header.
     */
    tabs?: JSX.Element | TabsProps;
    /**
     * Appears on the left burger menu or logo if no burger menu. Eg. Back or Close Icon
     */
    prefix?: JSX.Element;
    /**
     * Link upon clicking prefix
     */
    prefixLink?: LinkType;
    /**
     * Appears on the extreme right of the header. Collapsed by default. E.g. cancel, accept text.
     */
    suffix?: string | JSX.Element;
    /**
     * Link upon clicking suffix
     */
    suffixLink?: LinkType;
    /**
     * Used to show page title. Appears on the right of logo contents.
     */
    pageTitle?: string;
    /**
     * An icon, avatar or image that appears to the left of label
     */
    pageTitlePrefix?: ListBlockProps['prefix'];
    /**
     * Expands the header to max width default false
     */
    fullWidth?: boolean;
    /**
     * Optional Avatar element
     */
    avatarLink?: LinkType;
}
export declare const PROP_MAP: IPROP_MAP<HeaderProps>;
