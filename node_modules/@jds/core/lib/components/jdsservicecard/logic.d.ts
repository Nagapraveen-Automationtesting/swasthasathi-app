import { IPROP_MAP } from '../../generators/modifyProps';
import { BadgeProps } from '../jdsbadge/logic';
import { ButtonProps } from '../jdsbutton/logic';
import { JDSServiceCardProps } from './generated';
import { LinkProps } from '../jdslink/logic';
import { MouseEvent } from 'react';
declare const legacySizes: readonly ["xxs", "s", "xs"];
type legacySizesType = (typeof legacySizes)[number];
export interface ServiceCardProps extends Omit<JDSServiceCardProps, 'size' | 'description' | 'primaryCTA' | 'image'> {
    /**
     * Determines the size of the ContentBlock. Size dictates the text and spacing.
     * For size=`xxs`, the layout also changes if only a single CTA is sent.
     */
    size?: legacySizesType | JDSServiceCardProps['size'];
    /**
     * Accepts description as string. JSX.Element is also allowed in case you have
     * anchor tags inside your richtext.
     * Passing a JSX elements is deprecated. Please pass a string always
     */
    description?: string | JSX.Element;
    /**
     * Please see `Link>LinkType`. The `button={}` parameter can be sent to overwrite
     * default button behaviours. E.g. different kind, destructive, with icons etc.
     */
    primaryCTA?: string | {
        /**
         * @deprecated
         * Pass the string to primaryCTA directly
         */
        title?: string;
        /**
         * @deprecated
         * use `onPrimaryClick`
         */
        onClick?: (ev: MouseEvent<HTMLDivElement>) => void;
        /**
         * @deprecated
         */
        _button?: ButtonProps;
    };
    /**
     * Image HTML tags. e.g. `<img>`
     *
     * Passing an image element is deprecated. Pass the image source as as string directly
     */
    image: string | JSX.Element;
    /**
     * Badge Component as a Caption
     * @deprecated
     * use `badgeIcon` and `badgeLabel`
     */
    caption?: BadgeProps;
    /**
     * Service Card can also accept custom children for further customisation.
     */
    children?: React.ReactNode;
    /**
     * When present, the entire card is clickable
     * Eg. fullCardCTA:{onClick: ()={}}
     */
    fullCardCTA?: LinkProps;
}
export declare const PROP_MAP: IPROP_MAP<ServiceCardProps>;
export declare const withLogic: (Component: React.ComponentType<ServiceCardProps>) => React.FC<ServiceCardProps>;
export {};
