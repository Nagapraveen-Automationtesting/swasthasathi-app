import { NotificationProps } from '../components/jdsnudge/logic';
import { ToastProps } from '../components/jdstoast/interface';
export type SemanticToastProps = Omit<NotificationProps, 'icon'>;
export interface NotificationServiceProps {
    type: string;
    notifications: NotificationProps[];
}
export declare class NotificationService {
    static eventName: string;
    static args: NotificationServiceProps;
    constructor(args: NotificationServiceProps);
}
export declare class NotificationCloseService {
    static eventName: string;
    static args: {};
    constructor(args: {});
}
export declare class NotificationController {
    static nudges: NotificationProps[];
    static toasts: NotificationProps[];
    private static updateNotifications;
    private static createID;
    private static getNotificationIndex;
    static getNotification(id: string, type: 'nudge' | 'toast'): NotificationProps | void;
    static nudge(props: NotificationProps): string;
    static toast(props: ToastProps): string;
    static dismiss(id: string, type: 'nudge' | 'toast'): string;
    static update(id: string, type: 'nudge' | 'toast', props: NotificationProps): void;
    static isActive(id: string, type: 'toast' | 'nudge'): boolean;
    static dismissAll(type: 'nudge' | 'toast'): void;
}
/**
 * Create a nudge notification
 * @param props The notification props
 * @returns `ID` The ID of the notification
 */
export declare const nudge: {
    (props: NotificationProps | string): string;
    /**
     * Updates a nudge notification
     * @param id The ID of the nudge
     * @param props Update props
     */
    update(id: string, props: NotificationProps | string): void;
    /**
     * Dismiss a nudge Notification
     * @param id  The ID of the nudge
     */
    dismiss(id: string): string;
    /**
     * Dismiss all nudges
     */
    dismissAll(): void;
    /**
     * Check whether a nudge is active
     * @param id The ID of the nudge
     * @returns {Boolean} whether a nudge is active
     */
    isActive(id: string): boolean;
    /**
     * Gets the nudge corresponding to the ID
     * @param id The ID of the nudge
     * @returns {NotificationProps} The corresponding nudge
     */
    get(id: string): NotificationProps | void;
};
/**
 * Create a toast notification
 * @param props The notification props. You can also pass a string directly which will serve as title
 * @returns `ID` The ID of the notification
 */
export declare const toast: {
    (props: ToastProps | string): string;
    /**
     * Updates a toast notification
     * @param id The ID of the toast
     * @param props Update props
     */
    update(id: string, props: ToastProps | string): void;
    /**
     * Dismiss all toasts
     */
    dismissAll(): void;
    /**
     * Dismiss a toast Notification
     * @param id  The ID of the toast
     */
    dismiss(id: string): string;
    /**
     * Create an `info` toast notification with the `IcInfo` Icon
     * @param props The notification props. You can also pass a string directly which will serve as title.
     * @returns `ID` The ID of the toast
     */
    info(props: SemanticToastProps | string): string;
    /**
     * Create an `error` toast notification with the `IcErrorColored` Icon
     * @param props The notification props. You can also pass a string directly which will serve as title
     * @returns `ID` The ID of the toast
     */
    error(props: SemanticToastProps | string): string;
    /**
     * Create an `success` toast notification with the `IcSuccessColored` Icon
     * @param props The notification props. You can also pass a string directly which will serve as title
     * @returns `ID` The ID of the toast
     */
    success(props: SemanticToastProps | string): string;
    /**
     * Create an `warning` toast notification with the `IcWarningColored` Icon
     * @param props The notification props. You can also pass a string directly which will serve as title
     * @returns `ID` The ID of the toast
     */
    warning(props: SemanticToastProps | string): string;
    /**
     * Check whether a toast is active
     * @param id The ID of the toast
     * @returns {Boolean} whether a toast is active
     */
    isActive(id: string): boolean;
    /**
     * Gets the nudge corresponding to the ID
     * @param id The ID of the nudge
     * @returns {NotificationProps} The corresponding nudge
     */
    get(id: string): ToastProps | void;
};
