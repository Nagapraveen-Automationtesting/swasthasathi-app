export type MODIFIED_PROPS<T extends object = object> = {
    [k in keyof T]: {
        properties?: Record<string, T[keyof T]>;
        defaultValue?: T[keyof T];
        variations?: {
            [p in keyof T[k]]: Record<string, unknown>;
        };
    };
};
export declare const modifyProps: <T extends object>(props: T, map?: ((props: T) => Partial<MODIFIED_PROPS<T>>) | undefined) => T;
export declare const withModifiedProps: <T extends object = Record<string, string>>(Component: import("react").ComponentType<T>, map?: ((props: T) => Partial<MODIFIED_PROPS<T>>) | undefined) => import("react").FC<T>;
export type IPROP_MAP<T extends object> = (props: T) => MODIFIED_PROPS<T>;
