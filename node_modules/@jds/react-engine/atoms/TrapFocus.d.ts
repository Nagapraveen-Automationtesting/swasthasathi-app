import { FC, HTMLAttributes } from 'react';
export declare const focusableSelectors: string[];
export declare const isVisible: (element: HTMLElement) => number;
export declare const getFocusableChildren: (root: HTMLElement | null) => HTMLElement[] | null;
export interface TrapFocusProps extends HTMLAttributes<HTMLDivElement> {
    /**
     * When set to true it will take focus from the document, focus first focusable element within trap focus component and trap it while pressing Tab or Shift+Tab.
     * Tabbing will rotate focus within the inner focusable elements of the component.
     * When set to false or destroyed it will return focus to the element it took focus away from.
     */
    trap?: boolean;
}
/**
 * TrapFocus is a component that traps focus within its children.
 * It will take focus from the document, focus first focusable element within trap focus component and trap it while pressing Tab or Shift+Tab.
 * Tabbing will rotate focus within the inner focusable elements of the component.
 * When set to false or destroyed it will return focus to the element it took focus away from.
 * @param props
 * @param {boolean} [props.trap=false] - When set to true it will take focus from the document, focus first focusable element within trap focus component and trap it while pressing Tab or Shift+Tab.
 * Tabbing will rotate focus within the inner focusable elements of the component.
 * When set to false or destroyed it will return focus to the element it took focus away from.
 * @param {HTMLAttributes<HTMLDivElement>} props.rest - All other props will be passed to the root element.
 * @returns {ReactElement}
 */
declare const TrapFocus: FC<TrapFocusProps>;
export default TrapFocus;
