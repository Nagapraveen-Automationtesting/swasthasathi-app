import * as React from 'react';
export declare const WINDOW: Window | undefined;
type BreakpointType = {
    xmobile: number;
    mobile: number;
    tablet: number;
    desktop: number;
    widescreen: number;
    hd: number;
};
type BreakpointResults = {
    [key in keyof BreakpointType]: boolean;
};
export declare const defaultBreakpoints: BreakpointType;
/**
 * Device Factory helper methods
 */
export declare class Devices {
    static breakpoints: BreakpointType;
    static withSizes(breakpoints: BreakpointType): Devices;
    /**
     * is width xmobile and below
     */
    static isXMobile(): boolean;
    /**
     * is width mobile and below. returns true even on xmobile
     */
    static isMobile(): boolean;
    /**
     * is width above mobile and below desktop
     */
    static isTabletOnly(): boolean;
    /**
     * is width less than tablet? returns true even on mobile and xmobile
     */
    static isTablet(): boolean;
    /**
     * is width greater than tablet?
     */
    static isDesktop(): boolean;
    /**
     * is width greater than max-flex of desktop (1280px). i.e the breakpoint after which
     * max-width does not keep growing.
     */
    static isWidescreen(): boolean;
    /**
     * is width greater than or equal to HD.
     */
    static isHD(): boolean;
    /**
     * Re-renders functional component at Breakpoints from defaultBreakpoints.
     * @returns ```
     {
          xmobile: boolean,
          mobile: boolean,
          tablet: boolean,
          desktop: boolean,
          widescreen: boolean,
          hd: boolean
      }
     ```
     * [xmobile < mobile < tablet] [desktop > widescreen > HD]
     * tablet will be true even when xmobile and mobile are true.
     * desktop will be true even when widescreen and hd are true.
     *
     *
     * Breakpoints can be overridden by calling withSizes() first.
     * e.g. Devices.withSizes(mySize).useMedia()
     */
    static useMedia(): BreakpointResults;
}
type UseResizeObserverFunctionType = (ref?: React.RefObject<HTMLElement>, callback?: (entry: DOMRectReadOnly) => void) => void;
export declare const useResizeObserver: UseResizeObserverFunctionType;
export declare const useLockBodyScroll: () => {
    setLock: React.Dispatch<React.SetStateAction<boolean>>;
};
/**
 * @param callback the function to be called when there's a change in the attributes provided
 * @param targetElement the element is to be observed
 * @param attributesFilter specific attributes to observe
 */
export declare const useMutationObserver: (callback: () => void, attributesFilter: string[], targetElement?: React.RefObject<HTMLElement>) => void;
export {};
