import { ComponentJSON } from '../interfaces';
import { PropertiesHyphen } from 'csstype';
export type LayerName = string;
export type ChildLayer = {
    [key: LayerName]: ChildLayer;
} | LayerName | Array<ChildLayer | LayerName>;
export type RootLayer = {
    [key: LayerName]: ChildLayer;
};
export type LayerBehaviors = 'hover' | 'focus' | 'active';
export type ExtendedPropertiesHyphen = Partial<Record<keyof PropertiesHyphen, string>> & {
    hidden?: '{hidden.true}' | '{hidden.false}' | string | boolean;
    size?: string;
    elevation?: string;
};
export type BehaviorProperties = Partial<Record<LayerBehaviors, ExtendedPropertiesHyphen>>;
export type LayerProperties = ExtendedPropertiesHyphen & {
    behavior?: BehaviorProperties;
};
export type PropertiesPerLayer = Record<LayerName, LayerProperties>;
export type VarientProps = string;
export type VarientValues = string | boolean;
export type VarientValuekeys = string;
export type Variants = Record<VarientProps, Record<VarientValuekeys, Record<LayerName, LayerProperties>>>;
export type CombinationConfig = Array<Array<VarientProps>>;
export type Combinations = Array<Record<VarientValuekeys, Record<VarientValuekeys, Record<VarientValuekeys, PropertiesPerLayer> | PropertiesPerLayer> | PropertiesPerLayer>>;
export type ConfigAPI = Record<VarientProps, {
    values: VarientValues[];
}>;
export type DataProp = string;
export type DataAPI = Record<DataProp, {
    type: string;
    layer: LayerName;
}>;
export type EventsAPI = {
    [EventName: string]: {
        layer: LayerName;
    };
};
export type API = {
    config?: ConfigAPI;
    data?: DataAPI;
    events?: EventsAPI;
};
export type InputJSON = {
    hierarchy: RootLayer;
    base?: PropertiesPerLayer;
    variant?: Variants;
    combination?: Combinations;
    combination_config?: CombinationConfig;
    api?: API;
};
export declare const p: PropertiesHyphen;
export declare const js: InputJSON;
export type CustomJSON = Omit<ComponentJSON, 'hierarchy'>;
