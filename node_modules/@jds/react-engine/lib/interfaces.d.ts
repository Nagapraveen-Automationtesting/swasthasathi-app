export interface Hierarchy {
    [key: string]: Array<string | Hierarchy> | undefined;
}
export type StringMap = Record<string, string>;
type Primitive = string | number | boolean;
export type PrimitiveMap = Record<string, Primitive>;
export type Value = Primitive | PrimitiveMap;
export type LayerMap = Record<string, Value>;
export interface BasicBaseMap {
    [key: string]: Value | Record<string, BasicBaseMap> | undefined;
}
interface BaseMap extends BasicBaseMap {
    value?: Value;
    behavior?: Record<string, BasicBaseMap>;
}
export type Base = Record<string, BaseMap>;
type Variant = Record<string, Record<string, Base>>;
export interface Combination {
    [key: string]: Combination | Base | undefined;
}
export type Combinations = Array<Combination>;
export type FlatTokens = Record<string, string>;
export interface API_Config {
    values: Array<string> | Array<boolean> | Array<number>;
}
interface API_Data_Entry {
    type: string;
    name: string;
    object?: StringMap;
}
export type API_Data = Record<string, API_Data_Entry>;
export interface API_Event {
    [event: string]: string;
}
interface API_Children {
    accepts: Array<string>;
    name?: string;
    max?: number;
}
export interface API {
    config?: Record<string, API_Config>;
    data?: Record<string, API_Data>;
    events?: Record<string, API_Event>;
    children?: Record<string, API_Children>;
}
export interface ComponentJSON {
    hierarchy: Hierarchy;
    base: Base;
    variant?: Variant;
    combination?: Combinations;
    combination_config?: Array<Array<string>>;
    api: API;
}
export type Template = string;
export type Style = string;
export type TemplateMap = Record<string, Template>;
export interface ComponentData {
    template: Template;
    style: Style;
    interfaces: ComponentInterfaces;
    transformed: ComponentJSON;
}
interface ArrayInput {
    type: 'list';
    object: Record<string, string>;
}
interface ObjectInput {
    type: 'object';
    object: Record<string, string>;
}
type OtherInput = ArrayInput | ObjectInput;
export type InputType = Record<string, string | Array<string> | OtherInput>;
export interface ComponentInterfaces {
    inputs?: InputType;
}
export interface PropData {
    left: string;
    right?: string;
    internal?: true;
    binding?: 'double' | 'none';
}
export interface TemplateObject {
    selector: string;
    selfClosing?: true;
    testId?: true;
    hidden?: true;
    children?: true;
    data?: Record<string, string>;
    events?: true;
    class?: true;
    style?: true;
    props?: Array<string | PropData>;
    slot?: true;
    currentIndex?: true;
}
/**
 * An object representing a processed public API.
 * It contains the `config` object, `data` object, and `events` object of an API,
 * all processed into a more usable format.
 */
export type ProcessedAPI = {
    config: Record<string, API_Config>;
    data: Record<string, API_Data>;
    events: Record<string, API_Event>;
    children: Record<string, Array<string>>;
};
export type TokenMap = Record<string, string | number | boolean>;
export type TokensGroup = Record<string, TokenMap>;
export type TokensWithGetter = {
    tokens: TokensGroup;
    getSwitchableTokens?: (tokens: Record<string, string>) => TokensGroup;
};
type ComponentProps = any;
type ComponentType = (props: ComponentProps) => JSX.Element;
export interface ComponentsMap {
    [key: string]: () => ComponentType | null | React.FC<any>;
}
export {};
