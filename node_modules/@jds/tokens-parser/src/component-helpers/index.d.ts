import type { API, Base, Combinations, ComponentJSON, FlatTokens, Hierarchy, LayerMap, PrimitiveMap, StringMap, Value } from '../interfaces/interface';
/**
 * Returns the template key for a given layer name.
 *
 * @param layerName - The name of the layer to find a template key for.
 * @returns The template key for the layer name, or undefined if not found.
 */
declare function getLayerType(layerName: string): string | undefined;
declare function getLayerTestId(componentName: string, layerName: string): string;
/**
 * Returns the root component name from a hierarchy object.
 *
 * @param hierarchy - The hierarchy object to find the root component name from.
 * @returns The root component name, or an empty string if not found.
 */
declare function getRoot(hierarchy: string | Hierarchy): string;
declare function getAllLayers(hierarchy: Hierarchy | string): Array<string>;
declare function getInvariants(json: ComponentJSON): Base;
/**
 * Returns the layer class name for a given component and layer name.
 *
 * @param componentName - The name of the component.
 * @param layer - The name of the layer.
 * @returns The layer class name in the format "j-{componentName}-{layer}".
 */
declare const getLayerClass: (componentName: string, layer: string) => string;
declare const getBaseCssVariable: (componentName: string, layer: string, rule: string, includeComponentName: boolean) => string;
declare const getCssVariable: (componentName: string, layer: string, rule: string, includeComponentName: boolean, pseudo?: string) => string;
/**
 * Returns a CSS variable declaration string for a base style rule.
 * @param componentName The name of the component.
 * @param layer The layer of the component.
 * @param rule The name of the rule.
 * @param pseudo Optional pseudo-class or pseudo-element.
 * @returns The CSS variable declaration string.
 */
declare const getBaseStyleRule: (componentName: string, layer: string, rule: string, value: Value, isInvariant: boolean, pseudo?: string, tokens?: FlatTokens) => Record<string, string>;
declare const getMultipleStyleRule: (componentName: string, layer: string, rule: string, variables: Array<string>, value: Value, isInvariant: boolean, pseudo?: string, tokens?: FlatTokens) => Record<string, string>;
declare function getBaseCSSVarRule(componentName: string, layer: string, rule: string, value: Exclude<Value, PrimitiveMap>, pseudo?: string, tokens?: FlatTokens): StringMap;
declare function handleRuleCSSVar(componentName: string, layer: string, rule: string, ruleVal: Value, pseudo?: string, layerMap?: LayerMap, tokens?: FlatTokens): StringMap;
declare function handleRuleClass(rule: string, ruleVal: Value, tokens: FlatTokens, pseudo?: string): string | null | undefined;
declare const getLayerShortKey: (layer: string, length?: number) => string;
type DrawnLayerWithClasses = {
    styles: StringMap;
    classes: Array<string>;
};
/**
 * Generates a string of CSS variables for a given layer of a component,
 * based on the provided `layerMap` object.
 * If a `pseudo` string is provided, it is added to the CSS variable names.
 * If the `layer` is a valid key in `defaults`,
 * the corresponding object in `layerMap` is merged with it.
 * The resulting CSS variables are returned as a string.
 * @param componentName The name of the component that the layer belongs to.
 * @param layer The name of the layer to generate CSS variables for.
 * @param layerMap An object containing CSS variable definitions for the layer.
 * @param pseudo An optional string to add to the CSS variable names.
 * @returns A string of CSS variables for the given layer.
 */
declare function drawLayer(componentName: string, layer: string, layerMap: LayerMap, invariantsMap: Base[string] | undefined, layerShortKey: string, pseudo?: string, tokens?: FlatTokens): DrawnLayerWithClasses;
declare const colorKeys: string[];
declare function getNewTokens(tokens: FlatTokens, baseMap: Base[string]): FlatTokens;
/**
 * Merges a `base` object with the appropriate variant object from the `variant` parameter,
 * based on the component's property values.
 * The resulting `Base` object is returned.
 * @param component The component to check property values against.
 * @param base The base `Base` object to merge with the variant object.
 * @param variant An object containing variant objects for different property values.
 * @returns The resulting `Base` object.
 */
declare function handleVariant<T extends ThisType<unknown>>(component: T, base: Base, variant: ComponentJSON['variant'], config: ComponentJSON['api']['config']): Base;
/**
 * Merges a `base` object with the appropriate combination object from the `combinations` parameter,
 * based on the component's property values.
 * The resulting `Base` object is returned.
 * @param component The component to check property values against.
 * @param base The base `Base` object to merge with the combination object.
 * @param combinations An object containing combination objects for different property combinations.
 * @param combinationConfigs An array of arrays that specifies the order in which
 * to check component properties for each combination.
 * @param config: the config API
 * @returns The resulting `Base` object.
 */
declare function handleCombinations<T extends ThisType<unknown>>(component: T, base: Base, combinations: Combinations, combinationConfigs: Array<Array<string>>, config?: ComponentJSON['api']['config']): Base;
declare function combineAllBases(json: ComponentJSON): Base;
declare const convertBase64ToObject: <P extends object>(value?: string) => P;
declare const convertToBase64: (value: object) => string;
declare const percentageRegExp: RegExp;
declare function getDefaultProps(api: API): Record<string, string | boolean>;
declare function getDefaultAppearance(api: ComponentJSON['api']): string;
export { colorKeys, convertBase64ToObject, convertToBase64, percentageRegExp, getLayerType, getLayerTestId, getRoot, getAllLayers, getInvariants, getLayerClass, getBaseCssVariable, getCssVariable, getBaseStyleRule, getMultipleStyleRule, getBaseCSSVarRule, handleRuleCSSVar, handleRuleClass, getLayerShortKey, drawLayer, getNewTokens, handleVariant, handleCombinations, combineAllBases, getDefaultProps, getDefaultAppearance };
