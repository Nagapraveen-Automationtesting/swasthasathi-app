import type { Base, ComponentJSON, CustomJSON, FlatTokens, Hierarchy, StringMap } from './interfaces/interface';
type Prop<T> = ThisType<unknown> & {
    [k in keyof T]: unknown;
};
export declare function replacePercentageTokens<T extends Prop<T>>(value: string, props: T): string;
export interface LayersPropsConfig {
    transformer?: boolean;
    getAmpersandTokens?: boolean;
    getAllBaseLayers?: boolean;
    getPercentageTokens?: Array<string>;
}
/**
 * this function generates CSS variables of the host component.
 * @param component name of the host component
 * @param json component JSON object
 * @returns
 */
export declare function getLayersProps<T extends Prop<T>>(component: T, json: ComponentJSON, config?: LayersPropsConfig): Base;
export type DrawnComponentWithClasses = {
    styles: StringMap;
    classes: Record<string, Array<string>>;
};
/**
 * This function generates the style string based on the component name passed and base object.
 * @param componentName component name for which CSS variables are to be generated.
 * @param base the base JSON property data from main component JSON object.
 * @returns returns Style string of the component.
 */
export declare function drawComponent(componentName: string, base: Base, hierarchy: Hierarchy, invariants?: Base, tokens?: FlatTokens): DrawnComponentWithClasses;
export declare const getCustomJSON: (custom?: string) => CustomJSON;
export declare function withComponentTokens(base: Base, metaCompName?: string): Base;
export {};
