import type { FlatTokens, Primitive, TokenMap, TokensGroup, TokensWithGetter } from './interfaces';
declare const RULE_JSON_MAP: Record<string, Array<string>>;
declare class BrandStore {
    private static constants;
    static defaults?: Record<string, Record<string, string>>;
    static fetchTokenMemo: Record<string, string>;
    private static switchablesMemo;
    private static componentTokensMemo;
    private static brandSwitchableFn?;
    static updateFlatTokens?: TokensWithGetter['updateFlatTokens'];
    static brandResolverFn?: TokensWithGetter['brandResolverFn'];
    private static brandComponentFn?;
    static getDensityMap?: TokensWithGetter['getDensityMap'];
    static getColorsMap?: TokensWithGetter['getColorsMap'];
    static getSwitchables(tokens: FlatTokens): TokensGroup | undefined;
    /**
     * Use this to register the brand provided by the user
     * @param brand The brand object to register
     */
    static registerBrand(brand: TokensWithGetter): void;
    static registerAdditionalTokens(tokens: Record<string, string>): void;
    static getValue(rule: string, key: string, tokens: FlatTokens, forceValue: boolean): TokenMap[string] | undefined;
    static getComponentToken(key: string, metaCompName: string): Primitive | undefined;
    static getApplicableTokens(tokens: FlatTokens): TokensGroup;
}
declare function fetchTokenFromFolder(folder: string, key: string, tokens: FlatTokens): string;
/**
 * @param rule rule to fetch token under ex. background-color
 * @param key ex. {semantic.color.actions.cta.default.background}
 * @param tokens switchable tokens applied
 * @returns a map with key as actual property and value as derived css var
 */
declare function fetchTokenValue(rule: string, key: string, tokens: FlatTokens, forceValue?: boolean): string;
declare function fetchTokenVariable(rule: string, key: string): string;
declare const units: string[];
declare function withUnits(rule: string, value: TokenMap[string]): string;
export { RULE_JSON_MAP, BrandStore, fetchTokenValue, fetchTokenFromFolder, fetchTokenVariable, units, withUnits };
