interface Hierarchy {
    [key: string]: Array<string | Hierarchy> | undefined;
}
type StringMap = Record<string, string>;
type Primitive = string | number | boolean | Array<string> | Array<number> | Array<boolean>;
type PrimitiveMap = Record<string, Primitive>;
type PrimitiveMapMap = Record<string, PrimitiveMap | number>;
type Value = Primitive | PrimitiveMap | PrimitiveMapMap;
type LayerMap = Record<string, Value>;
interface BasicBaseMap {
    [key: string]: Value | Record<string, BasicBaseMap> | undefined;
}
interface BaseMap extends BasicBaseMap {
    value?: Value;
    behavior?: Record<string, BasicBaseMap>;
    slot_layers?: PrimitiveMapMap;
}
type Base = Record<string, BaseMap>;
type Variant = Record<string, Record<string, Base>>;
interface Combination {
    [key: string]: Combination | Base | undefined;
}
type Combinations = Array<Combination>;
type FlatTokens = Record<string, string>;
interface API_Config {
    type?: string;
    values?: Array<string> | Array<boolean>;
    doc_description?: string;
    defaultIndex?: number;
}
interface API_Data_Entry {
    type: string;
    name: string;
    function?: boolean | string;
    object?: StringMap;
    platform?: string;
    doc_description?: string;
    values?: Array<string>;
    defaultIndex?: number;
    accepts?: Array<string>;
}
type API_Data = Record<string, API_Data_Entry>;
interface API_Event {
    [event: string]: string | Omit<API_Data_Entry, 'type'>;
}
interface API_Children {
    accepts: Array<string>;
    name?: string;
    max?: number;
    target?: string;
}
interface A11yProperty {
    name?: string;
    value?: string | boolean;
    prop?: string;
    function?: boolean;
    platform?: string;
}
interface API_A11y {
    name?: string;
    properties?: Record<string, string | A11yProperty>;
    repeating?: Record<string, string | A11yProperty>;
}
interface API {
    config?: Record<string, API_Config>;
    data?: Record<string, API_Data>;
    events?: Record<string, API_Event>;
    children?: Record<string, API_Children>;
    a11y?: Record<string, API_A11y>;
}
interface ComponentJSON {
    metadata?: Record<string, string | boolean> & {
        name?: string;
        version?: string;
        status?: string;
        frozen?: boolean;
        fileKey?: string;
    };
    hierarchy: Hierarchy;
    base: Base;
    variant?: Variant;
    combination?: Combinations;
    combination_config?: Array<Array<string>>;
    api: API;
}
type CustomJSON = Omit<ComponentJSON, 'hierarchy'>;
type Template = string;
type Style = string;
type TemplateMap = Record<string, Template>;
interface ComponentData {
    template: Template;
    style: Style;
    transformed: ComponentJSON;
}
type TokenMap = Record<string, string | number | boolean | Array<number>>;
type TokensGroup = Record<string, TokenMap>;
type TokensWithGetter = {
    tokens: TokensGroup;
    defaults?: Record<string, Record<string, string>>;
    getSwitchableTokens?: (tokens: FlatTokens) => TokensGroup;
    getUpdatedSwitchables?: (tokens: FlatTokens) => FlatTokens;
    getComponentTokens?: (componentName: string) => ComponentTokens | undefined;
    updateFlatTokens?: (tokens: FlatTokens) => FlatTokens;
    brandResolverFn?: (type: string, key: Exclude<Value, PrimitiveMap>, tokens: FlatTokens, forceValue: boolean) => {
        key: string;
        value: string;
    } | undefined;
    getColorToken?: (key: string) => string;
    getDensityMap?: (density: string) => StringMap;
    getColorsMap?: (tokens: FlatTokens, addFeedbackColors?: boolean) => StringMap;
};
type ComponentTokens = Record<string, Primitive>;
export type { ComponentData, ComponentTokens, TokensGroup, TokensWithGetter, TokenMap, Template, Style, TemplateMap, API_A11y, API_Config, API_Data, API_Event, A11yProperty, API, ComponentJSON, CustomJSON, FlatTokens, Combination, Combinations, Base, BasicBaseMap, LayerMap, Value, PrimitiveMap, PrimitiveMapMap, Primitive, StringMap, Hierarchy };
