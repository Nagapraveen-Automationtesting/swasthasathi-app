/**
 * Merge two objects together
 * @param base Object to merge properties into
 * @param rest Objects whose properties will be merged into the first.
 * @returns Merged object with keys from both recursively merged, and second object priortied when not mergable.
 */
declare function merge(base: unknown, ...rest: Array<unknown>): unknown;
/**
 * Capitalise a string.
 * @param s - A string to Capitalise
 * @returns {string} converted string
 */
declare const capitalise: (s: string) => string;
/**
 * Convert a string to camelCase
 * @param s String to convert to camelCase
 * @param separator separator used in s, defaults to -
 * @returns {string} converted string
 */
declare const camelCase: (s: string, separator?: string) => string;
/**
 * Convert a string to PascalCase
 * @param s String to convert to PascalCase
 * @param separator separator used in s, defaults to -
 * @returns {string} converted string
 */
declare const pascalCase: (s: string, separator?: string) => string;
declare const kebabcase: (inputString: string) => string;
declare function hexToRGB(hex: string): {
    r: number;
    g: number;
    b: number;
};
declare function deepClone<T>(obj: T): T;
declare const snakeCase: (string: string) => string;
export { merge, capitalise, camelCase, pascalCase, kebabcase, deepClone, hexToRGB, snakeCase };
