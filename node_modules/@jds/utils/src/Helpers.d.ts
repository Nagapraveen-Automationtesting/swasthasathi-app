declare function cloneDeep(obj: string | object | null): any;
export declare function each(collection: any, iteratee: any): void;
declare const pickBy: (object: {
    [x: string]: any;
    hasOwnProperty: (arg0: string) => any;
}, predicate: (arg0: any, arg1: string) => any) => Record<string, unknown>;
declare const omit: (obj: {
    [x: string]: any;
}, props: any[]) => {
    [x: string]: any;
};
declare const omitBy: (obj: {
    [s: string]: any;
} | ArrayLike<any>, check: (arg0: unknown, key: string) => boolean) => {
    [s: string]: any;
} | ArrayLike<any>;
declare const get: (obj: any, path: string, defValue: any) => any;
declare const normalizeCapitalize: (str: string) => string;
/**
 * Delays the invocation of the function until wait milliseconds have passed since the last call of the debounced function.
 * @param fn - Function that needs to debounce
 * @param wait - time for debouncing
 * @param immediate - Can be passed to run the function at the start and then debounce subsequent calls
 * @returns Debounced Function
 */
declare const debounce: (fn: (...args: any) => void, wait: number, immediate?: boolean) => (...args: any) => void;
declare const removeBraces: (value: string) => string;
declare const clamp: (value: number, min: number, max: number) => number;
export { cloneDeep, pickBy, omit, omitBy, get, normalizeCapitalize, debounce, removeBraces, clamp };
