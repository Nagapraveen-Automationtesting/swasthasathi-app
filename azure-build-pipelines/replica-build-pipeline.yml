trigger:
 - aks-replica

pool:
  name: "JHHProdAgent"

variables:
  #  - group: jfrog_jio_health_variables
  - group: SYN-RHH-GVARS-APP
  - name: APP_NAME
    value: $(Build.Repository.Name)
  - name: ENV
    value: $(Build.SourceBranchName)
  - name: IMAGE_NAME
    value: $(TARGET_ACR_IMAGE_BASE_NAME)$(APP_NAME):$(ENV)-latest
  - name: VERSIONED_TAG
    value: $(ENV)-$(Build.BuildNumber)
  - name: VERSIONED_IMAGE_NAME
    value: $(TARGET_ACR_IMAGE_BASE_NAME)$(APP_NAME):$(ENV)-$(Build.BuildNumber)

steps:


  - script: docker login $(TARGET_ACR_SERVER) -u="$(TARGET_ACR_USERNAME)" -p="$(TARGET_ACR_PASSWORD)"
    displayName: Logging-in to docker

  - script: docker build
      --network=host
      --build-arg PROXY_NO=$PROXY_NO
      --build-arg BUILD_ENV=replica
      --build-arg PUBLIC_URL=https://rep-healthhub.jiolabs.com/webapp-peoplecost
      --build-arg NETWORK_HELPER_VERSION=0.0.1-de
      --build-arg BIFROST_NETWORK_HELPER_VERSION=0.0.1-de
      --build-arg NGINX_PATH=/usr/share/nginx/html/webapp-peoplecost -t $(IMAGE_NAME) .
    displayName: "Building the docker image $(IMAGE_NAME)"

  - script: docker push $(IMAGE_NAME)
    displayName: "Pushing the image $(IMAGE_NAME) to docker"

  - script: docker tag $(IMAGE_NAME) $(VERSIONED_IMAGE_NAME)
    displayName: "Re-tagging the docker image $(VERSIONED_IMAGE_NAME)"

  - script: docker push $(VERSIONED_IMAGE_NAME)
    displayName: "Pushing the image $(VERSIONED_IMAGE_NAME) to docker"

  - script: echo $(VERSIONED_TAG) > VERSIONED_TAG
    displayName: "Pushing the tag $(VERSIONED_TAG) into VERSIONED_TAG"

  - task: PublishBuildArtifacts@1
    displayName: "Publish Artifact: VERSIONED_TAG"
    inputs:
      PathtoPublish: "$(System.DefaultWorkingDirectory)/VERSIONED_TAG"
      artifactName: drop_version

  - script: |
      echo Add other tasks to build, test, and deploy your project.
      echo See https://aka.ms/yaml
    displayName: "Run a multi-line script"

  - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
    displayName: "Clean Agent Directories"

  - bash: |
      docker rmi $(IMAGE_NAME)
      docker rmi $(VERSIONED_IMAGE_NAME)
    displayName: "Docker cleanup"
